<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[Hexo文章使用 hexo-blog-encrypt 插件加密访问]]></title>
    <url>%2F2019%2F03%2F10%2F4%2F</url>
    <content type="text"><![CDATA[请输入密码阅读全文... Incorrect Password! No content to display! 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]]></content>
      <categories>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>加密</tag>
        <tag>Hexo</tag>
        <tag>hexo-blog-encrypt</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[HTTP状态码]]></title>
    <url>%2F2019%2F02%2F04%2FHTTP%E7%8A%B6%E6%80%81%E7%A0%81%2F</url>
    <content type="text"><![CDATA[当浏览者访问一个网页时，浏览者的浏览器会向网页所在服务器发出请求。当浏览器接收并显示网页前，此网页所在的服务器会返回一个包含HTTP状态码的信息头（server header）用以响应浏览器的请求。HTTP状态码的英文为HTTP Status Code。HTTP状态码由三个十进制数字组成，第一个十进制数字定义了状态码的类型，后两个数字没有分类的作用。HTTP状态码共分为5种类型：1xx : 信息，服务器收到请求，需要请求者继续执行操作2xx : 成功，操作被成功接收并处理3xx : 重定向，需要进一步的操作以完成请求4xx : 客户端错误，请求包含语法错误或无法完成请求5xx : 服务器错误，服务器在处理请求的过程中发生了错误以下列举了有可能会返回的一系列 HTTP 状态消息：1xx: 信息消息：描述：100 Continue服务器仅接收到部分请求，但是一旦服务器并没有拒绝该请求，客户端应该继续发送其余的请求。101 Switching Protocols服务器转换协议：服务器将遵从客户的请求转换到另外一种协议。103 Checkpoint用于 PUT 或者 POST 请求恢复失败时的恢复请求建议。2xx: 成功消息：描述：200 OK请求成功（这是对HTTP请求成功的标准应答。）201 Created请求被创建完成，同时新的资源被创建。202 Accepted供处理的请求已被接受，但是处理未完成。203 Non-Authoritative Information请求已经被成功处理，但是一些应答头可能不正确，因为使用的是其他文档的拷贝。204 No Content请求已经被成功处理，但是没有返回新文档。浏览器应该继续显示原来的文档。如果用户定期地刷新页面，而Servlet可以确定用户文档足够新，这个状态代码是很有用的。205 Reset Content请求已经被成功处理，但是没有返回新文档。但浏览器应该重置它所显示的内容。用来强制浏览器清除表单输入内容。206 Partial Content客户发送了一个带有Range头的GET请求，服务器完成了它。3xx: 重定向消息：描述：300 Multiple Choices多重选择。链接列表。用户可以选择某链接到达目的地。最多允许五个地址。301 Moved Permanently所请求的页面已经转移至新的 URL 。302 Found所请求的页面已经临时转移至新的 URL 。303 See Other所请求的页面可在别的 URL 下被找到。304 Not Modified未按预期修改文档。客户端有缓冲的文档并发出了一个条件性的请求（一般是提供If-Modified-Since头表示客户只想比指定日期更新的文档）。服务器告诉客户，原来缓冲的文档还可以继续使用。305 Use Proxy客户请求的文档应该通过Location头所指明的代理服务器提取。306 Switch Proxy目前已不再使用，但是代码依然被保留。307 Temporary Redirect被请求的页面已经临时移至新的 URL 。308 Resume Incomplete用于 PUT 或者 POST 请求恢复失败时的恢复请求建议。4xx: 客户端错误消息：描述：400&nbsp;Bad Request因为语法错误，服务器未能理解请求。401 Unauthorized合法请求，但对被请求页面的访问被禁止。因为被请求的页面需要身份验证，客户端没有提供或者身份验证失败。402 Payment Required此代码尚无法使用。403 Forbidden合法请求，但对被请求页面的访问被禁止。404 Not Found服务器无法找到被请求的页面。405 Method Not Allowed请求中指定的方法不被允许。406 Not Acceptable服务器生成的响应无法被客户端所接受。407 Proxy Authentication Required用户必须首先使用代理服务器进行验证，这样请求才会被处理。408 Request Timeout请求超出了服务器的等待时间。409 Conflict由于冲突，请求无法被完成。410 Gone被请求的页面不可用。411 Length Required“Content-Length” 未被定义。如果无此内容，服务器不会接受请求。412 Precondition Failed请求中的前提条件被服务器评估为失败。413 Request Entity Too Large由于所请求的实体太大，服务器不会接受请求。414 Request-URI Too Long由于 URL 太长，服务器不会接受请求。当 POST 请求被转换为带有很长的查询信息的 GET 请求时，就会发生这种情况。415 Unsupported Media Type由于媒介类型不被支持，服务器不会接受请求。416 Requested Range Not Satisfiable客户端请求部分文档，但是服务器不能提供被请求的部分。417 Expectation Failed服务器不能满足客户在请求中指定的请求头。5xx: 服务器错误消息：描述：500 Internal Server Error请求未完成。服务器遇到不可预知的情况。501 Not Implemented请求未完成。服务器不支持所请求的功能，或者服务器无法完成请求。502 Bad Gateway请求未完成。服务器充当网关或者代理的角色时，从上游服务器收到一个无效的响应。503 Service Unavailable服务器当前不可用（过载或者当机）。504 Gateway Timeout网关超时。服务器充当网关或者代理的角色时，未能从上游服务器收到一个及时的响应。505 HTTP Version Not Supported服务器不支持请求中指明的HTTP协议版本。511 Network Authentication Required用户需要提供身份验证来获取网络访问入口。]]></content>
      <categories>
        <category>HTTP</category>
      </categories>
      <tags>
        <tag>HTTP</tag>
        <tag>HTTP状态码</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[vue面试中常问知识点整理]]></title>
    <url>%2F2019%2F02%2F03%2Fvue%E9%9D%A2%E8%AF%95%E4%B8%AD%E5%B8%B8%E9%97%AE%E7%9F%A5%E8%AF%86%E7%82%B9%E6%95%B4%E7%90%86%2F</url>
    <content type="text"><![CDATA[看看面试题，只是为了查漏补缺，看看自己那些方面还不懂。切记不要以为背了面试题，就万事大吉了，最好是理解背后的原理，这样面试的时候才能侃侃而谈。不然，稍微有水平的面试官一看就能看出，是否有真才实学还是刚好背中了这道面试题（有空再把例子中代码补上）。一、 对于MVVM的理解？MVVM 是 Model-View-ViewModel 的缩写。Model 代表数据模型，也可以在Model中定义数据修改和操作的业务逻辑。View 代表UI 组件，它负责将数据模型转化成UI 展现出来。ViewModel 监听模型数据的改变和控制视图行为、处理用户交互，简单理解就是一个同步View 和 Model的对象，连接Model和View在MVVM架构下，View 和 Model 之间并没有直接的联系，而是通过ViewModel进行交互，Model 和 ViewModel 之间的交互是双向的， 因此View 数据的变化会同步到Model中，而Model 数据的变化也会立即反应到View 上。ViewModel 通过双向数据绑定把 View 层和 Model 层连接了起来，而View 和 Model 之间的同步工作完全是自动的，无需人为干涉，因此开发者只需关注业务逻辑，不需要手动操作DOM，不需要关注数据状态的同步问题，复杂的数据状态维护完全由 MVVM 来统一管理。二、 Vue的生命周期beforeCreate（创建前），在数据观测和初始化事件还未开始created（创建后），完成数据观测，属性和方法的运算，初始化事件， $el 属性还没有显示出来beforeMount（载入前），在挂载开始之前被调用，相关的render函数首次被调用。实例已完成以下的配置：编译模板，把data里面的数据和模板生成html。注意此时还没有挂载html到页面上。mounted（载入后），在el 被新创建的 vm.$el 替换，并挂载到实例上去之后调用。实例已完成以下的配置：用上面编译好的html内容替换el属性指向的DOM对象。完成模板中的html渲染到html页面中。此过程中进行ajax交互。beforeUpdate（更新前），在数据更新之前调用，发生在虚拟DOM重新渲染和打补丁之前。可以在该钩子中进一步地更改状态，不会触发附加的重渲染过程。updated（更新后），在由于数据更改导致的虚拟DOM重新渲染和打补丁之后调用。调用时，组件DOM已经更新，所以可以执行依赖于DOM的操作。然而在大多数情况下，应该避免在此期间更改状态，因为这可能会导致更新无限循环。该钩子在服务器端渲染期间不被调用。beforeDestroy（销毁前），在实例销毁之前调用。实例仍然完全可用。destroyed（销毁后），在实例销毁之后调用。调用后，所有的事件监听器会被移除，所有的子实例也会被销毁。该钩子在服务器端渲染期间不被调用。1、 什么是vue生命周期？答： Vue 实例从创建到销毁的过程，就是生命周期。从开始创建、初始化数据、编译模板、挂载Dom→渲染、更新→渲染、销毁等一系列过程，称之为 Vue 的生命周期。2、 vue生命周期的作用是什么？答：它的生命周期中有多个事件钩子，让我们在控制整个Vue实例的过程时更容易形成好的逻辑。3、 vue生命周期总共有几个阶段？答：它可以总共分为8个阶段：创建前/后、载入前/后、更新前/后、销毁前/销毁后。4、 第一次页面加载会触发哪几个钩子？答：会触发下面这几个beforeCreate、created、beforeMount、mounted 。5、 DOM 渲染在哪个周期中就已经完成？答：DOM 渲染在 mounted 中就已经完成了。三、 Vue实现数据双向绑定的原理：Object.defineProperty()vue实现数据双向绑定主要是：采用数据劫持结合发布者-订阅者模式的方式，通过 Object.defineProperty() 来劫持各个属性的setter，getter，在数据变动时发布消息给订阅者，触发相应监听回调。当把一个普通 Javascript 对象传给 Vue 实例来作为它的 data 选项时，Vue 将遍历它的属性，用 Object.defineProperty() 将它们转为 getter/setter。用户看不到 getter/setter，但是在内部它们让 Vue 追踪依赖，在属性被访问和修改时通知变化。vue的数据双向绑定 将MVVM作为数据绑定的入口，整合Observer，Compile和Watcher三者，通过Observer来监听自己的model的数据变化，通过Compile来解析编译模板指令（vue中是用来解析[[]] ），最终利用watcher搭起observer和Compile之间的通信桥梁，达到数据变化 —&gt;视图更新；视图交互变化（input）—&gt;数据model变更双向绑定效果。js实现简单的双向绑定：123456789101112131415161718192021&lt;body&gt; &lt;div id="app"&gt; &lt;input type="text" id="txt"&gt; &lt;p id="show"&gt;&lt;p&gt; &lt;/div&gt;&lt;/body&gt;&lt;script type="text/javascript"&gt; var obj = &#123;&#125; Object.defineProperty(obj, 'txt', &#123; get: function () &#123; return obj &#125;, set: function (newValue) &#123; document.getElementById('txt'.value = newValue document.getElementById('show').innerHTML = newValue &#125; &#125;) document.addEventListener('keyup', function (e) &#123; obj.txt = e.target.value &#125;)&lt;/script&gt;四、 Vue组件间的参数传递1、 父组件与子组件传值父组件传给子组件：子组件通过props方法接受数据；子组件传给父组件：$emit 方法传递参数2、 非父子组件间的数据传递，兄弟组件传值eventBus，就是创建一个事件中心，相当于中转站，可以用它来传递事件和接收事件。项目比较小时，用这个比较合适（虽然也有不少人推荐直接用VUEX，具体来说看需求咯。技术只是手段，目的达到才是王道）。五、 Vue的路由实现：hash模式 和 history模式hash模式：在浏览器中符号“#”，#以及#后面的字符称之为hash，用 window.location.hash 读取。特点：hash虽然在URL中，但不被包括在HTTP请求中；用来指导浏览器动作，对服务端安全无用，hash不会重加载页面。history模式：history采用HTML5的新特性；且提供了两个新方法： pushState()， replaceState()可以对浏览器历史记录栈进行修改，以及popState事件的监听到状态变更。六、 Vue与Angular以及React的区别？版本在不断更新，以下的区别有可能不是很正确。我工作中只用到vue，对angular和react不怎么熟。1、 与AngularJS的区别相同点：都支持指令：内置指令和自定义指令；都支持过滤器：内置过滤器和自定义过滤器；都支持双向数据绑定；都不支持低端浏览器。不同点：AngularJS的学习成本高，比如增加了Dependency Injection特性，而Vue.js本身提供的API都比较简单、直观；在性能上，AngularJS依赖对数据做脏检查，所以Watcher越多越慢；Vue.js使用基于依赖追踪的观察并且使用异步队列更新，所有的数据都是独立触发的。2、 与React的区别相同点：React采用特殊的JSX语法，Vue.js在组件开发中也推崇编写.vue特殊文件格式，对文件内容都有一些约定，两者都需要编译后使用；中心思想相同：一切都是组件，组件实例之间可以嵌套；都提供合理的钩子函数，可以让开发者定制化地去处理需求；都不内置列数AJAX，Route等功能到核心包，而是以插件的方式加载；在组件开发中都支持mixins的特性。不同点：React采用的Virtual DOM会对渲染出来的结果做脏检查；Vue.js在模板中提供了指令，过滤器等，可以非常方便，快捷地操作Virtual DOM。七、 vue路由的钩子函数首页可以控制导航跳转，beforeEach，afterEach等，一般用于页面title的修改。一些需要登录才能调整页面的重定向功能。beforeEach主要有3个参数to，from，next。to：route即将进入的目标路由对象。from：route当前导航正要离开的路由。next：function一定要调用该方法resolve这个钩子。执行效果依赖next方法的调用参数。可以控制网页的跳转。八、 vuex是什么？怎么使用？哪种功能场景使用它？只用来读取的状态集中放在store中； 改变状态的方式是提交mutations，这是个同步的事物； 异步逻辑应该封装在action中。在main.js引入store，注入。新建了一个目录store，… export 。场景有：单页应用中，组件之间的状态、音乐播放、登录状态、加入购物车state：Vuex 使用单一状态树,即每个应用将仅仅包含一个store 实例，但单一状态树和模块化并不冲突。存放的数据状态，不可以直接修改里面的数据。mutations：mutations定义的方法动态修改Vuex 的 store 中的状态或数据。getters：类似vue的计算属性，主要用来过滤一些数据。action：actions可以理解为通过将mutations里面处里数据的方法变成可异步的处理数据的方法，简单的说就是异步操作数据。view 层通过 store.dispath 来分发 action。12345678910111213141516const store = new Vuex.Store(&#123; //store实例 state: &#123; count: 0 &#125;, mutations:&#123; increment (state) &#123; state.count++ &#125; &#125;, actions: &#123; increment (context) &#123; context.commit('increment') &#125; &#125;&#125;)modules：项目特别复杂的时候，可以让每一个模块拥有自己的state、mutation、action、getters，使得结构非常清晰，方便管理。1234567891011121314151617const moduleA = &#123; state: &#123; ... &#125;, mutations: &#123; ... &#125;, actions: &#123; ... &#125;, getters: &#123; ... &#125;&#125;const moduleB = &#123; state: &#123; ... &#125;, mutations: &#123; ... &#125;, actions: &#123; ... &#125;&#125;const store = new Vuex.Store(&#123; modules:&#123; a: moduleA, b: moduleB&#125;)九、其它小知识点1、 css只在当前组件起作用答：在style标签中写入scoped即可 例如： &lt;stylescoped&gt;&lt;/style&gt;2、 v-if 和 v-show 区别答：v-if按照条件是否渲染，v-show是display的block或none；3、 $route和$router的区别答：$route是“路由信息对象”，包括path，params，hash，query，fullPath，matched，name等路由信息参数。而$router是“路由实例”对象包括了路由的跳转方法，钩子函数等。PS：缺少的案例代码，这几天再补上去。有些地方可能描述的不够清楚，如果有歧义，可能是我理解错了。]]></content>
      <categories>
        <category>Vue</category>
        <category>面试</category>
      </categories>
      <tags>
        <tag>Vue</tag>
        <tag>面试</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[GET和POST的区别]]></title>
    <url>%2F2019%2F02%2F01%2FGET%E5%92%8CPOST%E7%9A%84%E5%8C%BA%E5%88%AB%2F</url>
    <content type="text"><![CDATA[都9102年了，还问GET和POST的区别?1. 前言最近看了一些同学的面经，发现无论什么技术岗位，还是会问到 get 和 post 的区别，而搜索出来的答案并不能让我们装得一手好逼，那就让我们从 HTTP 报文的角度来撸一波，从而搞明白他们的区别。2. 标准答案在开撸之前吗，让我们先看一下标准答案长什么样子 w3school: GET 对比 POST。标准答案很美好，但是在面试的时候把下面的表格甩面试官一脸，估计会装逼不成反被*。注意，并不是说标准答案有误，上述区别在大部分浏览器上是存在的，因为这些浏览器实现了 HTTP 标准。但是，前面列举的只是浏览器实现上的区别，而不是 get 和 post 的本质区别。3. GET 和 POST 报文上的区别先下结论，GET 和 POST 方法没有实质区别，只是报文格式不同。GET 和 POST 只是 HTTP 协议中两种请求方式，而 HTTP 协议是基于 TCP/IP 的应用层协议，无论 GET 还是 POST，用的都是同一个传输层协议，所以在传输上，没有区别。报文格式上，不带参数时，最大区别就是第一行方法名不同POST方法请求报文第一行是这样的 POST /uri HTTP/1.1 \r\nGET方法请求报文第一行是这样的 GET /uri HTTP/1.1 \r\n是的，不带参数时他们的区别就仅仅是报文的前几个字符不同而已带参数时报文的区别呢？ 在约定中，GET 方法的参数应该放在 url 中，POST 方法参数应该放在 body 中举个例子，如果参数是 name=chengqm, age=22。GET 方法简约版报文是这样的:12GET /index.php?name=qiming.c&amp;age=22 HTTP/1.1Host: localhostPOST 方法简约版报文是这样的:1234POST /index.php HTTP/1.1Host: localhostContent-Type: application/x-www-form-urlencodedname=qiming.c&amp;age=22现在我们知道了两种方法本质上是 TCP 连接，没有差别，也就是说，如果我不按规范来也是可以的。我们可以在 URL 上写参数，然后方法使用 POST；也可以在 Body 写参数，然后方法使用 GET。当然，这需要服务端支持。4. 常见问题GET 方法参数写法是固定的吗？在约定中，我们的参数是写在 ? 后面，用 &amp; 分割。我们知道，解析报文的过程是通过获取 TCP 数据，用正则等工具从数据中获取 Header 和 Body，从而提取参数。也就是说，我们可以自己约定参数的写法，只要服务端能够解释出来就行，一种比较流行的写法是 http://www.example.com/user/name/chengqm/age/22。POST 方法比 GET 方法安全？按照网上大部分文章的解释，POST 比 GET 安全，因为数据在地址栏上不可见。然而，从传输的角度来说，他们都是不安全的，因为 HTTP 在网络上是明文传输的，只要在网络节点上捉包，就能完整地获取数据报文。要想安全传输，就只有加密，也就是 HTTPS。GET 方法的长度限制是怎么回事？在网上看到很多关于两者区别的文章都有这一条，提到浏览器地址栏输入的参数是有限的。首先说明一点，HTTP 协议没有 Body 和 URL 的长度限制，对 URL 限制的大多是浏览器和服务器的原因。浏览器原因就不说了，服务器是因为处理长 URL 要消耗比较多的资源，为了性能和安全（防止恶意构造长 URL 来攻击）考虑，会给 URL 长度加限制。POST 方法会产生两个TCP数据包？有些文章中提到，post 会将 header 和 body 分开发送，先发送 header，服务端返回 100 状态码再发送 body。HTTP 协议中没有明确说明 POST 会产生两个 TCP 数据包，而且实际测试(Chrome)发现，header 和 body 不会分开发送。所以，header 和 body 分开发送是部分浏览器或框架的请求方法，不属于 post 必然行为。5. talk is cheap show me the code如果对 get 和 post 报文区别有疑惑，直接起一个 Socket 服务端，然后封装简单的 HTTP 处理方法，直接观察和处理 HTTP 报文，就能一目了然123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263#!/usr/bin/env python# -*- coding: utf-8 -*-import socketHOST, PORT = '', 23333def server_run():listen_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)listen_socket.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)listen_socket.bind((HOST, PORT))listen_socket.listen(1) print('Serving HTTP on port %s ...' %PORT)while True: # 接受连接 client_connection, client_address = listen_socket.accept() handle_request(client_connection)def handle_request(client_connection): # 获取请求报文 request = '' while True: recv_data = client_connection.recv(2400) recv_data = recv_data.decode() request += recv_data if len(recv_data) &lt; 2400: break # 解析首行 first_line_array = request.split('\r\n')[0].split(' ') # 分离 header 和 body space_line_index = request.index('\r\n\r\n') header = request[0: space_line_index] body = request[space_line_index + 4:] # 打印请求报文 print(request)# 返回报文 http_response = b"""\HTTP/1.1 200 OK&lt;!DOCTYPE html&gt;&lt;html&gt;&lt;head&gt; &lt;title&gt;Hello, World!&lt;/title&gt;&lt;/head&gt;&lt;body&gt; &lt;p style="color: green"&gt;Hello, World!&lt;/p&gt;&lt;/body&gt;&lt;/html&gt;""" client_connection.sendall(http_response) client_connection.close()if __name__ == '__main__': server_run()上面代码就是简单的打印请求报文然后返回 HelloWorld 的 html 页面，我们运行起来12[root@chengqm shell]# python httpserver.py Serving HTTP on port 23333 ...然后从浏览器中请求看看打印出来的报文然后就可以手动证明上述说法，比如说要测试 header 和 body 是否分开传输，由于代码没有返回 100 状态码，如果我们 post 请求成功就说明是一起传输的(Chrome/postman)。又比如 w3school 里面说 URL 的最大长度是 2048 个字符，那我们在代码里面加上一句计算 uri 长度的代码12345...# 解析首行first_line_array = request.split('\r\n')[0].split(' ')print('uri长度: %s' % len(first_line_array[1]))...我们用 postman 直接发送超过 2048 个字符的请求看看然后我们可以得出结论，url 长度限制是某些浏览器和服务器的限制，和 HTTP 协议没有关系。到此，我们可以愉快地装逼了 :)END]]></content>
      <categories>
        <category>Get</category>
        <category>Post</category>
      </categories>
      <tags>
        <tag>Get</tag>
        <tag>Post</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[九种跨域方式实现原理]]></title>
    <url>%2F2019%2F01%2F30%2F%E4%B9%9D%E7%A7%8D%E8%B7%A8%E5%9F%9F%E6%96%B9%E5%BC%8F%E5%AE%9E%E7%8E%B0%E5%8E%9F%E7%90%86%2F</url>
    <content type="text"><![CDATA[前 言前后端数据交互经常会碰到请求跨域，什么是跨域，以及有哪几种跨域方式，这是本文要探讨的内容。本文完整的源代码请猛戳github 博客一、什么是跨域？1. 什么是同源策略及其限制内容？同源策略是一种约定，它是浏览器最核心也最基本的安全功能，如果缺少了同源策略，浏览器很容易受到 XSS、CSFR 等攻击。所谓同源是指”协议+域名+端口”三者相同，即便两个不同的域名指向同一个 ip 地址，也非同源。同源策略限制内容有：Cookie、LocalStorage、IndexedDB 等存储性内容DOM 节点AJAX 请求发送后，结果被浏览器拦截了但是有三个标签是允许跨域加载资源：123&lt;img src=XXX&gt;&lt;link href=XXX&gt;&lt;script src=XXX&gt;2.常见跨域场景当协议、子域名、主域名、端口号中任意一个不相同时，都算作不同域。不同域之间相互请求资源，就算作“跨域”。常见跨域场景如下图所示：特别说明两点：第一：如果是协议和端口造成的跨域问题“前台”是无能为力的。第二：在跨域问题上，仅仅是通过“URL 的首部”来识别而不会根据域名对应的 IP 地址是否相同来判断。“URL 的首部”可以理解为“协议, 域名和端口必须匹配”。这里你或许有个疑问：请求跨域了，那么请求到底发出去没有？跨域并不是请求发不出去，请求能发出去，服务端能收到请求并正常返回结果，只是结果被浏览器拦截了。你可能会疑问明明通过表单的方式可以发起跨域请求，为什么 Ajax 就不会?因为归根结底，跨域是为了阻止用户读取到另一个域名下的内容，Ajax 可以获取响应，浏览器认为这不安全，所以拦截了响应。但是表单并不会获取新的内容，所以可以发起跨域请求。同时也说明了跨域并不能完全阻止 CSRF，因为请求毕竟是发出去了。二、跨域解决方案1.jsonp1) JSONP 原理利用 script 标签没有跨域限制的漏洞，网页可以得到从其他来源动态产生的 JSON 数据。JSONP 请求一定需要对方的服务器做支持才可以。2) JSONP 和 AJAX 对比JSONP 和 AJAX 相同，都是客户端向服务器端发送请求，从服务器端获取数据的方式。但 AJAX 属于同源策略，JSONP 属于非同源策略（跨域请求）3) JSONP 优缺点JSONP 优点是简单兼容性好，可用于解决主流浏览器的跨域数据访问的问题。缺点是仅支持 get 方法具有局限性,不安全可能会遭受 XSS 攻击。4) JSONP 的实现流程声明一个回调函数，其函数名(如 show)当做参数值，要传递给跨域请求数据的服务器，函数形参为要获取目标数据(服务器返回的 data)。创建一个script标签，把那个跨域的 API 数据接口地址，赋值给 script 的 src,还要在这个地址中向服务器传递该函数名（可以通过问号传参:?callback=show）。服务器接收到请求后，需要进行特殊的处理：把传递进来的函数名和它需要给你的数据拼接成一个字符串,例如：传递进去的函数名是 show，它准备好的数据是show(‘我不爱你’)。最后服务器把准备的数据通过 HTTP 协议返回给客户端，客户端再调用执行之前声明的回调函数（show），对返回的数据进行操作。在开发中可能会遇到多个 JSONP 请求的回调函数名是相同的，这时候就需要自己封装一个 JSONP 函数。123456789101112131415161718192021222324// index.htmlfunction jsonp(&#123; url, params, callback &#125;) &#123; return new Promise((resolve, reject) =&#123; let script = document.createElement('script') window[callback] = function(data) &#123; resolve(data) document.body.removeChild(script) &#125; params = &#123; ...params, callback &#125; // wd=b&amp;callback=show let arrs = [] for (let key in params) &#123; arrs.push(`$&#123;key&#125;=$&#123;params[key]&#125;`) &#125; script.src = `$&#123;url&#125;?$&#123;arrs.join('&amp;')&#125;` document.body.appendChild(script) &#125;)&#125;jsonp(&#123; url: 'http://localhost:3000/say', params: &#123; wd: 'Iloveyou' &#125;, callback: 'show'&#125;).then(data =&#123; console.log(data)&#125;)上面这段代码相当于向http://localhost:3000/say?wd=Iloveyou&amp;callback=show这个地址请求数据，然后后台返回show(&#39;我不爱你&#39;)，最后会运行 show()这个函数，打印出’我不爱你’12345678910 // server.jslet express = require('express')let app = express()app.get('/say', function(req, res) &#123; let &#123; wd, callback &#125; = req.query console.log(wd) // Iloveyou console.log(callback) // show res.end(`$&#123;callback&#125;('我不爱你')`)&#125;)app.listen(3000)5) jQuery 的 jsonp 形式JSONP 都是 GET 和异步请求的，不存在其他的请求方式和同步请求，且 jQuery 默认就会给 JSONP 的请求清除缓存。12345678910 $.ajax(&#123; url:"http://crossdomain.com/jsonServerResponse", dataType:"jsonp", type:"get",//可以省略 jsonpCallback:"show",//-&gt;自定义传递给服务器的函数名，而不是使用jQuery自动生成的，可省略 jsonp:"callback",//-&gt;把传递函数名的那个形参callback，可省略 success:function (data)&#123; console.log(data); &#125;&#125;);2.corsCORS 需要浏览器和后端同时支持。IE 8 和 9 需要通过 XDomainRequest 来实现。浏览器会自动进行 CORS 通信，实现 CORS 通信的关键是后端。只要后端实现了 CORS，就实现了跨域。服务端设置 Access-Control-Allow-Origin 就可以开启 CORS。 该属性表示哪些域名可以访问资源，如果设置通配符则表示所有网站都可以访问资源。虽然设置 CORS 和前端没什么关系，但是通过这种方式解决跨域问题的话，会在发送请求时出现两种情况，分别为简单请求和复杂请求。1) 简单请求只要同时满足以下两大条件，就属于简单请求条件 1：使用下列方法之一：GETHEADPOST条件 2：Content-Type 的值仅限于下列三者之一：text/plainmultipart/form-dataapplication/x-www-form-urlencoded请求中的任意 XMLHttpRequestUpload 对象均没有注册任何事件监听器； XMLHttpRequestUpload 对象可以使用 XMLHttpRequest.upload 属性访问。2) 复杂请求不符合以上条件的请求就肯定是复杂请求了。复杂请求的 CORS 请求，会在正式通信之前，增加一次 HTTP 查询请求，称为”预检”请求,该请求是 option 方法的，通过该请求来知道服务端是否允许跨域请求。我们用PUT向后台请求时，属于复杂请求，后台需做如下配置：12345678910111213 // 允许哪个方法访问我res.setHeader('Access-Control-Allow-Methods', 'PUT')// 预检的存活时间res.setHeader('Access-Control-Max-Age', 6)// OPTIONS请求不做任何处理if (req.method === 'OPTIONS') &#123; res.end()&#125;// 定义后台返回的内容app.put('/getData', function(req, res) &#123; console.log(req.headers) res.end('我不爱你')&#125;)接下来我们看下一个完整复杂请求的例子，并且介绍下 CORS 请求相关的字段123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657// index.htmllet xhr = new XMLHttpRequest()document.cookie = 'name=xiamen' // cookie不能跨域xhr.withCredentials = true // 前端设置是否带cookiexhr.open('PUT', 'http://localhost:4000/getData', true)xhr.setRequestHeader('name', 'xiamen')xhr.onreadystatechange = function() &#123; if (xhr.readyState === 4) &#123; if ((xhr.status &gt;= 200 &amp;&amp; xhr.status &lt; 300) || xhr.status === 304) &#123; console.log(xhr.response) //得到响应头，后台需设置Access-Control-Expose-Headers console.log(xhr.getResponseHeader('name')) &#125; &#125;&#125;xhr.send()//server1.jslet express = require('express');let app = express();app.use(express.static(__dirname));app.listen(3000);//server2.jslet express = require('express')let app = express()let whitList = ['http://localhost:3000'] //设置白名单app.use(function(req, res, next) &#123; let origin = req.headers.origin if (whitList.includes(origin)) &#123; // 设置哪个源可以访问我 res.setHeader('Access-Control-Allow-Origin', origin) // 允许携带哪个头访问我 res.setHeader('Access-Control-Allow-Headers', 'name') // 允许哪个方法访问我 res.setHeader('Access-Control-Allow-Methods', 'PUT') // 允许携带cookie res.setHeader('Access-Control-Allow-Credentials', true) // 预检的存活时间 res.setHeader('Access-Control-Max-Age', 6) // 允许返回的头 res.setHeader('Access-Control-Expose-Headers', 'name') if (req.method === 'OPTIONS') &#123; res.end() // OPTIONS请求不做任何处理 &#125; &#125; next()&#125;)app.put('/getData', function(req, res) &#123; console.log(req.headers) res.setHeader('name', 'jw') //返回一个响应头，后台需设置 res.end('我不爱你')&#125;)app.get('/getData', function(req, res) &#123; console.log(req.headers) res.end('我不爱你')&#125;)app.use(express.static(__dirname))app.listen(4000)上述代码由http://localhost:3000/index.html向http://localhost:4000/跨域请求，正如我们上面所说的，后端是实现 CORS 通信的关键。3.postMessagepostMessage 是 HTML5 XMLHttpRequest Level 2 中的 API，且是为数不多可以跨域操作的 window 属性之一，它可用于解决以下方面的问题：页面和其打开的新窗口的数据传递多窗口之间消息传递页面与嵌套的 iframe 消息传递上面三个场景的跨域数据传递postMessage()方法允许来自不同源的脚本采用异步方式进行有限的通信，可以实现跨文本档、多窗口、跨域消息传递。otherWindow.postMessage(message, targetOrigin, [transfer]);message: 将要发送到其他 window 的数据。targetOrigin:通过窗口的 origin 属性来指定哪些窗口能接收到消息事件，其值可以是字符串”*”（表示无限制）或者一个 URI。在发送消息的时候，如果目标窗口的协议、主机地址或端口这三者的任意一项不匹配 targetOrigin 提供的值，那么消息就不会被发送；只有三者完全匹配，消息才会被发送。transfer(可选)：是一串和 message 同时传递的 Transferable 对象. 这些对象的所有权将被转移给消息的接收方，而发送一方将不再保有所有权。接下来我们看个例子： http://localhost:3000/a.html页面向http://localhost:4000/b.html传递“我爱你”,然后后者传回”我不爱你”。123456789101112// a.html&lt;iframe src="http://localhost:4000/b.html" frameborder="0" id="frame" onload="load()"&gt;&lt;/iframe//等它加载完触发一个事件//内嵌在http://localhost:3000/a.html&lt;script&gt; function load() &#123; let frame = document.getElementById('frame') frame.contentWindow.postMessage('我爱你', 'http://localhost:4000') //发送数据 window.onmessage = function(e) &#123; //接受返回数据 console.log(e.data) //我不爱你 &#125;&#125;&lt;/script&gt;12345// b.html window.onmessage = function(e) &#123; console.log(e.data) //我爱你 e.source.postMessage('我不爱你', e.origin) &#125;4.websocketWebsocket 是 HTML5 的一个持久化的协议，它实现了浏览器与服务器的全双工通信，同时也是跨域的一种解决方案。WebSocket 和 HTTP 都是应用层协议，都基于 TCP 协议。但是 WebSocket 是一种双向通信协议，在建立连接之后，WebSocket 的 server 与 client 都能主动向对方发送或接收数据。同时，WebSocket 在建立连接时需要借助 HTTP 协议，连接建立好了之后 client 与 server 之间的双向通信就与 HTTP 无关了。原生 WebSocket API 使用起来不太方便，我们使用Socket.io，它很好地封装了 webSocket 接口，提供了更简单、灵活的接口，也对不支持 webSocket 的浏览器提供了向下兼容。我们先来看个例子：本地文件 socket.html 向localhost:3000发生数据和接受数据123456789101112131415161718192021// socket.html&lt;script&gt; let socket = new WebSocket('ws://localhost:3000'); socket.onopen = function () &#123; socket.send('我爱你');//向服务器发送数据 &#125; socket.onmessage = function (e) &#123; console.log(e.data);//接收服务器返回的数据 &#125;&lt;/script&gt;// server.jslet express = require('express');let app = express();let WebSocket = require('ws');//记得安装wslet wss = new WebSocket.Server(&#123;port:3000&#125;);wss.on('connection',function(ws) &#123; ws.on('message', function (data) &#123; console.log(data); ws.send('我不爱你') &#125;);&#125;)5. Node 中间件代理(两次跨域)实现原理：同源策略是浏览器需要遵循的标准，而如果是服务器向服务器请求就无需遵循同源策略。代理服务器，需要做以下几个步骤：接受客户端请求 。将请求 转发给服务器。拿到服务器 响应 数据。将 响应 转发给客户端。我们先来看个例子：本地文件 index.html 文件，通过代理服务器http://localhost:3000向目标服务器http://localhost:4000请求数据。1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465// index.html(http://127.0.0.1:5500) &lt;script src="https://cdn.bootcss.com/jquery/3.3.1/jquery.min.js"&gt;&lt;/script&gt; &lt;script&gt; $.ajax(&#123; url: 'http://localhost:3000', type: 'post', data: &#123; name: 'xiamen', password: '123456' &#125;, contentType: 'application/json;charset=utf-8', success: function(result) &#123; console.log(result) // &#123;"title":"fontend","password":"123456"&#125; &#125;, error: function(msg) &#123; console.log(msg) &#125; &#125;) &lt;/script&gt;// server1.js 代理服务器(http://localhost:3000)const http = require('http')// 第一步：接受客户端请求const server = http.createServer((request, response) =&#123; // 代理服务器，直接和浏览器直接交互，需要设置CORS 的首部字段 response.writeHead(200, &#123; 'Access-Control-Allow-Origin': '*', 'Access-Control-Allow-Methods': '*', 'Access-Control-Allow-Headers': 'Content-Type' &#125;) // 第二步：将请求转发给服务器 const proxyRequest = http .request( &#123; host: '127.0.0.1', port: 4000, url: '/', method: request.method, headers: request.headers &#125;, serverResponse =&#123; // 第三步：收到服务器的响应 var body = '' serverResponse.on('data', chunk =&#123; body += chunk &#125;) serverResponse.on('end', () =&#123; console.log('The data is ' + body) // 第四步：将响应结果转发给浏览器 response.end(body) &#125;) &#125; ) .end()&#125;)server.listen(3000, () =&#123; console.log('The proxyServer is running at http://localhost:3000')&#125;)// server2.js(http://localhost:4000)const http = require('http')const data = &#123; title: 'fontend', password: '123456' &#125;const server = http.createServer((request, response) =&#123; if (request.url === '/') &#123; response.end(JSON.stringify(data)) &#125;&#125;)server.listen(4000, () =&#123; console.log('The server is running at http://localhost:4000')&#125;)上述代码经过两次跨域，值得注意的是浏览器向代理服务器发送请求，也遵循同源策略，最后在 index.html 文件打印出{&quot;title&quot;:&quot;fontend&quot;,&quot;password&quot;:&quot;123456&quot;}6.nginx 反向代理实现原理类似于 Node 中间件代理，需要你搭建一个中转 nginx 服务器，用于转发请求。使用 nginx 反向代理实现跨域，是最简单的跨域方式。只需要修改 nginx 的配置即可解决跨域问题，支持所有浏览器，支持 session，不需要修改任何代码，并且不会影响服务器性能。实现思路：通过 nginx 配置一个代理服务器（域名与 domain1 相同，端口不同）做跳板机，反向代理访问 domain2 接口，并且可以顺便修改 cookie 中 domain 信息，方便当前域 cookie 写入，实现跨域登录。先下载nginx，然后将 nginx 目录下的 nginx.conf 修改如下:1234567891011121314// proxy服务器server &#123; listen 80; server_name www.domain1.com; location / &#123; proxy_pass http://www.domain2.com:8080; #反向代理 proxy_cookie_domain www.domain2.com www.domain1.com; #修改cookie里域名 index index.html index.htm; # 当用webpack-dev-server等中间件代理接口访问nignx时，此时无浏览器参与，故没有同源限制，下面的跨域配置可不启用 add_header Access-Control-Allow-Origin http://www.domain1.com; #当前端只跨域不带cookie时，可为* add_header Access-Control-Allow-Credentials true; &#125;&#125;最后通过命令行nginx -s reload启动 nginx12345678910111213141516171819202122// index.htmlvar xhr = new XMLHttpRequest();// 前端开关：浏览器是否读写cookiexhr.withCredentials = true;// 访问nginx中的代理服务器xhr.open('get', 'http://www.domain1.com:81/?user=admin', true);xhr.send();// server.jsvar http = require('http');var server = http.createServer();var qs = require('querystring');server.on('request', function(req, res) &#123; var params = qs.parse(req.url.substring(2)); // 向前台写cookie res.writeHead(200, &#123; 'Set-Cookie': 'l=a123456;Path=/;Domain=www.domain2.com;HttpOnly' // HttpOnly:脚本无法读取 &#125;); res.write(JSON.stringify(params)); res.end();&#125;);server.listen('8080');console.log('Server is running at port 8080...');7.window.name + iframewindow.name 属性的独特之处：name 值在不同的页面（甚至不同域名）加载后依旧存在，并且可以支持非常长的 name 值（2MB）。其中 a.html 和 b.html 是同域的，都是http://localhost:3000;而 c.html 是http://localhost:40001234567891011121314151617// a.html(http://localhost:3000/b.html)&lt;iframe src="http://localhost:4000/c.html" frameborder="0" onload="load()" id="iframe"&gt;&lt;/iframe&gt;&lt;script&gt; let first = true // onload事件会触发2次，第1次加载跨域页，并留存数据于window.name function load() &#123; if(first)&#123; // 第1次onload(跨域页)成功后，切换到同域代理页面 let iframe = document.getElementById('iframe'); iframe.src = 'http://localhost:3000/b.html'; first = false; &#125;else&#123; // 第2次onload(同域b.html页)成功后，读取同域window.name中数据 console.log(iframe.contentWindow.name); &#125; &#125;&lt;/script&gt;b.html 为中间代理页，与 a.html 同域，内容为空。1234// c.html(http://localhost:4000/c.html) &lt;script&gt; window.name = '我不爱你' &lt;/script&gt;总结：通过 iframe 的 src 属性由外域转向本地域，跨域数据即由 iframe 的 window.name 从外域传递到本地域。这个就巧妙地绕过了浏览器的跨域访问限制，但同时它又是安全操作。8.location.hash + iframe实现原理： a.html 欲与 c.html 跨域相互通信，通过中间页 b.html 来实现。 三个页面，不同域之间利用 iframe 的 location.hash 传值，相同域之间直接 js 访问来通信。具体实现步骤：一开始 a.html 给 c.html 传一个 hash 值，然后 c.html 收到 hash 值后，再把 hash 值传递给 b.html，最后 b.html 将结果放到 a.html 的 hash 值中。同样的，a.html 和 b.html 是同域的，都是http://localhost:3000;而 c.html 是http://localhost:40001234567891011121314151617// a.html &lt;iframe src="http://localhost:4000/c.html#iloveyou"&gt;&lt;/iframe&gt; &lt;script&gt; window.onhashchange = function () &#123; //检测hash的变化 console.log(location.hash); &#125; &lt;/script&gt;// b.html &lt;script&gt; window.parent.parent.location.hash = location.hash //b.html将结果放到a.html的hash值中，b.html可通过parent.parent访问a.html页面 &lt;/script&gt;// c.htmlconsole.log(location.hash); let iframe = document.createElement('iframe'); iframe.src = 'http://localhost:3000/b.html#idontloveyou'; document.body.appendChild(iframe);9.document.domain + iframe该方式只能用于二级域名相同的情况下，比如 a.test.com 和 b.test.com 适用于该方式。只需要给页面添加 document.domain =&#39;test.com&#39; 表示二级域名都相同就可以实现跨域。实现原理：两个页面都通过 js 强制设置 document.domain 为基础主域，就实现了同域。我们看个例子：页面a.zf1.cn:3000/a.html获取页面b.zf1.cn:3000/b.html中 a 的值12345678910111213141516171819// a.html&lt;body&gt; helloa &lt;iframe src="http://b.zf1.cn:3000/b.html" frameborder="0" onload="load()" id="frame"&gt;&lt;/iframe&gt; &lt;script&gt; document.domain = 'zf1.cn' function load() &#123; console.log(frame.contentWindow.a); &#125; &lt;/script&gt;&lt;/body&gt;// b.html&lt;body&gt; hellob &lt;script&gt; document.domain = 'zf1.cn' var a = 100; &lt;/script&gt;&lt;/body&gt;三、总 结CORS 支持所有类型的 HTTP 请求，是跨域 HTTP 请求的根本解决方案JSONP 只支持 GET 请求，JSONP 的优势在于支持老式浏览器，以及可以向不支持 CORS 的网站请求数据。不管是 Node 中间件代理还是 nginx 反向代理，主要是通过同源策略对服务器不加限制。日常工作中，用得比较多的跨域方案是 cors 和 nginx 反向代理参考文章跨域资源共享 CORS 详解前端面试之道window.postMessage前端常见跨域解决方案（全）深入跨域问题(4) - 利用代理解决跨域]]></content>
      <categories>
        <category>跨域</category>
        <category>Javascript</category>
      </categories>
      <tags>
        <tag>Javascript</tag>
        <tag>跨域</tag>
        <tag>jsonp</tag>
        <tag>cors</tag>
        <tag>postMessage</tag>
        <tag>websocket</tag>
        <tag>Node中间件代理</tag>
        <tag>nginx反向代理</tag>
        <tag>window.name + iframe</tag>
        <tag>location.hash + iframe</tag>
        <tag>document.domain + iframe</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[JS数字和字符串之间相互转化的纠纷]]></title>
    <url>%2F2019%2F01%2F23%2F5%2F</url>
    <content type="text"><![CDATA[JS数字和字符串之间相互转化的纠纷一、字符串转数字1. parseInt() 函数parseInt() 函数从string的开始解析，返回一个整数parseInt(‘123’) : 返回 123；parseInt(‘1234xxx’) : 返回 1234；parseInt(‘123.456’) : 返回 123；parseInt(‘1 2 3’) : 返回 1；字符串的情况，自会返回第一个数parseInt(‘bb cc 12’) : 返回 NaN；字符串第一个不是数，返回nanparseInt(‘123’ 321) : 返回 321；parseInt(“AF”, 16); 返回 175；会自动把二进制十六进制八进制的转化成数字如果解析不到数字，则将返回一个NaN的值，可以用isNaN()函数来检测；parseFloat()只会返回小数2. 字符前加“+”var n =+”123”:返回 1233. 字符加“*”var n =”123”*1:返回 1234. 字符串数组分割增加var arr = str.split(“,”) 一个字符串组，用，都分割成多个b = a.join(“-“);-是指定的分割符，可以随意，将数组转化成一个字符串5. 字符串和数字相加返回字符串console.log(12+”12”):返回”1212”console.log(‘12’ + ‘34’)返回’1234’console.log(‘12’ + 34 ) 返回’1234’console.log(12 + ‘34’’）返回1234’console.log(12 + 34 ) 返回466. 当字符串和多个数字相加，用括号扩起来(&quot;&lt;img src=&#39;images/&quot; + 2 + 1 + &quot;.jpg&#39;&gt;&quot;) 返回(&quot;&lt;img src=&#39;images/&quot; + 21 + &quot;.jpg&#39;&gt;&quot;)如果想转成3(&quot;&lt;img src=&#39;images/&quot; + （2+1）+ &quot;.jpg&#39;&gt;&quot;) 返回(&quot;&lt;img src=&#39;images/&quot; + 3 + &quot;.jpg&#39;&gt;&quot;)如果前面是数字相加，则可以先把数字加起来var a = 10 + 20 + ‘abc’ + ‘cd’; 返回a的值为:30abccd7. eval（）如果想进行字符串的运算eval(“x=10;y=20;document.write(x*y)”) 返回200document.write(eval(“2+2”)) 返回4var x=10document.write(eval(x+17） 返回27二、数字转字符串1. tostring（）n = 100x = n.toString() =&gt; “100”或是（100）toString() //tostring（2/16/8）还可以实现进制的转化2. 数字+任意字符串“”var n = 1234;var nn = 1234+””关于字符串判断字符串是否包含 包含返回下标 不包含返回-1var i = str.indexOf(“x”)最后一次下标的字符串的字符串var i = str .lastIndexOf(“”)转化大小写str.toUpperCase() 转大写str.tolowerCase() 转小写截取字符串 字符串.substr（”从哪开始”,”截取几个”）str.substr(0,5)]]></content>
      <categories>
        <category>Javascript</category>
      </categories>
      <tags>
        <tag>Javascript</tag>
        <tag>字符串</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Hexo文章简单加密访问]]></title>
    <url>%2F2019%2F01%2F21%2F0%2F</url>
    <content type="text"><![CDATA[即使是最简单的密码功能也足以阻止90%的访问者.一、前言一开始使用Hexo的时候，是喜欢它的简单：因为可以直接编译成纯静态文件，方便部署。可是在使用过程中，又发现诸多不便：也因为它全是纯静态页面。突发奇想，能不能给文章加上一个加密访问的功能……在经过实践之后，运用到自己博客中，发现有不少的访客对这个功能甚是感兴趣，所以也就在这里找个时间写写自己加密的小诀窍吧算是。二、原理由于 Hexo 最终编译出来的文件是纯静态的，也就意味着文章的所有信息其实还是原封不动展示在页面中的，当你输入一篇文章的网址，所有的内容就已经跟随网络传输过来了。那我博客使用的加密是怎么实现的呢？这就要讲到 js 的阻塞机制了，在以往的经验中，当页面中有调用alert();函数的时候，整个页面会停止运行，直到你点击确定之后，页面的中的代码才会继续执行下去。我们这里需要的也是这样一个假象，阻止整个页面的渲染，直到你输入了正确的密码才能让页面继续渲染实际的文章。可是alert只有提醒的功能，没有输入的功能，所以这里要用到的是promt函数。例子参见如下：12var password = promt('请输入文章密码');alert(password);三、实现究竟要把上述代码加在哪里呢？找到themes-&gt;next-&gt;layout-&gt;_partials-&gt;head.swig文件。按道理是添加在任何地方都行，但是推荐加在所有的&lt;meta&gt;标签之后，个人建议，仅做参考。以下是我加的代码：12345678910&lt;script&gt; (function()&#123; if('&#123;&#123; page.password &#125;&#125;')&#123; if (prompt('请输入文章密码','') !== '&#123;&#123; page.password &#125;&#125;')&#123; alert('密码错误！'); history.back(); &#125; &#125; &#125;)();&lt;/script&gt;之后，在你想要加密的文章的头文件里添加上password: 123456（ps：123456是你想设置的密码）即可。注意，这里仅针对Hexo平台的next主题。但是，它的代码和思想是通用的，你在Hexo的其他主题，甚至是Jekyll的主题里也是可以做到的，只是要摆放的位置会不一样。如果你好奇page.password是什么东西，那么恭喜你，你对 Hexo 的结构还是很熟悉的。page这个变量就是你在hexo new的时候生成文件中最顶部的东西，以下我给出这篇文章的头部参考：12345678910---title: Hexo文章简单加密访问date: 2019-01-21 16:09:45tags: - 加密 - Hexocategories: - Hexopassword: 123456---这样我们就好像使用静态页面完成了部分只有动态页面能完成的东西。四、总结本来只是简单的纯静态页面，但是经历不断的更新和改进，便有了静态页面统计访问量的工具；有了静态页面添加评论的工具；甚至有了静态页面进行搜索的功能等等。个人想出来的静态页面加密功能根本算不上技术上的创新，只能说是一点小技巧的应用吧，小技巧也能迷惑住大家的眼睛，也算是喜事一件。五、后记已将博客加密功能改成使用 hexo-blog-encrypt 插件加密，最新密码功能查看效果，具体请参见我的博客文档附上传送门：https://chen-95.gitee.io/2019/01/25/4/]]></content>
      <categories>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>加密</tag>
        <tag>Hexo</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[野狗云帐号分享]]></title>
    <url>%2F2019%2F01%2F21%2F%E9%87%8E%E7%8B%97%E4%BA%91%E5%B8%90%E5%8F%B7%E5%88%86%E4%BA%AB%2F</url>
    <content type="text"><![CDATA[请输入密码获取野狗云帐号... Incorrect Password! No content to display! U2FsdGVkX1+wj/0gmDBOwrqkORA4BKtw+GnvO7Wn+WAN3Lg8Crzy+z94+ZijDjDB4nh4y5taOk4xSWM807siZd/6s1TAjzFsNVf2yIepMogC2rPbIgyGtzj+9eWtJLzPyKU6G11SOJE0+19D1F+i9Kfnrav563HPxDdFQdN25MxpEmX6R8yMxZ0WaFwF7j5svCi/cayB9oSkzEGPLOs0ItzrMrxYa9PX721tinjaQUqFLW62Pn/NqeZ0YOLOw7/8gTDFhYnWYv/iTP5ZDpk3mOhQI0AL7yD5mPasKgfX/KTAFKZmnLafuLg9kafQKYp9Stjsb0KGu5nZLxH8xAHZgWHZERi36PwR+9hiK/6hDbVtNbFgLFeIbnkJ6uH/oy0I6NCdjm/UlETJyUvjSQk0SA8fxOQq4QW94b93kMtVojYtASPfNpukHpEiDHUi4Xq0ETs9Pif8aOp0PnKQR32zmxPgQwjfiu+mET+UeNOfYnwTc3vFlLR/GhGyt47IhRpWd8WwicFjRAAL6NdoG2S2FEoZvcut6CzOm32NBfnF8HljuTClj5OfD8ot7afAZFHNAKimhaLEFna5L6PqgCT/245QsWDgR/lFRpIeByoPKGCE75W+MrdefjgRMq7LzOBaHmrJ3ZjfHO8FQGIauEp0+IZCxPfXDqpxhQe5IhdGnkUIzFWvpRc6YF54cSeB9ubwhjxuywWBdtqdn6T3x+4rhwR0O91JWyet9++VsmhcBlseSeShF4l1UoiHbfMqofH3UT08ukx/cfucrPiGa14qC/uXpj7z6W3JXhnmLn5zqcfhPAZpr5zPu51aSDb+Ibri2USXf1i/2eMrAcGyGnyiSQc5WxsnwALXrscvmc17VKjl0bDq+b/NABd1mn9awX3uNyts7N5T2zemqhxBRCHbXeBLVAWcSi2Jjor2e+jTjk3d8W63uLhu4/4dojDAWeUV/v1FKoa7mZSa6tEeugN9wukdk2Crthbj8dCXTIOXvmH/6ka56gDw8KrUgrRvzFvVr2gLSEUS7+DgIbK7RIiwzaqj9F0WSvdXbmCYHvJ0l82WbrltvzZnLlhraq4xeyXQm0ntiFoTtrUscD7p/5BatZAT6VZINntzFa/RA0of8OJUNEEOUZ13YnMh4WjHQD7ZCkrEPVEYzCXmDYYbxJJP7aoYkUE/Uv5WIkHnEddXC7g=]]></content>
      <categories>
        <category>野狗云</category>
      </categories>
      <tags>
        <tag>野狗云</tag>
        <tag>帐号</tag>
        <tag>分享</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Hexo NexT主题添加点击爱心效果]]></title>
    <url>%2F2019%2F01%2F12%2F3%2F</url>
    <content type="text"><![CDATA[1.创建js文件在/themes/next/source/js/src下新建文件 clicklove.js ，接着把该链接下的代码拷贝粘贴到 clicklove.js 文件中。代码如下：1!function(e,t,a)&#123;function n()&#123;c(".heart&#123;width: 10px;height: 10px;position: fixed;background: #f00;transform: rotate(45deg);-webkit-transform: rotate(45deg);-moz-transform: rotate(45deg);&#125;.heart:after,.heart:before&#123;content: '';width: inherit;height: inherit;background: inherit;border-radius: 50%;-webkit-border-radius: 50%;-moz-border-radius: 50%;position: fixed;&#125;.heart:after&#123;top: -5px;&#125;.heart:before&#123;left: -5px;&#125;"),o(),r()&#125;function r()&#123;for(var e=0;e&lt;d.length;e++)d[e].alpha&lt;=0?(t.body.removeChild(d[e].el),d.splice(e,1)):(d[e].y--,d[e].scale+=.004,d[e].alpha-=.013,d[e].el.style.cssText="left:"+d[e].x+"px;top:"+d[e].y+"px;opacity:"+d[e].alpha+";transform:scale("+d[e].scale+","+d[e].scale+") rotate(45deg);background:"+d[e].color+";z-index:99999");requestAnimationFrame(r)&#125;function o()&#123;var t="function"==typeof e.onclick&amp;&amp;e.onclick;e.onclick=function(e)&#123;t&amp;&amp;t(),i(e)&#125;&#125;function i(e)&#123;var a=t.createElement("div");a.className="heart",d.push(&#123;el:a,x:e.clientX-5,y:e.clientY-5,scale:1,alpha:1,color:s()&#125;),t.body.appendChild(a)&#125;function c(e)&#123;var a=t.createElement("style");a.type="text/css";try&#123;a.appendChild(t.createTextNode(e))&#125;catch(t)&#123;a.styleSheet.cssText=e&#125;t.getElementsByTagName("head")[0].appendChild(a)&#125;function s()&#123;return"rgb("+~~(255*Math.random())+","+~~(255*Math.random())+","+~~(255*Math.random())+")"&#125;var d=[];e.requestAnimationFrame=function()&#123;return e.requestAnimationFrame||e.webkitRequestAnimationFrame||e.mozRequestAnimationFrame||e.oRequestAnimationFrame||e.msRequestAnimationFrame||function(e)&#123;setTimeout(e,1e3/60)&#125;&#125;(),n()&#125;(window,document);2.修改_layout.swig在\themes\next\layout\_layout.swig文件末尾添加：12&lt;!-- 页面点击小红心 --&gt;&lt;script type="text/javascript" src="/js/src/clicklove.js"&gt;&lt;/script&gt;]]></content>
      <categories>
        <category>Javascript</category>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
        <tag>Next</tag>
        <tag>点击效果</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[CSS实现向右导航icon]]></title>
    <url>%2F2019%2F01%2F08%2FCSS%E5%AE%9E%E7%8E%B0%E5%90%91%E5%8F%B3%E5%AF%BC%E8%88%AAicon%2F</url>
    <content type="text"><![CDATA[对于看过CSS绘制三角形的童鞋来说，实现向右导航 icon 很好理解，可能大家稍加即可知晓实现方式。是的，只需要设置一个元素的相邻 border，之后旋转一下即可。HTML1&lt;span id="right-arrow"&gt;&lt;/span&gt;CSS12345678#right-arrow &#123; display: inline-block; width: 17px; height: 17px; border-top: 2px solid red; border-right: 2px solid red; transform: rotate(45deg);&#125;解析给 span 元素设置合适的宽高，到达要求的效果大小设置元素的两个相邻 border，宽度合适即可将元素旋转 45 度即为向右导航 icon 效果border 的颜色为 icon 的颜色运行效果]]></content>
      <categories>
        <category>css</category>
      </categories>
      <tags>
        <tag>css</tag>
        <tag>icon</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[CSS 实现关闭 icon]]></title>
    <url>%2F2019%2F01%2F08%2FCSS%E5%AE%9E%E7%8E%B0%E5%85%B3%E9%97%ADicon%2F</url>
    <content type="text"><![CDATA[本文介绍关闭 icon 的实现。关闭 icon 有两条线组成，所以很简单的设想就是两条横线，分别旋转不同角度即可。HTML1&lt;span id="close"&gt;&lt;/span&gt;CSS123456789101112131415#close &#123; display: inline-block; width: 23px; height: 2px; background: red; transform: rotate(45deg);&#125;#close::after &#123; content: ''; display: block; width: 23px; height: 2px; background: red; transform: rotate(-90deg);&#125;解析给 span 元素设置合适的宽高，到达要求的效果大小旋转 span 元素，实现一条线的效果添加 ::after 伪元素，设置和 span 相同的宽高（注意此处 display 值应为 block，否则设置宽高无效）旋转 ::after 伪元素。由于基准元素 span 已经旋转，伪元素旋转参考点不是水平坐标系，而是旋转后的 span 元素，将伪元素旋转 90 度或 -90 度均可其中设置的背景色即为 icon 的颜色运行效果]]></content>
      <categories>
        <category>css</category>
      </categories>
      <tags>
        <tag>css</tag>
        <tag>icon</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[匿名函数、嵌套函数、闭包是怎么回事？]]></title>
    <url>%2F2019%2F01%2F08%2F2%2F</url>
    <content type="text"><![CDATA[匿名函数： 指的是 没有函数名的函数function (){ console.log(&#39;匿名函数&#39;) }嵌套函数呢 ？ 请看代码：12345678function test ()&#123; var sum = 20; //内嵌函数 demo = function()&#123; alert(sum); console.log('我是嵌套函数'); &#125;&#125;如代码所示，函数内部嵌入函数，称之为嵌套函数。那闭包又是什么呢？不多说，看代码1234567891011function demo()&#123; var num = 0; // 返回一个函数 return function()&#123; alert( num+1 ); &#125; &#125;//将返回的函数赋值给 add 变量var add = demo();// add就是一个闭包add();这么看，感觉像是，只要是嵌套函数，且能访问上一层作用域的变量就是闭包。 是这样吗？我们知道，js中，分为全局作用域，局部作用域，每个函数也就相等于一个局部作用域。同理，变量，也分为全局变量和局部变量。 有什么区别呢？在浏览器中，全局作用域对象是 window，也就是说页面一打开，window对象就存在。在js中，每个函数是局部作用域，局部变量会随着 函数的执行创建和执行完毕后销毁。而全局变量，只要页面不关闭，则会一直存在。并不会随着函数的执行完毕而销毁。那么和闭包有什么关系呢？在 “javaScript高级程序” 这本书有讲到过“作用域链”的概念, 特殊之处，在于函数内部可以直接读取全局变量。而函数外部却不能读取函数内部的变量。也就是说，作用域链就像只能往上不能往下的阶梯。我们看段代码理解12345678var name = "window";var age = 20;dmeo();function demo()&#123; var age = 21; console.log(name); // window console.log(age); //21&#125;在执行 demo() 函数时，就会创建一个通往全局作用域链，保存着当前作用域的变量，以便查找返回。在执行 console.log( name ) 这段代码时，会搜寻当前作用域( demo函数 ) 中是否存在 name 变量，因当前作用域不存在，所以在往上找到全局变量 name ，因此返回 window;在执行 console.log( age ) 这段代码时， 也会搜寻 当前作用域(demo函数) 中是否存在 age 变量，因为存在，所以返回 21。既然机制是只能往上读， 那么考虑一个问题，怎么在外部读取内部函数的变量呢？办法不是没有，稍微变通下即可。这就需要用到闭包的概念，12345678910111213function f1()&#123; var num = 0 ; //定义内部函数 function f2()&#123; return num + 1; &#125; //返回 f2函数引用 retufn f2; &#125;// bar 变量也指向 f2 函数，在此也是一个闭包var bar = f1();//执行bar(); // 1;我们知道，函数中的变量会随着函数的执行完毕后会被销毁。而如上代码，f1()函数执行完毕后，将f2函数赋值给一个全局变量，而f2函数的变量又依赖f1的num变量，因此，f1中的num变量并不会随着f1的函数执行完毕后而销毁。1234567891011var name = "the window"; var obj = &#123; name : 'the obj', getName : function()&#123; return funciton()&#123; return this.name; &#125; &#125;&#125;//执行 getName返回的函数alert(obj.getName()());我们看调用函数分析， 分成两部分执行。 先来看 obj.getName(); 此时getName函数由 obj对象调用，因此this的值是 obj。 但此时并不是输出而是返回一个函数。再加上一个(); 执行返回的函数，但此时返回的函数并没有任何对象调用，当不是对象本身调用，this的值会被提升到 window对象。因此输出的是 “the window”1234567891011var name = "the Window";var obj = &#123; name : "the obj", getName : funciton()&#123; var that = this; return function()&#123; return that.name; &#125; &#125;&#125;//执行 getName 返回的函数alert(obj.getName()());看了上面的题目，这个应该小意思吧，你说呢 ？]]></content>
      <categories>
        <category>Javascript</category>
      </categories>
      <tags>
        <tag>Javascript</tag>
        <tag>匿名函数</tag>
        <tag>嵌套函数</tag>
        <tag>闭包</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Javascript 535种方式！实现页面重载]]></title>
    <url>%2F2019%2F01%2F05%2F1%2F</url>
    <content type="text"><![CDATA[下文整理了535种方法来实现刷新一下页面，没有验证，权做餐后谈资收藏一下！location = locationlocation = location.hreflocation = window.locationlocation = self.locationlocation = window.location.hreflocation = self.location.hreflocation = location['href']location = window['location']location = window['location'].hreflocation = window['location']['href']location = window.location['href']location = self['location']location = self['location'].hreflocation = self['location']['href']location = self.location['href']location.assign(location)location.replace(location)window.location.assign(location)window.location.replace(location)self.location.assign(location)self.location.replace(location)location['assign'](location)location['replace'](location)window.location['assign'](location)window.location['replace'](location)window['location'].assign(location)window['location'].replace(location)window['location']['assign'](location)window['location']['replace'](location)self.location['assign'](location)self.location['replace'](location)self['location'].assign(location)self['location'].replace(location)self['location']['assign'](location)self['location']['replace'](location)location.href = locationlocation.href = location.hreflocation.href = window.locationlocation.href = self.locationlocation.href = window.location.hreflocation.href = self.location.hreflocation.href = location['href']location.href = window['location']location.href = window['location'].hreflocation.href = window['location']['href']location.href = window.location['href']location.href = self['location']location.href = self['location'].hreflocation.href = self['location']['href']location.href = self.location['href']location.assign(location.href)location.replace(location.href)window.location.assign(location.href)window.location.replace(location.href)self.location.assign(location.href)self.location.replace(location.href)location['assign'](location.href)location['replace'](location.href)window.location['assign'](location.href)window.location['replace'](location.href)window['location'].assign(location.href)window['location'].replace(location.href)window['location']['assign'](location.href)window['location']['replace'](location.href)self.location['assign'](location.href)self.location['replace'](location.href)self['location'].assign(location.href)self['location'].replace(location.href)self['location']['assign'](location.href)self['location']['replace'](location.href)window.location = locationwindow.location = location.hrefwindow.location = window.locationwindow.location = self.locationwindow.location = window.location.hrefwindow.location = self.location.hrefwindow.location = location['href']window.location = window['location']window.location = window['location'].hrefwindow.location = window['location']['href']window.location = window.location['href']window.location = self['location']window.location = self['location'].hrefwindow.location = self['location']['href']window.location = self.location['href']location.assign(window.location)location.replace(window.location)window.location.assign(window.location)window.location.replace(window.location)self.location.assign(window.location)self.location.replace(window.location)location['assign'](window.location)location['replace'](window.location)window.location['assign'](window.location)window.location['replace'](window.location)window['location'].assign(window.location)window['location'].replace(window.location)window['location']['assign'](window.location)window['location']['replace'](window.location)self.location['assign'](window.location)self.location['replace'](window.location)self['location'].assign(window.location)self['location'].replace(window.location)self['location']['assign'](window.location)self['location']['replace'](window.location)self.location = locationself.location = location.hrefself.location = window.locationself.location = self.locationself.location = window.location.hrefself.location = self.location.hrefself.location = location['href']self.location = window['location']self.location = window['location'].hrefself.location = window['location']['href']self.location = window.location['href']self.location = self['location']self.location = self['location'].hrefself.location = self['location']['href']self.location = self.location['href']location.assign(self.location)location.replace(self.location)window.location.assign(self.location)window.location.replace(self.location)self.location.assign(self.location)self.location.replace(self.location)location['assign'](self.location)location['replace'](self.location)window.location['assign'](self.location)window.location['replace'](self.location)window['location'].assign(self.location)window['location'].replace(self.location)window['location']['assign'](self.location)window['location']['replace'](self.location)self.location['assign'](self.location)self.location['replace'](self.location)self['location'].assign(self.location)self['location'].replace(self.location)self['location']['assign'](self.location)self['location']['replace'](self.location)window.location.href = locationwindow.location.href = location.hrefwindow.location.href = window.locationwindow.location.href = self.locationwindow.location.href = window.location.hrefwindow.location.href = self.location.hrefwindow.location.href = location['href']window.location.href = window['location']window.location.href = window['location'].hrefwindow.location.href = window['location']['href']window.location.href = window.location['href']window.location.href = self['location']window.location.href = self['location'].hrefwindow.location.href = self['location']['href']window.location.href = self.location['href']location.assign(window.location.href)location.replace(window.location.href)window.location.assign(window.location.href)window.location.replace(window.location.href)self.location.assign(window.location.href)self.location.replace(window.location.href)location['assign'](window.location.href)location['replace'](window.location.href)window.location['assign'](window.location.href)window.location['replace'](window.location.href)window['location'].assign(window.location.href)window['location'].replace(window.location.href)window['location']['assign'](window.location.href)window['location']['replace'](window.location.href)self.location['assign'](window.location.href)self.location['replace'](window.location.href)self['location'].assign(window.location.href)self['location'].replace(window.location.href)self['location']['assign'](window.location.href)self['location']['replace'](window.location.href)self.location.href = locationself.location.href = location.hrefself.location.href = window.locationself.location.href = self.locationself.location.href = window.location.hrefself.location.href = self.location.hrefself.location.href = location['href']self.location.href = window['location']self.location.href = window['location'].hrefself.location.href = window['location']['href']self.location.href = window.location['href']self.location.href = self['location']self.location.href = self['location'].hrefself.location.href = self['location']['href']self.location.href = self.location['href']location.assign(self.location.href)location.replace(self.location.href)window.location.assign(self.location.href)window.location.replace(self.location.href)self.location.assign(self.location.href)self.location.replace(self.location.href)location['assign'](self.location.href)location['replace'](self.location.href)window.location['assign'](self.location.href)window.location['replace'](self.location.href)window['location'].assign(self.location.href)window['location'].replace(self.location.href)window['location']['assign'](self.location.href)window['location']['replace'](self.location.href)self.location['assign'](self.location.href)self.location['replace'](self.location.href)self['location'].assign(self.location.href)self['location'].replace(self.location.href)self['location']['assign'](self.location.href)self['location']['replace'](self.location.href)location['href'] = locationlocation['href'] = location.hreflocation['href'] = window.locationlocation['href'] = self.locationlocation['href'] = window.location.hreflocation['href'] = self.location.hreflocation['href'] = location['href']location['href'] = window['location']location['href'] = window['location'].hreflocation['href'] = window['location']['href']location['href'] = window.location['href']location['href'] = self['location']location['href'] = self['location'].hreflocation['href'] = self['location']['href']location['href'] = self.location['href']location.assign(location['href'])location.replace(location['href'])window.location.assign(location['href'])window.location.replace(location['href'])self.location.assign(location['href'])self.location.replace(location['href'])location['assign'](location['href'])location['replace'](location['href'])window.location['assign'](location['href'])window.location['replace'](location['href'])window['location'].assign(location['href'])window['location'].replace(location['href'])window['location']['assign'](location['href'])window['location']['replace'](location['href'])self.location['assign'](location['href'])self.location['replace'](location['href'])self['location'].assign(location['href'])self['location'].replace(location['href'])self['location']['assign'](location['href'])self['location']['replace'](location['href'])window['location'] = locationwindow['location'] = location.hrefwindow['location'] = window.locationwindow['location'] = self.locationwindow['location'] = window.location.hrefwindow['location'] = self.location.hrefwindow['location'] = location['href']window['location'] = window['location']window['location'] = window['location'].hrefwindow['location'] = window['location']['href']window['location'] = window.location['href']window['location'] = self['location']window['location'] = self['location'].hrefwindow['location'] = self['location']['href']window['location'] = self.location['href']location.assign(window['location'])location.replace(window['location'])window.location.assign(window['location'])window.location.replace(window['location'])self.location.assign(window['location'])self.location.replace(window['location'])location['assign'](window['location'])location['replace'](window['location'])window.location['assign'](window['location'])window.location['replace'](window['location'])window['location'].assign(window['location'])window['location'].replace(window['location'])window['location']['assign'](window['location'])window['location']['replace'](window['location'])self.location['assign'](window['location'])self.location['replace'](window['location'])self['location'].assign(window['location'])self['location'].replace(window['location'])self['location']['assign'](window['location'])self['location']['replace'](window['location'])window['location'].href = locationwindow['location'].href = location.hrefwindow['location'].href = window.locationwindow['location'].href = self.locationwindow['location'].href = window.location.hrefwindow['location'].href = self.location.hrefwindow['location'].href = location['href']window['location'].href = window['location']window['location'].href = window['location'].hrefwindow['location'].href = window['location']['href']window['location'].href = window.location['href']window['location'].href = self['location']window['location'].href = self['location'].hrefwindow['location'].href = self['location']['href']window['location'].href = self.location['href']location.assign(window['location'].href)location.replace(window['location'].href)window.location.assign(window['location'].href)window.location.replace(window['location'].href)self.location.assign(window['location'].href)self.location.replace(window['location'].href)location['assign'](window['location'].href)location['replace'](window['location'].href)window.location['assign'](window['location'].href)window.location['replace'](window['location'].href)window['location'].assign(window['location'].href)window['location'].replace(window['location'].href)window['location']['assign'](window['location'].href)window['location']['replace'](window['location'].href)self.location['assign'](window['location'].href)self.location['replace'](window['location'].href)self['location'].assign(window['location'].href)self['location'].replace(window['location'].href)self['location']['assign'](window['location'].href)self['location']['replace'](window['location'].href)window['location']['href'] = locationwindow['location']['href'] = location.hrefwindow['location']['href'] = window.locationwindow['location']['href'] = self.locationwindow['location']['href'] = window.location.hrefwindow['location']['href'] = self.location.hrefwindow['location']['href'] = location['href']window['location']['href'] = window['location']window['location']['href'] = window['location'].hrefwindow['location']['href'] = window['location']['href']window['location']['href'] = window.location['href']window['location']['href'] = self['location']window['location']['href'] = self['location'].hrefwindow['location']['href'] = self['location']['href']window['location']['href'] = self.location['href']location.assign(window['location']['href'])location.replace(window['location']['href'])window.location.assign(window['location']['href'])window.location.replace(window['location']['href'])self.location.assign(window['location']['href'])self.location.replace(window['location']['href'])location['assign'](window['location']['href'])location['replace'](window['location']['href'])window.location['assign'](window['location']['href'])window.location['replace'](window['location']['href'])window['location'].assign(window['location']['href'])window['location'].replace(window['location']['href'])window['location']['assign'](window['location']['href'])window['location']['replace'](window['location']['href'])self.location['assign'](window['location']['href'])self.location['replace'](window['location']['href'])self['location'].assign(window['location']['href'])self['location'].replace(window['location']['href'])self['location']['assign'](window['location']['href'])self['location']['replace'](window['location']['href'])window.location['href'] = locationwindow.location['href'] = location.hrefwindow.location['href'] = window.locationwindow.location['href'] = self.locationwindow.location['href'] = window.location.hrefwindow.location['href'] = self.location.hrefwindow.location['href'] = location['href']window.location['href'] = window['location']window.location['href'] = window['location'].hrefwindow.location['href'] = window['location']['href']window.location['href'] = window.location['href']window.location['href'] = self['location']window.location['href'] = self['location'].hrefwindow.location['href'] = self['location']['href']window.location['href'] = self.location['href']location.assign(window.location['href'])location.replace(window.location['href'])window.location.assign(window.location['href'])window.location.replace(window.location['href'])self.location.assign(window.location['href'])self.location.replace(window.location['href'])location['assign'](window.location['href'])location['replace'](window.location['href'])window.location['assign'](window.location['href'])window.location['replace'](window.location['href'])window['location'].assign(window.location['href'])window['location'].replace(window.location['href'])window['location']['assign'](window.location['href'])window['location']['replace'](window.location['href'])self.location['assign'](window.location['href'])self.location['replace'](window.location['href'])self['location'].assign(window.location['href'])self['location'].replace(window.location['href'])self['location']['assign'](window.location['href'])self['location']['replace'](window.location['href'])self['location'] = locationself['location'] = location.hrefself['location'] = window.locationself['location'] = self.locationself['location'] = window.location.hrefself['location'] = self.location.hrefself['location'] = location['href']self['location'] = window['location']self['location'] = window['location'].hrefself['location'] = window['location']['href']self['location'] = window.location['href']self['location'] = self['location']self['location'] = self['location'].hrefself['location'] = self['location']['href']self['location'] = self.location['href']location.assign(self['location'])location.replace(self['location'])window.location.assign(self['location'])window.location.replace(self['location'])self.location.assign(self['location'])self.location.replace(self['location'])location['assign'](self['location'])location['replace'](self['location'])window.location['assign'](self['location'])window.location['replace'](self['location'])window['location'].assign(self['location'])window['location'].replace(self['location'])window['location']['assign'](self['location'])window['location']['replace'](self['location'])self.location['assign'](self['location'])self.location['replace'](self['location'])self['location'].assign(self['location'])self['location'].replace(self['location'])self['location']['assign'](self['location'])self['location']['replace'](self['location'])self['location'].href = locationself['location'].href = location.hrefself['location'].href = window.locationself['location'].href = self.locationself['location'].href = window.location.hrefself['location'].href = self.location.hrefself['location'].href = location['href']self['location'].href = window['location']self['location'].href = window['location'].hrefself['location'].href = window['location']['href']self['location'].href = window.location['href']self['location'].href = self['location']self['location'].href = self['location'].hrefself['location'].href = self['location']['href']self['location'].href = self.location['href']location.assign(self['location'].href)location.replace(self['location'].href)window.location.assign(self['location'].href)window.location.replace(self['location'].href)self.location.assign(self['location'].href)self.location.replace(self['location'].href)location['assign'](self['location'].href)location['replace'](self['location'].href)window.location['assign'](self['location'].href)window.location['replace'](self['location'].href)window['location'].assign(self['location'].href)window['location'].replace(self['location'].href)window['location']['assign'](self['location'].href)window['location']['replace'](self['location'].href)self.location['assign'](self['location'].href)self.location['replace'](self['location'].href)self['location'].assign(self['location'].href)self['location'].replace(self['location'].href)self['location']['assign'](self['location'].href)self['location']['replace'](self['location'].href)self['location']['href'] = locationself['location']['href'] = location.hrefself['location']['href'] = window.locationself['location']['href'] = self.locationself['location']['href'] = window.location.hrefself['location']['href'] = self.location.hrefself['location']['href'] = location['href']self['location']['href'] = window['location']self['location']['href'] = window['location'].hrefself['location']['href'] = window['location']['href']self['location']['href'] = window.location['href']self['location']['href'] = self['location']self['location']['href'] = self['location'].hrefself['location']['href'] = self['location']['href']self['location']['href'] = self.location['href']location.assign(self['location']['href'])location.replace(self['location']['href'])window.location.assign(self['location']['href'])window.location.replace(self['location']['href'])self.location.assign(self['location']['href'])self.location.replace(self['location']['href'])location['assign'](self['location']['href'])location['replace'](self['location']['href'])window.location['assign'](self['location']['href'])window.location['replace'](self['location']['href'])window['location'].assign(self['location']['href'])window['location'].replace(self['location']['href'])window['location']['assign'](self['location']['href'])window['location']['replace'](self['location']['href'])self.location['assign'](self['location']['href'])self.location['replace'](self['location']['href'])self['location'].assign(self['location']['href'])self['location'].replace(self['location']['href'])self['location']['assign'](self['location']['href'])self['location']['replace'](self['location']['href'])self.location['href'] = locationself.location['href'] = location.hrefself.location['href'] = window.locationself.location['href'] = self.locationself.location['href'] = window.location.hrefself.location['href'] = self.location.hrefself.location['href'] = location['href']self.location['href'] = window['location']self.location['href'] = window['location'].hrefself.location['href'] = window['location']['href']self.location['href'] = window.location['href']self.location['href'] = self['location']self.location['href'] = self['location'].hrefself.location['href'] = self['location']['href']self.location['href'] = self.location['href']location.assign(self.location['href'])location.replace(self.location['href'])window.location.assign(self.location['href'])window.location.replace(self.location['href'])self.location.assign(self.location['href'])self.location.replace(self.location['href'])location['assign'](self.location['href'])location['replace'](self.location['href'])window.location['assign'](self.location['href'])window.location['replace'](self.location['href'])window['location'].assign(self.location['href'])window['location'].replace(self.location['href'])window['location']['assign'](self.location['href'])window['location']['replace'](self.location['href'])self.location['assign'](self.location['href'])self.location['replace'](self.location['href'])self['location'].assign(self.location['href'])self['location'].replace(self.location['href'])self['location']['assign'](self.location['href'])self['location']['replace'](self.location['href'])location.reload()location['reload']()window.location.reload()window['location'].reload()window.location['reload']()window['location']['reload']()self.location.reload()self['location'].reload()self.location['reload']()self['location']['reload']()]]></content>
      <categories>
        <category>Javascript</category>
      </categories>
      <tags>
        <tag>Javascript</tag>
        <tag>页面重载</tag>
      </tags>
  </entry>
</search>
