<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[Hexo文章使用 hexo-blog-encrypt 插件加密访问]]></title>
    <url>%2F2019%2F03%2F10%2F4%2F</url>
    <content type="text"><![CDATA[请输入密码阅读全文... Incorrect Password! No content to display! ]]></content>
      <categories>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>加密</tag>
        <tag>Hexo</tag>
        <tag>hexo-blog-encrypt</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Valine评论框样式美化]]></title>
    <url>%2F2019%2F02%2F13%2FValine%E8%AF%84%E8%AE%BA%E6%A1%86%E6%A0%B7%E5%BC%8F%E7%BE%8E%E5%8C%96%2F</url>
    <content type="text"><![CDATA[我感觉我一个强迫症的就不应该搞前端，太吹毛求疵追求完美了，哪里有一点点觉得不漂亮就想改。博客的评论系统用过好几家（虽然都没有人评论比如gitalk，来必力之前用的来必力，加载慢的问题是解决了，但是总觉得登陆的反应也很慢想来想去还是觉得valine好用免登陆，使用方便，直接填了昵称和邮箱就可以评论有回复邮件提醒功能！很好用不过之前没用valine的原因时它评论框样式感觉不好看所以这次我用回valine，首先改了样式修改样式前后对比修改前的默认样式如下图：修改后的样式如下图：好像也没太大变化，不过就是看着顺眼了使用valine这个没什么好说的，next主题在自带的，配置很简单，网上搜一下就有添加样式表在themes\next\source\css\custom目录下的custom.styl文件中添加如下代码：123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161// Custom styles./*valine 评论系统样式*/div#comments.comments.v&#123; margin-top: 0px !important; margin-left: 0px !important; margin-right: 0px !important;&#125;div.vheader.item2&#123; border-bottom: 1px solid #5f5f5f; height: 35px !important;&#125;.v .vwrap .vheader.item2 .vinput&#123; height: 30px !important; border: 0px !important; width: 25% !important; margin: 0px !important;&#125;input.vnick.vinput&#123; border-right: 2px solid #a4d8fa !important;&#125;div.vcontrol&#123; padding-top: 0px !important;&#125;div#comments.comments.v&#123; border: 0px;&#125;.v .vwrap&#123; border: 2px solid black !important; overflow: visible !important; counter-reset: avater;&#125;.v .vwrap .vedit .vemojis&#123; width: 600px !important; background-color: #fff !important; border-radius: 5px !important;&#125;.v .vwrap .vedit .vpreview &#123; width: 600px !important; background-color: #fff !important; border-radius: 5px !important;&#125;.v .vbtn&#123; background-color: #5f5f5f !important; color: #fff !important;&#125;.v .vwrap .vedit .vctrl&#123; text-align: left !important;&#125;.v .vwrap .vedit .vctrl span&#123; background-color: #7f7f7f !important; color: #fff !important; border-radius: 3px !important; padding: 3px !important;&#125;.v .vwrap .vedit .vctrl&#123; padding: 0px !important; margin: 0px !important;&#125;.v .veditor&#123; min-height: 70px !important; height: 70px !important;&#125;.v .vlist .vquote .vcard&#123; border-left:1px solid #E4E6F1; margin-top:5px;&#125;.v .vlist .vcard .vhead .vsys&#123; display: none !important; background-color: #fff !important;&#125;.v .vlist .vcard .vh .vmeta .vat&#123; background-color: #7f7f7f !important; color: #fff !important; border-radius: 3px !important; padding-left: 10px !important; padding-right: 10px !important;&#125;.v .vlist .vcard .vh .vquote .vmeta&#123; margin-right:50px;&#125;.v .vlist .vcard .vquote&#123; counter-reset: avaters;&#125;.v .vlist .vcard p&#123; margin-bottom: 0px !important; color: #666; text-align: left; letter-spacing: 3px; line-height: 25.59375px;&#125;.v .vlist .vcard .vquote a.at&#123; float: left; margin-right: 13px; color: #567843; text-decoration: none;&#125;.v .vlist .vcard .vquote .vcontent&#123; font-size: 15px; font-weight: 200;&#125;.v .vlist .vcard .vcontent&#123; margin-top: 58px !important; font-size: 15px !important; font-weight: 500 !important; padding-top: 0px !important;&#125;.v .vlist .vcard&#123; padding-top: 8px !important;&#125;.v .vlist .vcard .vhead&#123; float: left !important;&#125;.v .vlist .vcard .vh .vmeta&#123; float: right !important;&#125;.v .vlist .vcard .vcontent.expand:after&#123; content: "点击查看全部" !important; font-weight: 400 !important;&#125;.power&#123; display:none;&#125; .v .vwrap .vedit .vctrl&#123; display:none !important;&#125;/**/更新文件:123hexo cleanhexo d -g然后就ok咯!]]></content>
      <categories>
        <category>Hexo</category>
        <category>Valine</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
        <tag>Valine</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[原生JS实现最简单的图片懒加载]]></title>
    <url>%2F2019%2F02%2F08%2F%E5%8E%9F%E7%94%9FJS%E5%AE%9E%E7%8E%B0%E6%9C%80%E7%AE%80%E5%8D%95%E7%9A%84%E5%9B%BE%E7%89%87%E6%87%92%E5%8A%A0%E8%BD%BD%2F</url>
    <content type="text"><![CDATA[一、懒加载什么是懒加载懒加载其实就是延迟加载，是一种对网页性能优化的方式，比如当访问一个页面的时候，优先显示可视区域的图片而不一次性加载所有图片，当需要显示的时候再发送图片请求，避免打开网页时加载过多资源。什么时候用懒加载当页面中需要一次性载入很多图片的时候，往往都是需要用懒加载的。懒加载原理我们都知道HTML中的 &lt;img&gt;标签是代表文档中的一个图像。。说了个废话。。&lt;img&gt;标签有一个属性是 src，用来表示图像的URL，当这个属性的值不为空时，浏览器就会根据这个值发送请求。如果没有 src属性，就不会发送请求。嗯？貌似这点可以利用一下？我先不设置 src，需要的时候再设置？nice，就是这样。我们先不给 &lt;img&gt;设置 src，把图片真正的URL放在另一个属性 data-src中，在需要的时候也就是图片进入可视区域的之前，将URL取出放到 src中。二、实现HTML结构1234567891011121314151617&lt;div class="container"&gt; &lt;div class="img-area"&gt; &lt;img class="my-photo" alt="loading" src="./img/img1.png"&gt; &lt;/div&gt; &lt;div class="img-area"&gt; &lt;img class="my-photo" alt="loading" src="./img/img2.png"&gt; &lt;/div&gt; &lt;div class="img-area"&gt; &lt;img class="my-photo" alt="loading" src="./img/img3.png"&gt; &lt;/div&gt; &lt;div class="img-area"&gt; &lt;img class="my-photo" alt="loading" src="./img/img4.png"&gt; &lt;/div&gt; &lt;div class="img-area"&gt; &lt;img class="my-photo" alt="loading" src="./img/img5.png"&gt; &lt;/div&gt;&lt;/div&gt;仔细观察一下， &lt;img&gt;标签此时是没有 src属性的，只有 alt和 data-src属性。alt 属性是一个必需的属性，它规定在图像无法显示时的替代文本。 data-* 全局属性：构成一类名称为自定义数据属性的属性，可以通过 HTMLElement.dataset来访问。如何判断元素是否在可视区域方法一通过 document.documentElement.clientHeight获取屏幕可视窗口高度通过 document.documentElement.scrollTop获取浏览器窗口顶部与文档顶部之间的距离，也就是滚动条滚动的距离通过 element.offsetTop获取元素相对于文档顶部的距离然后判断②-③&lt;①是否成立，如果成立，元素就在可视区域内。方法二（推荐）通过 getBoundingClientRect()方法来获取元素的大小以及位置，MDN上是这样描述的：The Element.getBoundingClientRect() method returns the size of an element and its position relative to the viewport.这个方法返回一个名为 ClientRect的 DOMRect对象，包含了 top、 right、 botton、 left、 width、 height这些值。MDN上有这样一张图：可以看出返回的元素位置是相对于左上角而言的，而不是边距。我们思考一下，什么情况下图片进入可视区域。假设 constbound=el.getBoundingClientRect();来表示图片到可视区域顶部距离； 并设 constclientHeight=window.innerHeight;来表示可视区域的高度。随着滚动条的向下滚动， bound.top会越来越小，也就是图片到可视区域顶部的距离越来越小，当 bound.top===clientHeight时，图片的上沿应该是位于可视区域下沿的位置的临界点，再滚动一点点，图片就会进入可视区域。也就是说，在 bound.top&lt;=clientHeight时，图片是在可视区域内的。我们这样判断：1234567function isInSight(el)&#123; const bound = el.getBoundingClientRect(); const clientHeight = window.innerHeight; //如果只考虑向下滚动加载 //const clientWidth = window.innerWeight; return bound.top &lt;= clientHeight + 100;&#125;这里有个+100是为了提前加载。加载图片页面打开时需要对所有图片进行检查，是否在可视区域内，如果是就加载。1234567891011121314function checkImgs() &#123; const imgs = document.querySelectorAll('.my-photo'); Array.from(imgs).forEach(el =&gt; &#123; if (isInSight(el))&#123; loadImg(el); &#125; &#125;)&#125;function loadImg(el) &#123; if(!el.src) &#123; const source = el.dataset.src; el.src = source; &#125;&#125;这里应该是有一个优化的地方，设一个标识符标识已经加载图片的index，当滚动条滚动时就不需要遍历所有的图片，只需要遍历未加载的图片即可。函数节流在类似于滚动条滚动等频繁的DOM操作时，总会提到“函数节流、函数去抖”。所谓的函数节流，也就是让一个函数不要执行的太频繁，减少一些过快的调用来节流。基本步骤：获取第一次触发事件的时间戳获取第二次触发事件的时间戳时间差如果大于某个阈值就执行事件，然后重置第一个时间1234567891011121314151617function throttle(fn, mustRun = 500) &#123; const timer = null; let previous = null; return function() &#123; const now = new Date(); const context = this; const args = arguments; if(!previous)&#123; previous = now; &#125; const remaining = now - previous; if (mustRun &amp;&amp; remaining &gt;= mustRun) &#123; fn.apply(context, args); previous = now; &#125; &#125;&#125;这里的 mustRun就是调用函数的时间间隔，无论多么频繁的调用 fn，只有 remaining&gt;=mustRun时 fn才能被执行。三、实验页面打开时可以看出此时仅仅是加载了img1和img2，其它的img都没发送请求，看看此时的浏览器第一张图片是完整的呈现了，第二张图片刚进入可视区域，后面的就看不到了~页面滚动时当我向下滚动，此时浏览器是这样此时第二张图片完全显示了，而第三张图片显示了一点点，这时候我们看看请求情况img3的请求发出来，而后面的请求还是没发出~全部载入时当滚动条滚到最底下时，全部请求都应该是发出的，如图四、更新方法三 IntersectionObserver经大佬提醒，发现了这个方法先附上链接：jjc大大：https://github.com/justjavac/the-front-end-knowledge-you-may-dont-know/issues/10阮一峰大大：http://www.ruanyifeng.com/blog/2016/11/intersectionobserver_api.htmlAPI Sketch for Intersection Observers：https://github.com/WICG/IntersectionObserverIntersectionObserver可以自动观察元素是否在视口内。1234567var io = new IntersectionObserver(callback, option);// 开始观察io.observe(document.getElementById('example'));// 停止观察io.unobserve(element);// 关闭观察器io.disconnect();callback的参数是一个数组，每个数组都是一个 IntersectionObserverEntry对象，包括以下属性：属性描述time可见性发生变化的时间，单位为毫秒rootBounds与getBoundingClientRect()方法的返回值一样boundingClientRect目标元素的矩形区域的信息intersectionRect目标元素与视口（或根元素）的交叉区域的信息intersectionRatio目标元素的可见比例，即intersectionRect占boundingClientRect的比例，完全可见时为1，完全不可见时小于等于0target被观察的目标元素，是一个 DOM 节点对象我们需要用到 intersectionRatio来判断是否在可视区域内，当 intersectionRatio&gt;0&amp;&amp;intersectionRatio&lt;=1即在可视区域内。代码1234567891011121314151617181920function checkImgs() &#123; const imgs = Array.from(document.querySelectorAll(".my-photo")); imgs.forEach(item =&gt; io.observe(item));&#125;function loadImg(el) &#123; if (!el.src) &#123; const source = el.dataset.src; el.src = source; &#125;&#125;const io = new IntersectionObserver(ioes =&gt; &#123; ioes.forEach(ioe =&gt; &#123; const el = ioe.target; const intersectionRatio = ioe.intersectionRatio; if(intersectionRatio &gt; 0 &amp;&amp; intersectionRatio &lt;=1)&#123; loadImg(el); &#125; el.onload = el.onerror = () =&gt; io.unobserve(el); &#125;);&#125;);]]></content>
      <categories>
        <category>Javascript</category>
      </categories>
      <tags>
        <tag>Javascript</tag>
        <tag>图片懒加载</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[HTTP状态码]]></title>
    <url>%2F2019%2F02%2F04%2FHTTP%E7%8A%B6%E6%80%81%E7%A0%81%2F</url>
    <content type="text"><![CDATA[当浏览者访问一个网页时，浏览者的浏览器会向网页所在服务器发出请求。当浏览器接收并显示网页前，此网页所在的服务器会返回一个包含HTTP状态码的信息头（server header）用以响应浏览器的请求。HTTP状态码的英文为HTTP Status Code。HTTP状态码由三个十进制数字组成，第一个十进制数字定义了状态码的类型，后两个数字没有分类的作用。HTTP状态码共分为5种类型：1xx : 信息，服务器收到请求，需要请求者继续执行操作2xx : 成功，操作被成功接收并处理3xx : 重定向，需要进一步的操作以完成请求4xx : 客户端错误，请求包含语法错误或无法完成请求5xx : 服务器错误，服务器在处理请求的过程中发生了错误以下列举了有可能会返回的一系列 HTTP 状态消息：1xx: 信息消息：描述：100 Continue服务器仅接收到部分请求，但是一旦服务器并没有拒绝该请求，客户端应该继续发送其余的请求。101 Switching Protocols服务器转换协议：服务器将遵从客户的请求转换到另外一种协议。103 Checkpoint用于 PUT 或者 POST 请求恢复失败时的恢复请求建议。2xx: 成功消息：描述：200 OK请求成功（这是对HTTP请求成功的标准应答。）201 Created请求被创建完成，同时新的资源被创建。202 Accepted供处理的请求已被接受，但是处理未完成。203 Non-Authoritative Information请求已经被成功处理，但是一些应答头可能不正确，因为使用的是其他文档的拷贝。204 No Content请求已经被成功处理，但是没有返回新文档。浏览器应该继续显示原来的文档。如果用户定期地刷新页面，而Servlet可以确定用户文档足够新，这个状态代码是很有用的。205 Reset Content请求已经被成功处理，但是没有返回新文档。但浏览器应该重置它所显示的内容。用来强制浏览器清除表单输入内容。206 Partial Content客户发送了一个带有Range头的GET请求，服务器完成了它。3xx: 重定向消息：描述：300 Multiple Choices多重选择。链接列表。用户可以选择某链接到达目的地。最多允许五个地址。301 Moved Permanently所请求的页面已经转移至新的 URL 。302 Found所请求的页面已经临时转移至新的 URL 。303 See Other所请求的页面可在别的 URL 下被找到。304 Not Modified未按预期修改文档。客户端有缓冲的文档并发出了一个条件性的请求（一般是提供If-Modified-Since头表示客户只想比指定日期更新的文档）。服务器告诉客户，原来缓冲的文档还可以继续使用。305 Use Proxy客户请求的文档应该通过Location头所指明的代理服务器提取。306 Switch Proxy目前已不再使用，但是代码依然被保留。307 Temporary Redirect被请求的页面已经临时移至新的 URL 。308 Resume Incomplete用于 PUT 或者 POST 请求恢复失败时的恢复请求建议。4xx: 客户端错误消息：描述：400&nbsp;Bad Request因为语法错误，服务器未能理解请求。401 Unauthorized合法请求，但对被请求页面的访问被禁止。因为被请求的页面需要身份验证，客户端没有提供或者身份验证失败。402 Payment Required此代码尚无法使用。403 Forbidden合法请求，但对被请求页面的访问被禁止。404 Not Found服务器无法找到被请求的页面。405 Method Not Allowed请求中指定的方法不被允许。406 Not Acceptable服务器生成的响应无法被客户端所接受。407 Proxy Authentication Required用户必须首先使用代理服务器进行验证，这样请求才会被处理。408 Request Timeout请求超出了服务器的等待时间。409 Conflict由于冲突，请求无法被完成。410 Gone被请求的页面不可用。411 Length Required“Content-Length” 未被定义。如果无此内容，服务器不会接受请求。412 Precondition Failed请求中的前提条件被服务器评估为失败。413 Request Entity Too Large由于所请求的实体太大，服务器不会接受请求。414 Request-URI Too Long由于 URL 太长，服务器不会接受请求。当 POST 请求被转换为带有很长的查询信息的 GET 请求时，就会发生这种情况。415 Unsupported Media Type由于媒介类型不被支持，服务器不会接受请求。416 Requested Range Not Satisfiable客户端请求部分文档，但是服务器不能提供被请求的部分。417 Expectation Failed服务器不能满足客户在请求中指定的请求头。5xx: 服务器错误消息：描述：500 Internal Server Error请求未完成。服务器遇到不可预知的情况。501 Not Implemented请求未完成。服务器不支持所请求的功能，或者服务器无法完成请求。502 Bad Gateway请求未完成。服务器充当网关或者代理的角色时，从上游服务器收到一个无效的响应。503 Service Unavailable服务器当前不可用（过载或者当机）。504 Gateway Timeout网关超时。服务器充当网关或者代理的角色时，未能从上游服务器收到一个及时的响应。505 HTTP Version Not Supported服务器不支持请求中指明的HTTP协议版本。511 Network Authentication Required用户需要提供身份验证来获取网络访问入口。]]></content>
      <categories>
        <category>HTTP</category>
      </categories>
      <tags>
        <tag>HTTP</tag>
        <tag>HTTP状态码</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[vue面试中常问知识点整理]]></title>
    <url>%2F2019%2F02%2F03%2Fvue%E9%9D%A2%E8%AF%95%E4%B8%AD%E5%B8%B8%E9%97%AE%E7%9F%A5%E8%AF%86%E7%82%B9%E6%95%B4%E7%90%86%2F</url>
    <content type="text"><![CDATA[看看面试题，只是为了查漏补缺，看看自己那些方面还不懂。切记不要以为背了面试题，就万事大吉了，最好是理解背后的原理，这样面试的时候才能侃侃而谈。不然，稍微有水平的面试官一看就能看出，是否有真才实学还是刚好背中了这道面试题（有空再把例子中代码补上）。一、 对于MVVM的理解？MVVM 是 Model-View-ViewModel 的缩写。Model 代表数据模型，也可以在Model中定义数据修改和操作的业务逻辑。View 代表UI 组件，它负责将数据模型转化成UI 展现出来。ViewModel 监听模型数据的改变和控制视图行为、处理用户交互，简单理解就是一个同步View 和 Model的对象，连接Model和View在MVVM架构下，View 和 Model 之间并没有直接的联系，而是通过ViewModel进行交互，Model 和 ViewModel 之间的交互是双向的， 因此View 数据的变化会同步到Model中，而Model 数据的变化也会立即反应到View 上。ViewModel 通过双向数据绑定把 View 层和 Model 层连接了起来，而View 和 Model 之间的同步工作完全是自动的，无需人为干涉，因此开发者只需关注业务逻辑，不需要手动操作DOM，不需要关注数据状态的同步问题，复杂的数据状态维护完全由 MVVM 来统一管理。二、 Vue的生命周期beforeCreate（创建前），在数据观测和初始化事件还未开始created（创建后），完成数据观测，属性和方法的运算，初始化事件， $el 属性还没有显示出来beforeMount（载入前），在挂载开始之前被调用，相关的render函数首次被调用。实例已完成以下的配置：编译模板，把data里面的数据和模板生成html。注意此时还没有挂载html到页面上。mounted（载入后），在el 被新创建的 vm.$el 替换，并挂载到实例上去之后调用。实例已完成以下的配置：用上面编译好的html内容替换el属性指向的DOM对象。完成模板中的html渲染到html页面中。此过程中进行ajax交互。beforeUpdate（更新前），在数据更新之前调用，发生在虚拟DOM重新渲染和打补丁之前。可以在该钩子中进一步地更改状态，不会触发附加的重渲染过程。updated（更新后），在由于数据更改导致的虚拟DOM重新渲染和打补丁之后调用。调用时，组件DOM已经更新，所以可以执行依赖于DOM的操作。然而在大多数情况下，应该避免在此期间更改状态，因为这可能会导致更新无限循环。该钩子在服务器端渲染期间不被调用。beforeDestroy（销毁前），在实例销毁之前调用。实例仍然完全可用。destroyed（销毁后），在实例销毁之后调用。调用后，所有的事件监听器会被移除，所有的子实例也会被销毁。该钩子在服务器端渲染期间不被调用。1、 什么是vue生命周期？答： Vue 实例从创建到销毁的过程，就是生命周期。从开始创建、初始化数据、编译模板、挂载Dom→渲染、更新→渲染、销毁等一系列过程，称之为 Vue 的生命周期。2、 vue生命周期的作用是什么？答：它的生命周期中有多个事件钩子，让我们在控制整个Vue实例的过程时更容易形成好的逻辑。3、 vue生命周期总共有几个阶段？答：它可以总共分为8个阶段：创建前/后、载入前/后、更新前/后、销毁前/销毁后。4、 第一次页面加载会触发哪几个钩子？答：会触发下面这几个beforeCreate、created、beforeMount、mounted 。5、 DOM 渲染在哪个周期中就已经完成？答：DOM 渲染在 mounted 中就已经完成了。三、 Vue实现数据双向绑定的原理：Object.defineProperty()vue实现数据双向绑定主要是：采用数据劫持结合发布者-订阅者模式的方式，通过 Object.defineProperty() 来劫持各个属性的setter，getter，在数据变动时发布消息给订阅者，触发相应监听回调。当把一个普通 Javascript 对象传给 Vue 实例来作为它的 data 选项时，Vue 将遍历它的属性，用 Object.defineProperty() 将它们转为 getter/setter。用户看不到 getter/setter，但是在内部它们让 Vue 追踪依赖，在属性被访问和修改时通知变化。vue的数据双向绑定 将MVVM作为数据绑定的入口，整合Observer，Compile和Watcher三者，通过Observer来监听自己的model的数据变化，通过Compile来解析编译模板指令（vue中是用来解析[[]] ），最终利用watcher搭起observer和Compile之间的通信桥梁，达到数据变化 —&gt;视图更新；视图交互变化（input）—&gt;数据model变更双向绑定效果。js实现简单的双向绑定：123456789101112131415161718192021&lt;body&gt; &lt;div id="app"&gt; &lt;input type="text" id="txt"&gt; &lt;p id="show"&gt;&lt;p&gt; &lt;/div&gt;&lt;/body&gt;&lt;script type="text/javascript"&gt; var obj = &#123;&#125; Object.defineProperty(obj, 'txt', &#123; get: function () &#123; return obj &#125;, set: function (newValue) &#123; document.getElementById('txt'.value = newValue document.getElementById('show').innerHTML = newValue &#125; &#125;) document.addEventListener('keyup', function (e) &#123; obj.txt = e.target.value &#125;)&lt;/script&gt;四、 Vue组件间的参数传递1、 父组件与子组件传值父组件传给子组件：子组件通过props方法接受数据；子组件传给父组件：$emit 方法传递参数2、 非父子组件间的数据传递，兄弟组件传值eventBus，就是创建一个事件中心，相当于中转站，可以用它来传递事件和接收事件。项目比较小时，用这个比较合适（虽然也有不少人推荐直接用VUEX，具体来说看需求咯。技术只是手段，目的达到才是王道）。五、 Vue的路由实现：hash模式 和 history模式hash模式：在浏览器中符号“#”，#以及#后面的字符称之为hash，用 window.location.hash 读取。特点：hash虽然在URL中，但不被包括在HTTP请求中；用来指导浏览器动作，对服务端安全无用，hash不会重加载页面。history模式：history采用HTML5的新特性；且提供了两个新方法： pushState()， replaceState()可以对浏览器历史记录栈进行修改，以及popState事件的监听到状态变更。六、 Vue与Angular以及React的区别？版本在不断更新，以下的区别有可能不是很正确。我工作中只用到vue，对angular和react不怎么熟。1、 与AngularJS的区别相同点：都支持指令：内置指令和自定义指令；都支持过滤器：内置过滤器和自定义过滤器；都支持双向数据绑定；都不支持低端浏览器。不同点：AngularJS的学习成本高，比如增加了Dependency Injection特性，而Vue.js本身提供的API都比较简单、直观；在性能上，AngularJS依赖对数据做脏检查，所以Watcher越多越慢；Vue.js使用基于依赖追踪的观察并且使用异步队列更新，所有的数据都是独立触发的。2、 与React的区别相同点：React采用特殊的JSX语法，Vue.js在组件开发中也推崇编写.vue特殊文件格式，对文件内容都有一些约定，两者都需要编译后使用；中心思想相同：一切都是组件，组件实例之间可以嵌套；都提供合理的钩子函数，可以让开发者定制化地去处理需求；都不内置列数AJAX，Route等功能到核心包，而是以插件的方式加载；在组件开发中都支持mixins的特性。不同点：React采用的Virtual DOM会对渲染出来的结果做脏检查；Vue.js在模板中提供了指令，过滤器等，可以非常方便，快捷地操作Virtual DOM。七、 vue路由的钩子函数首页可以控制导航跳转，beforeEach，afterEach等，一般用于页面title的修改。一些需要登录才能调整页面的重定向功能。beforeEach主要有3个参数to，from，next。to：route即将进入的目标路由对象。from：route当前导航正要离开的路由。next：function一定要调用该方法resolve这个钩子。执行效果依赖next方法的调用参数。可以控制网页的跳转。八、 vuex是什么？怎么使用？哪种功能场景使用它？只用来读取的状态集中放在store中； 改变状态的方式是提交mutations，这是个同步的事物； 异步逻辑应该封装在action中。在main.js引入store，注入。新建了一个目录store，… export 。场景有：单页应用中，组件之间的状态、音乐播放、登录状态、加入购物车state：Vuex 使用单一状态树,即每个应用将仅仅包含一个store 实例，但单一状态树和模块化并不冲突。存放的数据状态，不可以直接修改里面的数据。mutations：mutations定义的方法动态修改Vuex 的 store 中的状态或数据。getters：类似vue的计算属性，主要用来过滤一些数据。action：actions可以理解为通过将mutations里面处里数据的方法变成可异步的处理数据的方法，简单的说就是异步操作数据。view 层通过 store.dispath 来分发 action。12345678910111213141516const store = new Vuex.Store(&#123; //store实例 state: &#123; count: 0 &#125;, mutations:&#123; increment (state) &#123; state.count++ &#125; &#125;, actions: &#123; increment (context) &#123; context.commit('increment') &#125; &#125;&#125;)modules：项目特别复杂的时候，可以让每一个模块拥有自己的state、mutation、action、getters，使得结构非常清晰，方便管理。1234567891011121314151617const moduleA = &#123; state: &#123; ... &#125;, mutations: &#123; ... &#125;, actions: &#123; ... &#125;, getters: &#123; ... &#125;&#125;const moduleB = &#123; state: &#123; ... &#125;, mutations: &#123; ... &#125;, actions: &#123; ... &#125;&#125;const store = new Vuex.Store(&#123; modules:&#123; a: moduleA, b: moduleB&#125;)九、其它小知识点1、 css只在当前组件起作用答：在style标签中写入scoped即可 例如： &lt;stylescoped&gt;&lt;/style&gt;2、 v-if 和 v-show 区别答：v-if按照条件是否渲染，v-show是display的block或none；3、 $route和$router的区别答：$route是“路由信息对象”，包括path，params，hash，query，fullPath，matched，name等路由信息参数。而$router是“路由实例”对象包括了路由的跳转方法，钩子函数等。PS：缺少的案例代码，这几天再补上去。有些地方可能描述的不够清楚，如果有歧义，可能是我理解错了。]]></content>
      <categories>
        <category>Vue</category>
        <category>面试</category>
      </categories>
      <tags>
        <tag>Vue</tag>
        <tag>面试</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[GET和POST的区别]]></title>
    <url>%2F2019%2F02%2F01%2FGET%E5%92%8CPOST%E7%9A%84%E5%8C%BA%E5%88%AB%2F</url>
    <content type="text"><![CDATA[都9102年了，还问GET和POST的区别?1. 前言最近看了一些同学的面经，发现无论什么技术岗位，还是会问到 get 和 post 的区别，而搜索出来的答案并不能让我们装得一手好逼，那就让我们从 HTTP 报文的角度来撸一波，从而搞明白他们的区别。2. 标准答案在开撸之前吗，让我们先看一下标准答案长什么样子 w3school: GET 对比 POST。标准答案很美好，但是在面试的时候把下面的表格甩面试官一脸，估计会装逼不成反被*。注意，并不是说标准答案有误，上述区别在大部分浏览器上是存在的，因为这些浏览器实现了 HTTP 标准。但是，前面列举的只是浏览器实现上的区别，而不是 get 和 post 的本质区别。3. GET 和 POST 报文上的区别先下结论，GET 和 POST 方法没有实质区别，只是报文格式不同。GET 和 POST 只是 HTTP 协议中两种请求方式，而 HTTP 协议是基于 TCP/IP 的应用层协议，无论 GET 还是 POST，用的都是同一个传输层协议，所以在传输上，没有区别。报文格式上，不带参数时，最大区别就是第一行方法名不同POST方法请求报文第一行是这样的 POST /uri HTTP/1.1 \r\nGET方法请求报文第一行是这样的 GET /uri HTTP/1.1 \r\n是的，不带参数时他们的区别就仅仅是报文的前几个字符不同而已带参数时报文的区别呢？ 在约定中，GET 方法的参数应该放在 url 中，POST 方法参数应该放在 body 中举个例子，如果参数是 name=chengqm, age=22。GET 方法简约版报文是这样的:12GET /index.php?name=qiming.c&amp;age=22 HTTP/1.1Host: localhostPOST 方法简约版报文是这样的:1234POST /index.php HTTP/1.1Host: localhostContent-Type: application/x-www-form-urlencodedname=qiming.c&amp;age=22现在我们知道了两种方法本质上是 TCP 连接，没有差别，也就是说，如果我不按规范来也是可以的。我们可以在 URL 上写参数，然后方法使用 POST；也可以在 Body 写参数，然后方法使用 GET。当然，这需要服务端支持。4. 常见问题GET 方法参数写法是固定的吗？在约定中，我们的参数是写在 ? 后面，用 &amp; 分割。我们知道，解析报文的过程是通过获取 TCP 数据，用正则等工具从数据中获取 Header 和 Body，从而提取参数。也就是说，我们可以自己约定参数的写法，只要服务端能够解释出来就行，一种比较流行的写法是 http://www.example.com/user/name/chengqm/age/22。POST 方法比 GET 方法安全？按照网上大部分文章的解释，POST 比 GET 安全，因为数据在地址栏上不可见。然而，从传输的角度来说，他们都是不安全的，因为 HTTP 在网络上是明文传输的，只要在网络节点上捉包，就能完整地获取数据报文。要想安全传输，就只有加密，也就是 HTTPS。GET 方法的长度限制是怎么回事？在网上看到很多关于两者区别的文章都有这一条，提到浏览器地址栏输入的参数是有限的。首先说明一点，HTTP 协议没有 Body 和 URL 的长度限制，对 URL 限制的大多是浏览器和服务器的原因。浏览器原因就不说了，服务器是因为处理长 URL 要消耗比较多的资源，为了性能和安全（防止恶意构造长 URL 来攻击）考虑，会给 URL 长度加限制。POST 方法会产生两个TCP数据包？有些文章中提到，post 会将 header 和 body 分开发送，先发送 header，服务端返回 100 状态码再发送 body。HTTP 协议中没有明确说明 POST 会产生两个 TCP 数据包，而且实际测试(Chrome)发现，header 和 body 不会分开发送。所以，header 和 body 分开发送是部分浏览器或框架的请求方法，不属于 post 必然行为。5. talk is cheap show me the code如果对 get 和 post 报文区别有疑惑，直接起一个 Socket 服务端，然后封装简单的 HTTP 处理方法，直接观察和处理 HTTP 报文，就能一目了然123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263#!/usr/bin/env python# -*- coding: utf-8 -*-import socketHOST, PORT = '', 23333def server_run():listen_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)listen_socket.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)listen_socket.bind((HOST, PORT))listen_socket.listen(1) print('Serving HTTP on port %s ...' %PORT)while True: # 接受连接 client_connection, client_address = listen_socket.accept() handle_request(client_connection)def handle_request(client_connection): # 获取请求报文 request = '' while True: recv_data = client_connection.recv(2400) recv_data = recv_data.decode() request += recv_data if len(recv_data) &lt; 2400: break # 解析首行 first_line_array = request.split('\r\n')[0].split(' ') # 分离 header 和 body space_line_index = request.index('\r\n\r\n') header = request[0: space_line_index] body = request[space_line_index + 4:] # 打印请求报文 print(request)# 返回报文 http_response = b"""\HTTP/1.1 200 OK&lt;!DOCTYPE html&gt;&lt;html&gt;&lt;head&gt; &lt;title&gt;Hello, World!&lt;/title&gt;&lt;/head&gt;&lt;body&gt; &lt;p style="color: green"&gt;Hello, World!&lt;/p&gt;&lt;/body&gt;&lt;/html&gt;""" client_connection.sendall(http_response) client_connection.close()if __name__ == '__main__': server_run()上面代码就是简单的打印请求报文然后返回 HelloWorld 的 html 页面，我们运行起来12[root@chengqm shell]# python httpserver.py Serving HTTP on port 23333 ...然后从浏览器中请求看看打印出来的报文然后就可以手动证明上述说法，比如说要测试 header 和 body 是否分开传输，由于代码没有返回 100 状态码，如果我们 post 请求成功就说明是一起传输的(Chrome/postman)。又比如 w3school 里面说 URL 的最大长度是 2048 个字符，那我们在代码里面加上一句计算 uri 长度的代码12345...# 解析首行first_line_array = request.split('\r\n')[0].split(' ')print('uri长度: %s' % len(first_line_array[1]))...我们用 postman 直接发送超过 2048 个字符的请求看看然后我们可以得出结论，url 长度限制是某些浏览器和服务器的限制，和 HTTP 协议没有关系。到此，我们可以愉快地装逼了 :)END]]></content>
      <categories>
        <category>Get</category>
        <category>Post</category>
      </categories>
      <tags>
        <tag>Get</tag>
        <tag>Post</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[九种跨域方式实现原理]]></title>
    <url>%2F2019%2F01%2F30%2F%E4%B9%9D%E7%A7%8D%E8%B7%A8%E5%9F%9F%E6%96%B9%E5%BC%8F%E5%AE%9E%E7%8E%B0%E5%8E%9F%E7%90%86%2F</url>
    <content type="text"><![CDATA[前 言前后端数据交互经常会碰到请求跨域，什么是跨域，以及有哪几种跨域方式，这是本文要探讨的内容。本文完整的源代码请猛戳github 博客一、什么是跨域？1. 什么是同源策略及其限制内容？同源策略是一种约定，它是浏览器最核心也最基本的安全功能，如果缺少了同源策略，浏览器很容易受到 XSS、CSFR 等攻击。所谓同源是指”协议+域名+端口”三者相同，即便两个不同的域名指向同一个 ip 地址，也非同源。同源策略限制内容有：Cookie、LocalStorage、IndexedDB 等存储性内容DOM 节点AJAX 请求发送后，结果被浏览器拦截了但是有三个标签是允许跨域加载资源：123&lt;img src=XXX&gt;&lt;link href=XXX&gt;&lt;script src=XXX&gt;2.常见跨域场景当协议、子域名、主域名、端口号中任意一个不相同时，都算作不同域。不同域之间相互请求资源，就算作“跨域”。常见跨域场景如下图所示：特别说明两点：第一：如果是协议和端口造成的跨域问题“前台”是无能为力的。第二：在跨域问题上，仅仅是通过“URL 的首部”来识别而不会根据域名对应的 IP 地址是否相同来判断。“URL 的首部”可以理解为“协议, 域名和端口必须匹配”。这里你或许有个疑问：请求跨域了，那么请求到底发出去没有？跨域并不是请求发不出去，请求能发出去，服务端能收到请求并正常返回结果，只是结果被浏览器拦截了。你可能会疑问明明通过表单的方式可以发起跨域请求，为什么 Ajax 就不会?因为归根结底，跨域是为了阻止用户读取到另一个域名下的内容，Ajax 可以获取响应，浏览器认为这不安全，所以拦截了响应。但是表单并不会获取新的内容，所以可以发起跨域请求。同时也说明了跨域并不能完全阻止 CSRF，因为请求毕竟是发出去了。二、跨域解决方案1.jsonp1) JSONP 原理利用 script 标签没有跨域限制的漏洞，网页可以得到从其他来源动态产生的 JSON 数据。JSONP 请求一定需要对方的服务器做支持才可以。2) JSONP 和 AJAX 对比JSONP 和 AJAX 相同，都是客户端向服务器端发送请求，从服务器端获取数据的方式。但 AJAX 属于同源策略，JSONP 属于非同源策略（跨域请求）3) JSONP 优缺点JSONP 优点是简单兼容性好，可用于解决主流浏览器的跨域数据访问的问题。缺点是仅支持 get 方法具有局限性,不安全可能会遭受 XSS 攻击。4) JSONP 的实现流程声明一个回调函数，其函数名(如 show)当做参数值，要传递给跨域请求数据的服务器，函数形参为要获取目标数据(服务器返回的 data)。创建一个script标签，把那个跨域的 API 数据接口地址，赋值给 script 的 src,还要在这个地址中向服务器传递该函数名（可以通过问号传参:?callback=show）。服务器接收到请求后，需要进行特殊的处理：把传递进来的函数名和它需要给你的数据拼接成一个字符串,例如：传递进去的函数名是 show，它准备好的数据是show(‘我不爱你’)。最后服务器把准备的数据通过 HTTP 协议返回给客户端，客户端再调用执行之前声明的回调函数（show），对返回的数据进行操作。在开发中可能会遇到多个 JSONP 请求的回调函数名是相同的，这时候就需要自己封装一个 JSONP 函数。123456789101112131415161718192021222324// index.htmlfunction jsonp(&#123; url, params, callback &#125;) &#123; return new Promise((resolve, reject) =&#123; let script = document.createElement('script') window[callback] = function(data) &#123; resolve(data) document.body.removeChild(script) &#125; params = &#123; ...params, callback &#125; // wd=b&amp;callback=show let arrs = [] for (let key in params) &#123; arrs.push(`$&#123;key&#125;=$&#123;params[key]&#125;`) &#125; script.src = `$&#123;url&#125;?$&#123;arrs.join('&amp;')&#125;` document.body.appendChild(script) &#125;)&#125;jsonp(&#123; url: 'http://localhost:3000/say', params: &#123; wd: 'Iloveyou' &#125;, callback: 'show'&#125;).then(data =&#123; console.log(data)&#125;)上面这段代码相当于向http://localhost:3000/say?wd=Iloveyou&amp;callback=show这个地址请求数据，然后后台返回show(&#39;我不爱你&#39;)，最后会运行 show()这个函数，打印出’我不爱你’12345678910 // server.jslet express = require('express')let app = express()app.get('/say', function(req, res) &#123; let &#123; wd, callback &#125; = req.query console.log(wd) // Iloveyou console.log(callback) // show res.end(`$&#123;callback&#125;('我不爱你')`)&#125;)app.listen(3000)5) jQuery 的 jsonp 形式JSONP 都是 GET 和异步请求的，不存在其他的请求方式和同步请求，且 jQuery 默认就会给 JSONP 的请求清除缓存。12345678910 $.ajax(&#123; url:"http://crossdomain.com/jsonServerResponse", dataType:"jsonp", type:"get",//可以省略 jsonpCallback:"show",//-&gt;自定义传递给服务器的函数名，而不是使用jQuery自动生成的，可省略 jsonp:"callback",//-&gt;把传递函数名的那个形参callback，可省略 success:function (data)&#123; console.log(data); &#125;&#125;);2.corsCORS 需要浏览器和后端同时支持。IE 8 和 9 需要通过 XDomainRequest 来实现。浏览器会自动进行 CORS 通信，实现 CORS 通信的关键是后端。只要后端实现了 CORS，就实现了跨域。服务端设置 Access-Control-Allow-Origin 就可以开启 CORS。 该属性表示哪些域名可以访问资源，如果设置通配符则表示所有网站都可以访问资源。虽然设置 CORS 和前端没什么关系，但是通过这种方式解决跨域问题的话，会在发送请求时出现两种情况，分别为简单请求和复杂请求。1) 简单请求只要同时满足以下两大条件，就属于简单请求条件 1：使用下列方法之一：GETHEADPOST条件 2：Content-Type 的值仅限于下列三者之一：text/plainmultipart/form-dataapplication/x-www-form-urlencoded请求中的任意 XMLHttpRequestUpload 对象均没有注册任何事件监听器； XMLHttpRequestUpload 对象可以使用 XMLHttpRequest.upload 属性访问。2) 复杂请求不符合以上条件的请求就肯定是复杂请求了。复杂请求的 CORS 请求，会在正式通信之前，增加一次 HTTP 查询请求，称为”预检”请求,该请求是 option 方法的，通过该请求来知道服务端是否允许跨域请求。我们用PUT向后台请求时，属于复杂请求，后台需做如下配置：12345678910111213 // 允许哪个方法访问我res.setHeader('Access-Control-Allow-Methods', 'PUT')// 预检的存活时间res.setHeader('Access-Control-Max-Age', 6)// OPTIONS请求不做任何处理if (req.method === 'OPTIONS') &#123; res.end()&#125;// 定义后台返回的内容app.put('/getData', function(req, res) &#123; console.log(req.headers) res.end('我不爱你')&#125;)接下来我们看下一个完整复杂请求的例子，并且介绍下 CORS 请求相关的字段123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657// index.htmllet xhr = new XMLHttpRequest()document.cookie = 'name=xiamen' // cookie不能跨域xhr.withCredentials = true // 前端设置是否带cookiexhr.open('PUT', 'http://localhost:4000/getData', true)xhr.setRequestHeader('name', 'xiamen')xhr.onreadystatechange = function() &#123; if (xhr.readyState === 4) &#123; if ((xhr.status &gt;= 200 &amp;&amp; xhr.status &lt; 300) || xhr.status === 304) &#123; console.log(xhr.response) //得到响应头，后台需设置Access-Control-Expose-Headers console.log(xhr.getResponseHeader('name')) &#125; &#125;&#125;xhr.send()//server1.jslet express = require('express');let app = express();app.use(express.static(__dirname));app.listen(3000);//server2.jslet express = require('express')let app = express()let whitList = ['http://localhost:3000'] //设置白名单app.use(function(req, res, next) &#123; let origin = req.headers.origin if (whitList.includes(origin)) &#123; // 设置哪个源可以访问我 res.setHeader('Access-Control-Allow-Origin', origin) // 允许携带哪个头访问我 res.setHeader('Access-Control-Allow-Headers', 'name') // 允许哪个方法访问我 res.setHeader('Access-Control-Allow-Methods', 'PUT') // 允许携带cookie res.setHeader('Access-Control-Allow-Credentials', true) // 预检的存活时间 res.setHeader('Access-Control-Max-Age', 6) // 允许返回的头 res.setHeader('Access-Control-Expose-Headers', 'name') if (req.method === 'OPTIONS') &#123; res.end() // OPTIONS请求不做任何处理 &#125; &#125; next()&#125;)app.put('/getData', function(req, res) &#123; console.log(req.headers) res.setHeader('name', 'jw') //返回一个响应头，后台需设置 res.end('我不爱你')&#125;)app.get('/getData', function(req, res) &#123; console.log(req.headers) res.end('我不爱你')&#125;)app.use(express.static(__dirname))app.listen(4000)上述代码由http://localhost:3000/index.html向http://localhost:4000/跨域请求，正如我们上面所说的，后端是实现 CORS 通信的关键。3.postMessagepostMessage 是 HTML5 XMLHttpRequest Level 2 中的 API，且是为数不多可以跨域操作的 window 属性之一，它可用于解决以下方面的问题：页面和其打开的新窗口的数据传递多窗口之间消息传递页面与嵌套的 iframe 消息传递上面三个场景的跨域数据传递postMessage()方法允许来自不同源的脚本采用异步方式进行有限的通信，可以实现跨文本档、多窗口、跨域消息传递。otherWindow.postMessage(message, targetOrigin, [transfer]);message: 将要发送到其他 window 的数据。targetOrigin:通过窗口的 origin 属性来指定哪些窗口能接收到消息事件，其值可以是字符串”*”（表示无限制）或者一个 URI。在发送消息的时候，如果目标窗口的协议、主机地址或端口这三者的任意一项不匹配 targetOrigin 提供的值，那么消息就不会被发送；只有三者完全匹配，消息才会被发送。transfer(可选)：是一串和 message 同时传递的 Transferable 对象. 这些对象的所有权将被转移给消息的接收方，而发送一方将不再保有所有权。接下来我们看个例子： http://localhost:3000/a.html页面向http://localhost:4000/b.html传递“我爱你”,然后后者传回”我不爱你”。123456789101112// a.html&lt;iframe src="http://localhost:4000/b.html" frameborder="0" id="frame" onload="load()"&gt;&lt;/iframe//等它加载完触发一个事件//内嵌在http://localhost:3000/a.html&lt;script&gt; function load() &#123; let frame = document.getElementById('frame') frame.contentWindow.postMessage('我爱你', 'http://localhost:4000') //发送数据 window.onmessage = function(e) &#123; //接受返回数据 console.log(e.data) //我不爱你 &#125;&#125;&lt;/script&gt;12345// b.html window.onmessage = function(e) &#123; console.log(e.data) //我爱你 e.source.postMessage('我不爱你', e.origin) &#125;4.websocketWebsocket 是 HTML5 的一个持久化的协议，它实现了浏览器与服务器的全双工通信，同时也是跨域的一种解决方案。WebSocket 和 HTTP 都是应用层协议，都基于 TCP 协议。但是 WebSocket 是一种双向通信协议，在建立连接之后，WebSocket 的 server 与 client 都能主动向对方发送或接收数据。同时，WebSocket 在建立连接时需要借助 HTTP 协议，连接建立好了之后 client 与 server 之间的双向通信就与 HTTP 无关了。原生 WebSocket API 使用起来不太方便，我们使用Socket.io，它很好地封装了 webSocket 接口，提供了更简单、灵活的接口，也对不支持 webSocket 的浏览器提供了向下兼容。我们先来看个例子：本地文件 socket.html 向localhost:3000发生数据和接受数据123456789101112131415161718192021// socket.html&lt;script&gt; let socket = new WebSocket('ws://localhost:3000'); socket.onopen = function () &#123; socket.send('我爱你');//向服务器发送数据 &#125; socket.onmessage = function (e) &#123; console.log(e.data);//接收服务器返回的数据 &#125;&lt;/script&gt;// server.jslet express = require('express');let app = express();let WebSocket = require('ws');//记得安装wslet wss = new WebSocket.Server(&#123;port:3000&#125;);wss.on('connection',function(ws) &#123; ws.on('message', function (data) &#123; console.log(data); ws.send('我不爱你') &#125;);&#125;)5. Node 中间件代理(两次跨域)实现原理：同源策略是浏览器需要遵循的标准，而如果是服务器向服务器请求就无需遵循同源策略。代理服务器，需要做以下几个步骤：接受客户端请求 。将请求 转发给服务器。拿到服务器 响应 数据。将 响应 转发给客户端。我们先来看个例子：本地文件 index.html 文件，通过代理服务器http://localhost:3000向目标服务器http://localhost:4000请求数据。1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465// index.html(http://127.0.0.1:5500) &lt;script src="https://cdn.bootcss.com/jquery/3.3.1/jquery.min.js"&gt;&lt;/script&gt; &lt;script&gt; $.ajax(&#123; url: 'http://localhost:3000', type: 'post', data: &#123; name: 'xiamen', password: '123456' &#125;, contentType: 'application/json;charset=utf-8', success: function(result) &#123; console.log(result) // &#123;"title":"fontend","password":"123456"&#125; &#125;, error: function(msg) &#123; console.log(msg) &#125; &#125;) &lt;/script&gt;// server1.js 代理服务器(http://localhost:3000)const http = require('http')// 第一步：接受客户端请求const server = http.createServer((request, response) =&#123; // 代理服务器，直接和浏览器直接交互，需要设置CORS 的首部字段 response.writeHead(200, &#123; 'Access-Control-Allow-Origin': '*', 'Access-Control-Allow-Methods': '*', 'Access-Control-Allow-Headers': 'Content-Type' &#125;) // 第二步：将请求转发给服务器 const proxyRequest = http .request( &#123; host: '127.0.0.1', port: 4000, url: '/', method: request.method, headers: request.headers &#125;, serverResponse =&#123; // 第三步：收到服务器的响应 var body = '' serverResponse.on('data', chunk =&#123; body += chunk &#125;) serverResponse.on('end', () =&#123; console.log('The data is ' + body) // 第四步：将响应结果转发给浏览器 response.end(body) &#125;) &#125; ) .end()&#125;)server.listen(3000, () =&#123; console.log('The proxyServer is running at http://localhost:3000')&#125;)// server2.js(http://localhost:4000)const http = require('http')const data = &#123; title: 'fontend', password: '123456' &#125;const server = http.createServer((request, response) =&#123; if (request.url === '/') &#123; response.end(JSON.stringify(data)) &#125;&#125;)server.listen(4000, () =&#123; console.log('The server is running at http://localhost:4000')&#125;)上述代码经过两次跨域，值得注意的是浏览器向代理服务器发送请求，也遵循同源策略，最后在 index.html 文件打印出{&quot;title&quot;:&quot;fontend&quot;,&quot;password&quot;:&quot;123456&quot;}6.nginx 反向代理实现原理类似于 Node 中间件代理，需要你搭建一个中转 nginx 服务器，用于转发请求。使用 nginx 反向代理实现跨域，是最简单的跨域方式。只需要修改 nginx 的配置即可解决跨域问题，支持所有浏览器，支持 session，不需要修改任何代码，并且不会影响服务器性能。实现思路：通过 nginx 配置一个代理服务器（域名与 domain1 相同，端口不同）做跳板机，反向代理访问 domain2 接口，并且可以顺便修改 cookie 中 domain 信息，方便当前域 cookie 写入，实现跨域登录。先下载nginx，然后将 nginx 目录下的 nginx.conf 修改如下:1234567891011121314// proxy服务器server &#123; listen 80; server_name www.domain1.com; location / &#123; proxy_pass http://www.domain2.com:8080; #反向代理 proxy_cookie_domain www.domain2.com www.domain1.com; #修改cookie里域名 index index.html index.htm; # 当用webpack-dev-server等中间件代理接口访问nignx时，此时无浏览器参与，故没有同源限制，下面的跨域配置可不启用 add_header Access-Control-Allow-Origin http://www.domain1.com; #当前端只跨域不带cookie时，可为* add_header Access-Control-Allow-Credentials true; &#125;&#125;最后通过命令行nginx -s reload启动 nginx12345678910111213141516171819202122// index.htmlvar xhr = new XMLHttpRequest();// 前端开关：浏览器是否读写cookiexhr.withCredentials = true;// 访问nginx中的代理服务器xhr.open('get', 'http://www.domain1.com:81/?user=admin', true);xhr.send();// server.jsvar http = require('http');var server = http.createServer();var qs = require('querystring');server.on('request', function(req, res) &#123; var params = qs.parse(req.url.substring(2)); // 向前台写cookie res.writeHead(200, &#123; 'Set-Cookie': 'l=a123456;Path=/;Domain=www.domain2.com;HttpOnly' // HttpOnly:脚本无法读取 &#125;); res.write(JSON.stringify(params)); res.end();&#125;);server.listen('8080');console.log('Server is running at port 8080...');7.window.name + iframewindow.name 属性的独特之处：name 值在不同的页面（甚至不同域名）加载后依旧存在，并且可以支持非常长的 name 值（2MB）。其中 a.html 和 b.html 是同域的，都是http://localhost:3000;而 c.html 是http://localhost:40001234567891011121314151617// a.html(http://localhost:3000/b.html)&lt;iframe src="http://localhost:4000/c.html" frameborder="0" onload="load()" id="iframe"&gt;&lt;/iframe&gt;&lt;script&gt; let first = true // onload事件会触发2次，第1次加载跨域页，并留存数据于window.name function load() &#123; if(first)&#123; // 第1次onload(跨域页)成功后，切换到同域代理页面 let iframe = document.getElementById('iframe'); iframe.src = 'http://localhost:3000/b.html'; first = false; &#125;else&#123; // 第2次onload(同域b.html页)成功后，读取同域window.name中数据 console.log(iframe.contentWindow.name); &#125; &#125;&lt;/script&gt;b.html 为中间代理页，与 a.html 同域，内容为空。1234// c.html(http://localhost:4000/c.html) &lt;script&gt; window.name = '我不爱你' &lt;/script&gt;总结：通过 iframe 的 src 属性由外域转向本地域，跨域数据即由 iframe 的 window.name 从外域传递到本地域。这个就巧妙地绕过了浏览器的跨域访问限制，但同时它又是安全操作。8.location.hash + iframe实现原理： a.html 欲与 c.html 跨域相互通信，通过中间页 b.html 来实现。 三个页面，不同域之间利用 iframe 的 location.hash 传值，相同域之间直接 js 访问来通信。具体实现步骤：一开始 a.html 给 c.html 传一个 hash 值，然后 c.html 收到 hash 值后，再把 hash 值传递给 b.html，最后 b.html 将结果放到 a.html 的 hash 值中。同样的，a.html 和 b.html 是同域的，都是http://localhost:3000;而 c.html 是http://localhost:40001234567891011121314151617// a.html &lt;iframe src="http://localhost:4000/c.html#iloveyou"&gt;&lt;/iframe&gt; &lt;script&gt; window.onhashchange = function () &#123; //检测hash的变化 console.log(location.hash); &#125; &lt;/script&gt;// b.html &lt;script&gt; window.parent.parent.location.hash = location.hash //b.html将结果放到a.html的hash值中，b.html可通过parent.parent访问a.html页面 &lt;/script&gt;// c.htmlconsole.log(location.hash); let iframe = document.createElement('iframe'); iframe.src = 'http://localhost:3000/b.html#idontloveyou'; document.body.appendChild(iframe);9.document.domain + iframe该方式只能用于二级域名相同的情况下，比如 a.test.com 和 b.test.com 适用于该方式。只需要给页面添加 document.domain =&#39;test.com&#39; 表示二级域名都相同就可以实现跨域。实现原理：两个页面都通过 js 强制设置 document.domain 为基础主域，就实现了同域。我们看个例子：页面a.zf1.cn:3000/a.html获取页面b.zf1.cn:3000/b.html中 a 的值12345678910111213141516171819// a.html&lt;body&gt; helloa &lt;iframe src="http://b.zf1.cn:3000/b.html" frameborder="0" onload="load()" id="frame"&gt;&lt;/iframe&gt; &lt;script&gt; document.domain = 'zf1.cn' function load() &#123; console.log(frame.contentWindow.a); &#125; &lt;/script&gt;&lt;/body&gt;// b.html&lt;body&gt; hellob &lt;script&gt; document.domain = 'zf1.cn' var a = 100; &lt;/script&gt;&lt;/body&gt;三、总 结CORS 支持所有类型的 HTTP 请求，是跨域 HTTP 请求的根本解决方案JSONP 只支持 GET 请求，JSONP 的优势在于支持老式浏览器，以及可以向不支持 CORS 的网站请求数据。不管是 Node 中间件代理还是 nginx 反向代理，主要是通过同源策略对服务器不加限制。日常工作中，用得比较多的跨域方案是 cors 和 nginx 反向代理参考文章跨域资源共享 CORS 详解前端面试之道window.postMessage前端常见跨域解决方案（全）深入跨域问题(4) - 利用代理解决跨域]]></content>
      <categories>
        <category>跨域</category>
        <category>Javascript</category>
      </categories>
      <tags>
        <tag>Javascript</tag>
        <tag>跨域</tag>
        <tag>jsonp</tag>
        <tag>cors</tag>
        <tag>postMessage</tag>
        <tag>websocket</tag>
        <tag>Node中间件代理</tag>
        <tag>nginx反向代理</tag>
        <tag>window.name + iframe</tag>
        <tag>location.hash + iframe</tag>
        <tag>document.domain + iframe</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[JS数字和字符串之间相互转化的纠纷]]></title>
    <url>%2F2019%2F01%2F23%2F5%2F</url>
    <content type="text"><![CDATA[JS数字和字符串之间相互转化的纠纷一、字符串转数字1. parseInt() 函数parseInt() 函数从string的开始解析，返回一个整数parseInt(‘123’) : 返回 123；parseInt(‘1234xxx’) : 返回 1234；parseInt(‘123.456’) : 返回 123；parseInt(‘1 2 3’) : 返回 1；字符串的情况，自会返回第一个数parseInt(‘bb cc 12’) : 返回 NaN；字符串第一个不是数，返回nanparseInt(‘123’ 321) : 返回 321；parseInt(“AF”, 16); 返回 175；会自动把二进制十六进制八进制的转化成数字如果解析不到数字，则将返回一个NaN的值，可以用isNaN()函数来检测；parseFloat()只会返回小数2. 字符前加“+”var n =+”123”:返回 1233. 字符加“*”var n =”123”*1:返回 1234. 字符串数组分割增加var arr = str.split(“,”) 一个字符串组，用，都分割成多个b = a.join(“-“);-是指定的分割符，可以随意，将数组转化成一个字符串5. 字符串和数字相加返回字符串console.log(12+”12”):返回”1212”console.log(‘12’ + ‘34’)返回’1234’console.log(‘12’ + 34 ) 返回’1234’console.log(12 + ‘34’’）返回1234’console.log(12 + 34 ) 返回466. 当字符串和多个数字相加，用括号扩起来(&quot;&lt;img src=&#39;images/&quot; + 2 + 1 + &quot;.jpg&#39;&gt;&quot;) 返回(&quot;&lt;img src=&#39;images/&quot; + 21 + &quot;.jpg&#39;&gt;&quot;)如果想转成3(&quot;&lt;img src=&#39;images/&quot; + （2+1）+ &quot;.jpg&#39;&gt;&quot;) 返回(&quot;&lt;img src=&#39;images/&quot; + 3 + &quot;.jpg&#39;&gt;&quot;)如果前面是数字相加，则可以先把数字加起来var a = 10 + 20 + ‘abc’ + ‘cd’; 返回a的值为:30abccd7. eval（）如果想进行字符串的运算eval(“x=10;y=20;document.write(x*y)”) 返回200document.write(eval(“2+2”)) 返回4var x=10document.write(eval(x+17） 返回27二、数字转字符串1. tostring（）n = 100x = n.toString() =&gt; “100”或是（100）toString() //tostring（2/16/8）还可以实现进制的转化2. 数字+任意字符串“”var n = 1234;var nn = 1234+””关于字符串判断字符串是否包含 包含返回下标 不包含返回-1var i = str.indexOf(“x”)最后一次下标的字符串的字符串var i = str .lastIndexOf(“”)转化大小写str.toUpperCase() 转大写str.tolowerCase() 转小写截取字符串 字符串.substr（”从哪开始”,”截取几个”）str.substr(0,5)]]></content>
      <categories>
        <category>Javascript</category>
      </categories>
      <tags>
        <tag>Javascript</tag>
        <tag>字符串</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Hexo文章简单加密访问]]></title>
    <url>%2F2019%2F01%2F21%2F0%2F</url>
    <content type="text"><![CDATA[即使是最简单的密码功能也足以阻止90%的访问者.一、前言一开始使用Hexo的时候，是喜欢它的简单：因为可以直接编译成纯静态文件，方便部署。可是在使用过程中，又发现诸多不便：也因为它全是纯静态页面。突发奇想，能不能给文章加上一个加密访问的功能……在经过实践之后，运用到自己博客中，发现有不少的访客对这个功能甚是感兴趣，所以也就在这里找个时间写写自己加密的小诀窍吧算是。二、原理由于 Hexo 最终编译出来的文件是纯静态的，也就意味着文章的所有信息其实还是原封不动展示在页面中的，当你输入一篇文章的网址，所有的内容就已经跟随网络传输过来了。那我博客使用的加密是怎么实现的呢？这就要讲到 js 的阻塞机制了，在以往的经验中，当页面中有调用alert();函数的时候，整个页面会停止运行，直到你点击确定之后，页面的中的代码才会继续执行下去。我们这里需要的也是这样一个假象，阻止整个页面的渲染，直到你输入了正确的密码才能让页面继续渲染实际的文章。可是alert只有提醒的功能，没有输入的功能，所以这里要用到的是promt函数。例子参见如下：12var password = promt('请输入文章密码');alert(password);三、实现究竟要把上述代码加在哪里呢？找到themes-&gt;next-&gt;layout-&gt;_partials-&gt;head.swig文件。按道理是添加在任何地方都行，但是推荐加在所有的&lt;meta&gt;标签之后，个人建议，仅做参考。以下是我加的代码：12345678910&lt;script&gt; (function()&#123; if('&#123;&#123; page.password &#125;&#125;')&#123; if (prompt('请输入文章密码','') !== '&#123;&#123; page.password &#125;&#125;')&#123; alert('密码错误！'); history.back(); &#125; &#125; &#125;)();&lt;/script&gt;之后，在你想要加密的文章的头文件里添加上password: 123456（ps：123456是你想设置的密码）即可。注意，这里仅针对Hexo平台的next主题。但是，它的代码和思想是通用的，你在Hexo的其他主题，甚至是Jekyll的主题里也是可以做到的，只是要摆放的位置会不一样。如果你好奇page.password是什么东西，那么恭喜你，你对 Hexo 的结构还是很熟悉的。page这个变量就是你在hexo new的时候生成文件中最顶部的东西，以下我给出这篇文章的头部参考：12345678910---title: Hexo文章简单加密访问date: 2019-01-21 16:09:45tags: - 加密 - Hexocategories: - Hexopassword: 123456---这样我们就好像使用静态页面完成了部分只有动态页面能完成的东西。四、总结本来只是简单的纯静态页面，但是经历不断的更新和改进，便有了静态页面统计访问量的工具；有了静态页面添加评论的工具；甚至有了静态页面进行搜索的功能等等。个人想出来的静态页面加密功能根本算不上技术上的创新，只能说是一点小技巧的应用吧，小技巧也能迷惑住大家的眼睛，也算是喜事一件。五、后记已将博客加密功能改成使用 hexo-blog-encrypt 插件加密，最新密码功能查看效果，具体请参见我的博客文档附上传送门：https://chen-95.gitee.io/2019/01/25/4/]]></content>
      <categories>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>加密</tag>
        <tag>Hexo</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[野狗云帐号分享]]></title>
    <url>%2F2019%2F01%2F21%2F%E9%87%8E%E7%8B%97%E4%BA%91%E5%B8%90%E5%8F%B7%E5%88%86%E4%BA%AB%2F</url>
    <content type="text"><![CDATA[请输入密码获取野狗云帐号... Incorrect Password! No content to display! U2FsdGVkX18vjuDUn9WUdnL8TEmGOKrcNf97CTAUCy6TjSx2PxGyhsvYoVir8frp5iOaen+pQ29Q53/LAz51OGtRCp/NgRMWugB3Jj4A+V+CncuNAQwvkuxcNqr7737WRqNVtISMNVSonTG9xPjncf8bzbfgkidTg2h7NJcqgWM4MugqZ1sNldL4q/6tuua58P2LjtAJ4kMRxciBmj1DsZLDwZJd+sHA1t40DyBsxZMkkGfnTZFe8OdDsYIsDPVPR/5syTSKmkpNhYkU4DuK542RLLC9qdKz8s5fjrjqr8+AHQYnkhMcDIUaZTV1SkcSwuEhPm4BncR7XLC0SP3GJ0r0tUo41qthcIhTiqd2etnWWxIOb8YqeexMYDb2kowtkutGyIRInRTcOOW6E105Zq4R6lhiTe7AcfKuDaspOQsnJviYIuM7BL6vsGRVdhJ0smLiSuN+GsBjK8GPoUUu1fzq6xHKpCMLp2zeGASm4LtXA2mQswRgNoiVNA/wCKvf9ofzhnt8s0dxy2f1M5HG3TnLPHyvmeh/12D/Mh+uu97p0sFomTUXDDp8hcnYx7H6NrOp/dQM6xPjZPw6U+8fiQDUGT1EnmtY3t+OnTTy8tVUNy4DBnohVJxKU3u55ah5JFggSLhrGVrR/bofp/Kn2kiNTMWldvql3QcY5kbGSRTbleAfKLNNpv888bOuc7/2OTk8lkzDbbb2nVYEJo6eZ1O7iMmt+ZRBYfc/Ce6f0ezTPevs8ESC4MijwdvsyAg5QK4uikHKeLNksDSPn9NmkZp+kP6BJ8pHGp/RCjMHKT8UYTqy3FOPkZ9XKHqwv7LfI3xErYN5W3fbJnqanWNanBrc1RLuzHZ90ERFyb1OD/l0eC3wMtZmgG+s1YIOXzktar0LNzoORMi5B9yjPz8108udbpi1zQtKLqMvSJSbOJE+g8GBNBk2PY1cMHS6UYKiGZmqs3GsCeNQ2yZU6auOVBavoyqXm+i3kTxM4NRU2WMMw+KSMD4k5DD6VWobqI1AnmwqDiB1FqtN9brXtqY3fVID125bGCRR7EGj0r/QFURGXuVlGxrIm8bmCLxaFQw1kpVB0mzl/mtWa7jMa5vQMT/ZxfnPylDKW51kn6CIXNDVlvOO98xuGc8gShuamzmFkdo6fJs1vBLjL52EvJbzjYaB5ymjzvIb5V6geiFBmkY=]]></content>
      <categories>
        <category>野狗云</category>
      </categories>
      <tags>
        <tag>野狗云</tag>
        <tag>帐号</tag>
        <tag>分享</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Hexo NexT主题添加点击爱心效果]]></title>
    <url>%2F2019%2F01%2F12%2F3%2F</url>
    <content type="text"><![CDATA[1.创建js文件在/themes/next/source/js/src下新建文件 clicklove.js ，接着把该链接下的代码拷贝粘贴到 clicklove.js 文件中。代码如下：1!function(e,t,a)&#123;function n()&#123;c(".heart&#123;width: 10px;height: 10px;position: fixed;background: #f00;transform: rotate(45deg);-webkit-transform: rotate(45deg);-moz-transform: rotate(45deg);&#125;.heart:after,.heart:before&#123;content: '';width: inherit;height: inherit;background: inherit;border-radius: 50%;-webkit-border-radius: 50%;-moz-border-radius: 50%;position: fixed;&#125;.heart:after&#123;top: -5px;&#125;.heart:before&#123;left: -5px;&#125;"),o(),r()&#125;function r()&#123;for(var e=0;e&lt;d.length;e++)d[e].alpha&lt;=0?(t.body.removeChild(d[e].el),d.splice(e,1)):(d[e].y--,d[e].scale+=.004,d[e].alpha-=.013,d[e].el.style.cssText="left:"+d[e].x+"px;top:"+d[e].y+"px;opacity:"+d[e].alpha+";transform:scale("+d[e].scale+","+d[e].scale+") rotate(45deg);background:"+d[e].color+";z-index:99999");requestAnimationFrame(r)&#125;function o()&#123;var t="function"==typeof e.onclick&amp;&amp;e.onclick;e.onclick=function(e)&#123;t&amp;&amp;t(),i(e)&#125;&#125;function i(e)&#123;var a=t.createElement("div");a.className="heart",d.push(&#123;el:a,x:e.clientX-5,y:e.clientY-5,scale:1,alpha:1,color:s()&#125;),t.body.appendChild(a)&#125;function c(e)&#123;var a=t.createElement("style");a.type="text/css";try&#123;a.appendChild(t.createTextNode(e))&#125;catch(t)&#123;a.styleSheet.cssText=e&#125;t.getElementsByTagName("head")[0].appendChild(a)&#125;function s()&#123;return"rgb("+~~(255*Math.random())+","+~~(255*Math.random())+","+~~(255*Math.random())+")"&#125;var d=[];e.requestAnimationFrame=function()&#123;return e.requestAnimationFrame||e.webkitRequestAnimationFrame||e.mozRequestAnimationFrame||e.oRequestAnimationFrame||e.msRequestAnimationFrame||function(e)&#123;setTimeout(e,1e3/60)&#125;&#125;(),n()&#125;(window,document);2.修改_layout.swig在\themes\next\layout\_layout.swig文件末尾添加：12&lt;!-- 页面点击小红心 --&gt;&lt;script type="text/javascript" src="/js/src/clicklove.js"&gt;&lt;/script&gt;]]></content>
      <categories>
        <category>Javascript</category>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
        <tag>Next</tag>
        <tag>点击效果</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[CSS实现向右导航icon]]></title>
    <url>%2F2019%2F01%2F08%2FCSS%E5%AE%9E%E7%8E%B0%E5%90%91%E5%8F%B3%E5%AF%BC%E8%88%AAicon%2F</url>
    <content type="text"><![CDATA[对于看过CSS绘制三角形的童鞋来说，实现向右导航 icon 很好理解，可能大家稍加即可知晓实现方式。是的，只需要设置一个元素的相邻 border，之后旋转一下即可。HTML1&lt;span id="right-arrow"&gt;&lt;/span&gt;CSS12345678#right-arrow &#123; display: inline-block; width: 17px; height: 17px; border-top: 2px solid red; border-right: 2px solid red; transform: rotate(45deg);&#125;解析给 span 元素设置合适的宽高，到达要求的效果大小设置元素的两个相邻 border，宽度合适即可将元素旋转 45 度即为向右导航 icon 效果border 的颜色为 icon 的颜色运行效果]]></content>
      <categories>
        <category>css</category>
      </categories>
      <tags>
        <tag>css</tag>
        <tag>icon</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[CSS 实现关闭 icon]]></title>
    <url>%2F2019%2F01%2F08%2FCSS%E5%AE%9E%E7%8E%B0%E5%85%B3%E9%97%ADicon%2F</url>
    <content type="text"><![CDATA[本文介绍关闭 icon 的实现。关闭 icon 有两条线组成，所以很简单的设想就是两条横线，分别旋转不同角度即可。HTML1&lt;span id="close"&gt;&lt;/span&gt;CSS123456789101112131415#close &#123; display: inline-block; width: 23px; height: 2px; background: red; transform: rotate(45deg);&#125;#close::after &#123; content: ''; display: block; width: 23px; height: 2px; background: red; transform: rotate(-90deg);&#125;解析给 span 元素设置合适的宽高，到达要求的效果大小旋转 span 元素，实现一条线的效果添加 ::after 伪元素，设置和 span 相同的宽高（注意此处 display 值应为 block，否则设置宽高无效）旋转 ::after 伪元素。由于基准元素 span 已经旋转，伪元素旋转参考点不是水平坐标系，而是旋转后的 span 元素，将伪元素旋转 90 度或 -90 度均可其中设置的背景色即为 icon 的颜色运行效果]]></content>
      <categories>
        <category>css</category>
      </categories>
      <tags>
        <tag>css</tag>
        <tag>icon</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[匿名函数、嵌套函数、闭包是怎么回事？]]></title>
    <url>%2F2019%2F01%2F08%2F2%2F</url>
    <content type="text"><![CDATA[匿名函数： 指的是 没有函数名的函数function (){ console.log(&#39;匿名函数&#39;) }嵌套函数呢 ？ 请看代码：12345678function test ()&#123; var sum = 20; //内嵌函数 demo = function()&#123; alert(sum); console.log('我是嵌套函数'); &#125;&#125;如代码所示，函数内部嵌入函数，称之为嵌套函数。那闭包又是什么呢？不多说，看代码1234567891011function demo()&#123; var num = 0; // 返回一个函数 return function()&#123; alert( num+1 ); &#125; &#125;//将返回的函数赋值给 add 变量var add = demo();// add就是一个闭包add();这么看，感觉像是，只要是嵌套函数，且能访问上一层作用域的变量就是闭包。 是这样吗？我们知道，js中，分为全局作用域，局部作用域，每个函数也就相等于一个局部作用域。同理，变量，也分为全局变量和局部变量。 有什么区别呢？在浏览器中，全局作用域对象是 window，也就是说页面一打开，window对象就存在。在js中，每个函数是局部作用域，局部变量会随着 函数的执行创建和执行完毕后销毁。而全局变量，只要页面不关闭，则会一直存在。并不会随着函数的执行完毕而销毁。那么和闭包有什么关系呢？在 “javaScript高级程序” 这本书有讲到过“作用域链”的概念, 特殊之处，在于函数内部可以直接读取全局变量。而函数外部却不能读取函数内部的变量。也就是说，作用域链就像只能往上不能往下的阶梯。我们看段代码理解12345678var name = "window";var age = 20;dmeo();function demo()&#123; var age = 21; console.log(name); // window console.log(age); //21&#125;在执行 demo() 函数时，就会创建一个通往全局作用域链，保存着当前作用域的变量，以便查找返回。在执行 console.log( name ) 这段代码时，会搜寻当前作用域( demo函数 ) 中是否存在 name 变量，因当前作用域不存在，所以在往上找到全局变量 name ，因此返回 window;在执行 console.log( age ) 这段代码时， 也会搜寻 当前作用域(demo函数) 中是否存在 age 变量，因为存在，所以返回 21。既然机制是只能往上读， 那么考虑一个问题，怎么在外部读取内部函数的变量呢？办法不是没有，稍微变通下即可。这就需要用到闭包的概念，12345678910111213function f1()&#123; var num = 0 ; //定义内部函数 function f2()&#123; return num + 1; &#125; //返回 f2函数引用 retufn f2; &#125;// bar 变量也指向 f2 函数，在此也是一个闭包var bar = f1();//执行bar(); // 1;我们知道，函数中的变量会随着函数的执行完毕后会被销毁。而如上代码，f1()函数执行完毕后，将f2函数赋值给一个全局变量，而f2函数的变量又依赖f1的num变量，因此，f1中的num变量并不会随着f1的函数执行完毕后而销毁。1234567891011var name = "the window"; var obj = &#123; name : 'the obj', getName : function()&#123; return funciton()&#123; return this.name; &#125; &#125;&#125;//执行 getName返回的函数alert(obj.getName()());我们看调用函数分析， 分成两部分执行。 先来看 obj.getName(); 此时getName函数由 obj对象调用，因此this的值是 obj。 但此时并不是输出而是返回一个函数。再加上一个(); 执行返回的函数，但此时返回的函数并没有任何对象调用，当不是对象本身调用，this的值会被提升到 window对象。因此输出的是 “the window”1234567891011var name = "the Window";var obj = &#123; name : "the obj", getName : funciton()&#123; var that = this; return function()&#123; return that.name; &#125; &#125;&#125;//执行 getName 返回的函数alert(obj.getName()());看了上面的题目，这个应该小意思吧，你说呢 ？]]></content>
      <categories>
        <category>Javascript</category>
      </categories>
      <tags>
        <tag>Javascript</tag>
        <tag>匿名函数</tag>
        <tag>嵌套函数</tag>
        <tag>闭包</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Javascript 535种方式！实现页面重载]]></title>
    <url>%2F2019%2F01%2F05%2F1%2F</url>
    <content type="text"><![CDATA[下文整理了535种方法来实现刷新一下页面，没有验证，权做餐后谈资收藏一下！location = locationlocation = location.hreflocation = window.locationlocation = self.locationlocation = window.location.hreflocation = self.location.hreflocation = location['href']location = window['location']location = window['location'].hreflocation = window['location']['href']location = window.location['href']location = self['location']location = self['location'].hreflocation = self['location']['href']location = self.location['href']location.assign(location)location.replace(location)window.location.assign(location)window.location.replace(location)self.location.assign(location)self.location.replace(location)location['assign'](location)location['replace'](location)window.location['assign'](location)window.location['replace'](location)window['location'].assign(location)window['location'].replace(location)window['location']['assign'](location)window['location']['replace'](location)self.location['assign'](location)self.location['replace'](location)self['location'].assign(location)self['location'].replace(location)self['location']['assign'](location)self['location']['replace'](location)location.href = locationlocation.href = location.hreflocation.href = window.locationlocation.href = self.locationlocation.href = window.location.hreflocation.href = self.location.hreflocation.href = location['href']location.href = window['location']location.href = window['location'].hreflocation.href = window['location']['href']location.href = window.location['href']location.href = self['location']location.href = self['location'].hreflocation.href = self['location']['href']location.href = self.location['href']location.assign(location.href)location.replace(location.href)window.location.assign(location.href)window.location.replace(location.href)self.location.assign(location.href)self.location.replace(location.href)location['assign'](location.href)location['replace'](location.href)window.location['assign'](location.href)window.location['replace'](location.href)window['location'].assign(location.href)window['location'].replace(location.href)window['location']['assign'](location.href)window['location']['replace'](location.href)self.location['assign'](location.href)self.location['replace'](location.href)self['location'].assign(location.href)self['location'].replace(location.href)self['location']['assign'](location.href)self['location']['replace'](location.href)window.location = locationwindow.location = location.hrefwindow.location = window.locationwindow.location = self.locationwindow.location = window.location.hrefwindow.location = self.location.hrefwindow.location = location['href']window.location = window['location']window.location = window['location'].hrefwindow.location = window['location']['href']window.location = window.location['href']window.location = self['location']window.location = self['location'].hrefwindow.location = self['location']['href']window.location = self.location['href']location.assign(window.location)location.replace(window.location)window.location.assign(window.location)window.location.replace(window.location)self.location.assign(window.location)self.location.replace(window.location)location['assign'](window.location)location['replace'](window.location)window.location['assign'](window.location)window.location['replace'](window.location)window['location'].assign(window.location)window['location'].replace(window.location)window['location']['assign'](window.location)window['location']['replace'](window.location)self.location['assign'](window.location)self.location['replace'](window.location)self['location'].assign(window.location)self['location'].replace(window.location)self['location']['assign'](window.location)self['location']['replace'](window.location)self.location = locationself.location = location.hrefself.location = window.locationself.location = self.locationself.location = window.location.hrefself.location = self.location.hrefself.location = location['href']self.location = window['location']self.location = window['location'].hrefself.location = window['location']['href']self.location = window.location['href']self.location = self['location']self.location = self['location'].hrefself.location = self['location']['href']self.location = self.location['href']location.assign(self.location)location.replace(self.location)window.location.assign(self.location)window.location.replace(self.location)self.location.assign(self.location)self.location.replace(self.location)location['assign'](self.location)location['replace'](self.location)window.location['assign'](self.location)window.location['replace'](self.location)window['location'].assign(self.location)window['location'].replace(self.location)window['location']['assign'](self.location)window['location']['replace'](self.location)self.location['assign'](self.location)self.location['replace'](self.location)self['location'].assign(self.location)self['location'].replace(self.location)self['location']['assign'](self.location)self['location']['replace'](self.location)window.location.href = locationwindow.location.href = location.hrefwindow.location.href = window.locationwindow.location.href = self.locationwindow.location.href = window.location.hrefwindow.location.href = self.location.hrefwindow.location.href = location['href']window.location.href = window['location']window.location.href = window['location'].hrefwindow.location.href = window['location']['href']window.location.href = window.location['href']window.location.href = self['location']window.location.href = self['location'].hrefwindow.location.href = self['location']['href']window.location.href = self.location['href']location.assign(window.location.href)location.replace(window.location.href)window.location.assign(window.location.href)window.location.replace(window.location.href)self.location.assign(window.location.href)self.location.replace(window.location.href)location['assign'](window.location.href)location['replace'](window.location.href)window.location['assign'](window.location.href)window.location['replace'](window.location.href)window['location'].assign(window.location.href)window['location'].replace(window.location.href)window['location']['assign'](window.location.href)window['location']['replace'](window.location.href)self.location['assign'](window.location.href)self.location['replace'](window.location.href)self['location'].assign(window.location.href)self['location'].replace(window.location.href)self['location']['assign'](window.location.href)self['location']['replace'](window.location.href)self.location.href = locationself.location.href = location.hrefself.location.href = window.locationself.location.href = self.locationself.location.href = window.location.hrefself.location.href = self.location.hrefself.location.href = location['href']self.location.href = window['location']self.location.href = window['location'].hrefself.location.href = window['location']['href']self.location.href = window.location['href']self.location.href = self['location']self.location.href = self['location'].hrefself.location.href = self['location']['href']self.location.href = self.location['href']location.assign(self.location.href)location.replace(self.location.href)window.location.assign(self.location.href)window.location.replace(self.location.href)self.location.assign(self.location.href)self.location.replace(self.location.href)location['assign'](self.location.href)location['replace'](self.location.href)window.location['assign'](self.location.href)window.location['replace'](self.location.href)window['location'].assign(self.location.href)window['location'].replace(self.location.href)window['location']['assign'](self.location.href)window['location']['replace'](self.location.href)self.location['assign'](self.location.href)self.location['replace'](self.location.href)self['location'].assign(self.location.href)self['location'].replace(self.location.href)self['location']['assign'](self.location.href)self['location']['replace'](self.location.href)location['href'] = locationlocation['href'] = location.hreflocation['href'] = window.locationlocation['href'] = self.locationlocation['href'] = window.location.hreflocation['href'] = self.location.hreflocation['href'] = location['href']location['href'] = window['location']location['href'] = window['location'].hreflocation['href'] = window['location']['href']location['href'] = window.location['href']location['href'] = self['location']location['href'] = self['location'].hreflocation['href'] = self['location']['href']location['href'] = self.location['href']location.assign(location['href'])location.replace(location['href'])window.location.assign(location['href'])window.location.replace(location['href'])self.location.assign(location['href'])self.location.replace(location['href'])location['assign'](location['href'])location['replace'](location['href'])window.location['assign'](location['href'])window.location['replace'](location['href'])window['location'].assign(location['href'])window['location'].replace(location['href'])window['location']['assign'](location['href'])window['location']['replace'](location['href'])self.location['assign'](location['href'])self.location['replace'](location['href'])self['location'].assign(location['href'])self['location'].replace(location['href'])self['location']['assign'](location['href'])self['location']['replace'](location['href'])window['location'] = locationwindow['location'] = location.hrefwindow['location'] = window.locationwindow['location'] = self.locationwindow['location'] = window.location.hrefwindow['location'] = self.location.hrefwindow['location'] = location['href']window['location'] = window['location']window['location'] = window['location'].hrefwindow['location'] = window['location']['href']window['location'] = window.location['href']window['location'] = self['location']window['location'] = self['location'].hrefwindow['location'] = self['location']['href']window['location'] = self.location['href']location.assign(window['location'])location.replace(window['location'])window.location.assign(window['location'])window.location.replace(window['location'])self.location.assign(window['location'])self.location.replace(window['location'])location['assign'](window['location'])location['replace'](window['location'])window.location['assign'](window['location'])window.location['replace'](window['location'])window['location'].assign(window['location'])window['location'].replace(window['location'])window['location']['assign'](window['location'])window['location']['replace'](window['location'])self.location['assign'](window['location'])self.location['replace'](window['location'])self['location'].assign(window['location'])self['location'].replace(window['location'])self['location']['assign'](window['location'])self['location']['replace'](window['location'])window['location'].href = locationwindow['location'].href = location.hrefwindow['location'].href = window.locationwindow['location'].href = self.locationwindow['location'].href = window.location.hrefwindow['location'].href = self.location.hrefwindow['location'].href = location['href']window['location'].href = window['location']window['location'].href = window['location'].hrefwindow['location'].href = window['location']['href']window['location'].href = window.location['href']window['location'].href = self['location']window['location'].href = self['location'].hrefwindow['location'].href = self['location']['href']window['location'].href = self.location['href']location.assign(window['location'].href)location.replace(window['location'].href)window.location.assign(window['location'].href)window.location.replace(window['location'].href)self.location.assign(window['location'].href)self.location.replace(window['location'].href)location['assign'](window['location'].href)location['replace'](window['location'].href)window.location['assign'](window['location'].href)window.location['replace'](window['location'].href)window['location'].assign(window['location'].href)window['location'].replace(window['location'].href)window['location']['assign'](window['location'].href)window['location']['replace'](window['location'].href)self.location['assign'](window['location'].href)self.location['replace'](window['location'].href)self['location'].assign(window['location'].href)self['location'].replace(window['location'].href)self['location']['assign'](window['location'].href)self['location']['replace'](window['location'].href)window['location']['href'] = locationwindow['location']['href'] = location.hrefwindow['location']['href'] = window.locationwindow['location']['href'] = self.locationwindow['location']['href'] = window.location.hrefwindow['location']['href'] = self.location.hrefwindow['location']['href'] = location['href']window['location']['href'] = window['location']window['location']['href'] = window['location'].hrefwindow['location']['href'] = window['location']['href']window['location']['href'] = window.location['href']window['location']['href'] = self['location']window['location']['href'] = self['location'].hrefwindow['location']['href'] = self['location']['href']window['location']['href'] = self.location['href']location.assign(window['location']['href'])location.replace(window['location']['href'])window.location.assign(window['location']['href'])window.location.replace(window['location']['href'])self.location.assign(window['location']['href'])self.location.replace(window['location']['href'])location['assign'](window['location']['href'])location['replace'](window['location']['href'])window.location['assign'](window['location']['href'])window.location['replace'](window['location']['href'])window['location'].assign(window['location']['href'])window['location'].replace(window['location']['href'])window['location']['assign'](window['location']['href'])window['location']['replace'](window['location']['href'])self.location['assign'](window['location']['href'])self.location['replace'](window['location']['href'])self['location'].assign(window['location']['href'])self['location'].replace(window['location']['href'])self['location']['assign'](window['location']['href'])self['location']['replace'](window['location']['href'])window.location['href'] = locationwindow.location['href'] = location.hrefwindow.location['href'] = window.locationwindow.location['href'] = self.locationwindow.location['href'] = window.location.hrefwindow.location['href'] = self.location.hrefwindow.location['href'] = location['href']window.location['href'] = window['location']window.location['href'] = window['location'].hrefwindow.location['href'] = window['location']['href']window.location['href'] = window.location['href']window.location['href'] = self['location']window.location['href'] = self['location'].hrefwindow.location['href'] = self['location']['href']window.location['href'] = self.location['href']location.assign(window.location['href'])location.replace(window.location['href'])window.location.assign(window.location['href'])window.location.replace(window.location['href'])self.location.assign(window.location['href'])self.location.replace(window.location['href'])location['assign'](window.location['href'])location['replace'](window.location['href'])window.location['assign'](window.location['href'])window.location['replace'](window.location['href'])window['location'].assign(window.location['href'])window['location'].replace(window.location['href'])window['location']['assign'](window.location['href'])window['location']['replace'](window.location['href'])self.location['assign'](window.location['href'])self.location['replace'](window.location['href'])self['location'].assign(window.location['href'])self['location'].replace(window.location['href'])self['location']['assign'](window.location['href'])self['location']['replace'](window.location['href'])self['location'] = locationself['location'] = location.hrefself['location'] = window.locationself['location'] = self.locationself['location'] = window.location.hrefself['location'] = self.location.hrefself['location'] = location['href']self['location'] = window['location']self['location'] = window['location'].hrefself['location'] = window['location']['href']self['location'] = window.location['href']self['location'] = self['location']self['location'] = self['location'].hrefself['location'] = self['location']['href']self['location'] = self.location['href']location.assign(self['location'])location.replace(self['location'])window.location.assign(self['location'])window.location.replace(self['location'])self.location.assign(self['location'])self.location.replace(self['location'])location['assign'](self['location'])location['replace'](self['location'])window.location['assign'](self['location'])window.location['replace'](self['location'])window['location'].assign(self['location'])window['location'].replace(self['location'])window['location']['assign'](self['location'])window['location']['replace'](self['location'])self.location['assign'](self['location'])self.location['replace'](self['location'])self['location'].assign(self['location'])self['location'].replace(self['location'])self['location']['assign'](self['location'])self['location']['replace'](self['location'])self['location'].href = locationself['location'].href = location.hrefself['location'].href = window.locationself['location'].href = self.locationself['location'].href = window.location.hrefself['location'].href = self.location.hrefself['location'].href = location['href']self['location'].href = window['location']self['location'].href = window['location'].hrefself['location'].href = window['location']['href']self['location'].href = window.location['href']self['location'].href = self['location']self['location'].href = self['location'].hrefself['location'].href = self['location']['href']self['location'].href = self.location['href']location.assign(self['location'].href)location.replace(self['location'].href)window.location.assign(self['location'].href)window.location.replace(self['location'].href)self.location.assign(self['location'].href)self.location.replace(self['location'].href)location['assign'](self['location'].href)location['replace'](self['location'].href)window.location['assign'](self['location'].href)window.location['replace'](self['location'].href)window['location'].assign(self['location'].href)window['location'].replace(self['location'].href)window['location']['assign'](self['location'].href)window['location']['replace'](self['location'].href)self.location['assign'](self['location'].href)self.location['replace'](self['location'].href)self['location'].assign(self['location'].href)self['location'].replace(self['location'].href)self['location']['assign'](self['location'].href)self['location']['replace'](self['location'].href)self['location']['href'] = locationself['location']['href'] = location.hrefself['location']['href'] = window.locationself['location']['href'] = self.locationself['location']['href'] = window.location.hrefself['location']['href'] = self.location.hrefself['location']['href'] = location['href']self['location']['href'] = window['location']self['location']['href'] = window['location'].hrefself['location']['href'] = window['location']['href']self['location']['href'] = window.location['href']self['location']['href'] = self['location']self['location']['href'] = self['location'].hrefself['location']['href'] = self['location']['href']self['location']['href'] = self.location['href']location.assign(self['location']['href'])location.replace(self['location']['href'])window.location.assign(self['location']['href'])window.location.replace(self['location']['href'])self.location.assign(self['location']['href'])self.location.replace(self['location']['href'])location['assign'](self['location']['href'])location['replace'](self['location']['href'])window.location['assign'](self['location']['href'])window.location['replace'](self['location']['href'])window['location'].assign(self['location']['href'])window['location'].replace(self['location']['href'])window['location']['assign'](self['location']['href'])window['location']['replace'](self['location']['href'])self.location['assign'](self['location']['href'])self.location['replace'](self['location']['href'])self['location'].assign(self['location']['href'])self['location'].replace(self['location']['href'])self['location']['assign'](self['location']['href'])self['location']['replace'](self['location']['href'])self.location['href'] = locationself.location['href'] = location.hrefself.location['href'] = window.locationself.location['href'] = self.locationself.location['href'] = window.location.hrefself.location['href'] = self.location.hrefself.location['href'] = location['href']self.location['href'] = window['location']self.location['href'] = window['location'].hrefself.location['href'] = window['location']['href']self.location['href'] = window.location['href']self.location['href'] = self['location']self.location['href'] = self['location'].hrefself.location['href'] = self['location']['href']self.location['href'] = self.location['href']location.assign(self.location['href'])location.replace(self.location['href'])window.location.assign(self.location['href'])window.location.replace(self.location['href'])self.location.assign(self.location['href'])self.location.replace(self.location['href'])location['assign'](self.location['href'])location['replace'](self.location['href'])window.location['assign'](self.location['href'])window.location['replace'](self.location['href'])window['location'].assign(self.location['href'])window['location'].replace(self.location['href'])window['location']['assign'](self.location['href'])window['location']['replace'](self.location['href'])self.location['assign'](self.location['href'])self.location['replace'](self.location['href'])self['location'].assign(self.location['href'])self['location'].replace(self.location['href'])self['location']['assign'](self.location['href'])self['location']['replace'](self.location['href'])location.reload()location['reload']()window.location.reload()window['location'].reload()window.location['reload']()window['location']['reload']()self.location.reload()self['location'].reload()self.location['reload']()self['location']['reload']()]]></content>
      <categories>
        <category>Javascript</category>
      </categories>
      <tags>
        <tag>Javascript</tag>
        <tag>页面重载</tag>
      </tags>
  </entry>
</search>
