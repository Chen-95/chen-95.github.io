<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Mr. Chen</title>
  
  <subtitle>足够用心，才足够特别。</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://chen-95.gitee.io/"/>
  <updated>2019-03-12T04:31:57.000Z</updated>
  <id>https://chen-95.gitee.io/</id>
  
  <author>
    <name>Mr. Chen</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Hexo文章使用 hexo-blog-encrypt 插件加密访问</title>
    <link href="https://chen-95.gitee.io/2019/03/10/4/"/>
    <id>https://chen-95.gitee.io/2019/03/10/4/</id>
    <published>2019-03-10T10:19:37.000Z</published>
    <updated>2019-03-12T04:31:57.000Z</updated>
    
    <content type="html"><![CDATA[<script src="//cdn.bootcss.com/jquery/1.11.3/jquery.min.js"></script><div id="hbe-security">  <div class="hbe-input-container">  <input type="password" class="hbe-form-control" id="pass" placeholder="请输入密码阅读全文..." />    <label for="pass">请输入密码阅读全文...</label>    <div class="bottom-line"></div>  </div></div><div id="decryptionError" style="display: none;">Incorrect Password!</div><div id="noContentError" style="display: none;">No content to display!</div><div id="encrypt-blog" style="display:none"></div><script src="/lib/crypto-js.js"></script><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
    
    <summary type="html">
    
      这是一篇加密文章，内容可能是个人情感宣泄或者收费技术。如果您想获取密码，请与我联系！&lt;br/&gt;&lt;br/&gt;此文章密码：123456
    
    </summary>
    
      <category term="Hexo" scheme="https://chen-95.gitee.io/categories/Hexo/"/>
    
    
      <category term="加密" scheme="https://chen-95.gitee.io/tags/%E5%8A%A0%E5%AF%86/"/>
    
      <category term="Hexo" scheme="https://chen-95.gitee.io/tags/Hexo/"/>
    
      <category term="hexo-blog-encrypt" scheme="https://chen-95.gitee.io/tags/hexo-blog-encrypt/"/>
    
  </entry>
  
  <entry>
    <title>HTTP状态码</title>
    <link href="https://chen-95.gitee.io/2019/02/04/HTTP%E7%8A%B6%E6%80%81%E7%A0%81/"/>
    <id>https://chen-95.gitee.io/2019/02/04/HTTP状态码/</id>
    <published>2019-02-04T03:49:45.000Z</published>
    <updated>2019-02-04T15:31:57.000Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Tue Mar 19 2019 20:23:22 GMT+0800 (GMT+08:00) --><blockquote><p>当浏览者访问一个网页时，浏览者的浏览器会向网页所在服务器发出请求。当浏览器接收并显示网页前，此网页所在的服务器会返回一个包含HTTP状态码的信息头（server header）用以响应浏览器的请求。</p></blockquote><p>HTTP状态码的英文为HTTP Status Code。</p><p>HTTP状态码由三个十进制数字组成，第一个十进制数字定义了状态码的类型，后两个数字没有分类的作用。HTTP状态码共分为<strong>5种</strong>类型：</p><ul><li><strong>1xx : 信息，服务器收到请求，需要请求者继续执行操作</strong></li><li><strong>2xx : 成功，操作被成功接收并处理</strong></li><li><strong>3xx : 重定向，需要进一步的操作以完成请求</strong></li><li><strong>4xx : 客户端错误，请求包含语法错误或无法完成请求</strong></li><li><strong>5xx : 服务器错误，服务器在处理请求的过程中发生了错误</strong></li></ul><p>以下列举了有可能会返回的一系列 HTTP 状态消息：</p><h2 id="1xx-信息"><a href="#1xx-信息" class="headerlink" title="1xx: 信息"></a>1xx: 信息</h2><table><tbody><tr><th align="left" width="40%">消息：</th><th align="left" width="60%">描述：</th></tr><tr><td>100 Continue</td><td>服务器仅接收到部分请求，但是一旦服务器并没有拒绝该请求，客户端应该继续发送其余的请求。</td></tr><tr><td>101 Switching Protocols</td><td>服务器转换协议：服务器将遵从客户的请求转换到另外一种协议。</td></tr><tr><td>103 Checkpoint</td><td>用于 PUT 或者 POST 请求恢复失败时的恢复请求建议。</td></tr></tbody></table><h2 id="2xx-成功"><a href="#2xx-成功" class="headerlink" title="2xx: 成功"></a>2xx: 成功</h2><table><tbody><tr><th align="left" width="40%">消息：</th><th align="left" width="60%">描述：</th></tr><tr><td>200 OK</td><td>请求成功（这是对HTTP请求成功的标准应答。）</td></tr><tr><td>201 Created</td><td>请求被创建完成，同时新的资源被创建。</td></tr><tr><td>202 Accepted</td><td>供处理的请求已被接受，但是处理未完成。</td></tr><tr><td>203 Non-Authoritative Information</td><td>请求已经被成功处理，但是一些应答头可能不正确，因为使用的是其他文档的拷贝。</td></tr><tr><td>204 No Content</td><td>请求已经被成功处理，但是没有返回新文档。浏览器应该继续显示原来的文档。如果用户定期地刷新页面，而Servlet可以确定用户文档足够新，这个状态代码是很有用的。</td></tr><tr><td>205 Reset Content</td><td>请求已经被成功处理，但是没有返回新文档。但浏览器应该重置它所显示的内容。用来强制浏览器清除表单输入内容。</td></tr><tr><td>206 Partial Content</td><td>客户发送了一个带有Range头的GET请求，服务器完成了它。</td></tr></tbody></table><h2 id="3xx-重定向"><a href="#3xx-重定向" class="headerlink" title="3xx: 重定向"></a>3xx: 重定向</h2><table><tbody><tr><th align="left" width="40%">消息：</th><th align="left" width="60%">描述：</th></tr><tr><td>300 Multiple Choices</td><td>多重选择。链接列表。用户可以选择某链接到达目的地。最多允许五个地址。</td></tr><tr><td>301 Moved Permanently</td><td>所请求的页面已经转移至新的 URL 。</td></tr><tr><td>302 Found</td><td>所请求的页面已经临时转移至新的 URL 。</td></tr><tr><td>303 See Other</td><td>所请求的页面可在别的 URL 下被找到。</td></tr><tr><td>304 Not Modified</td><td>未按预期修改文档。客户端有缓冲的文档并发出了一个条件性的请求（一般是提供If-Modified-Since头表示客户只想比指定日期更新的文档）。服务器告诉客户，原来缓冲的文档还可以继续使用。</td></tr><tr><td>305 Use Proxy</td><td>客户请求的文档应该通过Location头所指明的代理服务器提取。</td></tr><tr><td>306 Switch Proxy</td><td><em>目前已不再使用，但是代码依然被保留。</em></td></tr><tr><td>307 Temporary Redirect</td><td>被请求的页面已经临时移至新的 URL 。</td></tr><tr><td>308 Resume Incomplete</td><td>用于 PUT 或者 POST 请求恢复失败时的恢复请求建议。</td></tr></tbody></table><h2 id="4xx-客户端错误"><a href="#4xx-客户端错误" class="headerlink" title="4xx: 客户端错误"></a>4xx: 客户端错误</h2><table><tbody><tr><th align="left" width="40%">消息：</th><th align="left" width="60%">描述：</th></tr><tr><td>400&nbsp;Bad Request</td><td>因为语法错误，服务器未能理解请求。</td></tr><tr><td>401 Unauthorized</td><td>合法请求，但对被请求页面的访问被禁止。因为被请求的页面需要身份验证，客户端没有提供或者身份验证失败。</td></tr><tr><td>402 Payment Required</td><td><em>此代码尚无法使用。</em></td></tr><tr><td>403 Forbidden</td><td>合法请求，但对被请求页面的访问被禁止。</td></tr><tr><td>404 Not Found</td><td>服务器无法找到被请求的页面。</td></tr><tr><td>405 Method Not Allowed</td><td>请求中指定的方法不被允许。</td></tr><tr><td>406 Not Acceptable</td><td>服务器生成的响应无法被客户端所接受。</td></tr><tr><td>407 Proxy Authentication Required</td><td>用户必须首先使用代理服务器进行验证，这样请求才会被处理。</td></tr><tr><td>408 Request Timeout</td><td>请求超出了服务器的等待时间。</td></tr><tr><td>409 Conflict</td><td>由于冲突，请求无法被完成。</td></tr><tr><td>410 Gone</td><td>被请求的页面不可用。</td></tr><tr><td>411 Length Required</td><td>“Content-Length” 未被定义。如果无此内容，服务器不会接受请求。</td></tr><tr><td>412 Precondition Failed</td><td>请求中的前提条件被服务器评估为失败。</td></tr><tr><td>413 Request Entity Too Large</td><td>由于所请求的实体太大，服务器不会接受请求。</td></tr><tr><td>414 Request-URI Too Long</td><td>由于 URL 太长，服务器不会接受请求。当 POST 请求被转换为带有很长的查询信息的 GET 请求时，就会发生这种情况。</td></tr><tr><td>415 Unsupported Media Type</td><td>由于媒介类型不被支持，服务器不会接受请求。</td></tr><tr><td>416 Requested Range Not Satisfiable</td><td>客户端请求部分文档，但是服务器不能提供被请求的部分。</td></tr><tr><td>417 Expectation Failed</td><td>服务器不能满足客户在请求中指定的请求头。</td></tr></tbody></table><h2 id="5xx-服务器错误"><a href="#5xx-服务器错误" class="headerlink" title="5xx: 服务器错误"></a>5xx: 服务器错误</h2><table><tbody><tr><th align="left" width="40%">消息：</th><th align="left" width="60%">描述：</th></tr><tr><td>500 Internal Server Error</td><td>请求未完成。服务器遇到不可预知的情况。</td></tr><tr><td>501 Not Implemented</td><td>请求未完成。服务器不支持所请求的功能，或者服务器无法完成请求。</td></tr><tr><td>502 Bad Gateway</td><td>请求未完成。服务器充当网关或者代理的角色时，从上游服务器收到一个无效的响应。</td></tr><tr><td>503 Service Unavailable</td><td>服务器当前不可用（过载或者当机）。</td></tr><tr><td>504 Gateway Timeout</td><td>网关超时。服务器充当网关或者代理的角色时，未能从上游服务器收到一个及时的响应。</td></tr><tr><td>505 HTTP Version Not Supported</td><td>服务器不支持请求中指明的HTTP协议版本。</td></tr><tr><td>511 Network Authentication Required</td><td>用户需要提供身份验证来获取网络访问入口。</td></tr></tbody></table><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      
      
        &lt;!-- build time:Tue Mar 19 2019 20:23:22 GMT+0800 (GMT+08:00) --&gt;&lt;blockquote&gt;&lt;p&gt;当浏览者访问一个网页时，浏览者的浏览器会向网页所在服务器发出请求。当浏览器接收并显示网页前，此网页所在的服务器会返回一个
      
    
    </summary>
    
      <category term="HTTP" scheme="https://chen-95.gitee.io/categories/HTTP/"/>
    
    
      <category term="HTTP" scheme="https://chen-95.gitee.io/tags/HTTP/"/>
    
      <category term="HTTP状态码" scheme="https://chen-95.gitee.io/tags/HTTP%E7%8A%B6%E6%80%81%E7%A0%81/"/>
    
  </entry>
  
  <entry>
    <title>vue面试中常问知识点整理</title>
    <link href="https://chen-95.gitee.io/2019/02/03/vue%E9%9D%A2%E8%AF%95%E4%B8%AD%E5%B8%B8%E9%97%AE%E7%9F%A5%E8%AF%86%E7%82%B9%E6%95%B4%E7%90%86/"/>
    <id>https://chen-95.gitee.io/2019/02/03/vue面试中常问知识点整理/</id>
    <published>2019-02-03T03:49:45.000Z</published>
    <updated>2019-02-04T00:31:57.000Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Tue Mar 19 2019 20:23:22 GMT+0800 (GMT+08:00) --><blockquote><p>看看面试题，只是为了查漏补缺，看看自己那些方面还不懂。切记不要以为背了面试题，就万事大吉了，最好是理解背后的原理，这样面试的时候才能侃侃而谈。不然，稍微有水平的面试官一看就能看出，是否有真才实学还是刚好背中了这道面试题（有空再把例子中代码补上）。</p></blockquote><h2 id="一、-对于MVVM的理解？"><a href="#一、-对于MVVM的理解？" class="headerlink" title="一、 对于MVVM的理解？"></a>一、 对于MVVM的理解？</h2><p>MVVM 是 Model-View-ViewModel 的缩写。</p><ul><li><strong>Model</strong> 代表数据模型，也可以在Model中定义数据修改和操作的业务逻辑。</li><li><strong>View</strong> 代表UI 组件，它负责将数据模型转化成UI 展现出来。</li><li><strong>ViewModel</strong> 监听模型数据的改变和控制视图行为、处理用户交互，简单理解就是一个同步View 和 Model的对象，连接Model和View</li></ul><p>在MVVM架构下，View 和 Model 之间并没有直接的联系，而是通过ViewModel进行交互，Model 和 ViewModel 之间的交互是双向的， 因此View 数据的变化会同步到Model中，而Model 数据的变化也会立即反应到View 上。</p><p><strong>ViewModel</strong> 通过双向数据绑定把 View 层和 Model 层连接了起来，而View 和 Model 之间的同步工作完全是自动的，无需人为干涉，因此开发者只需关注业务逻辑，不需要手动操作DOM，不需要关注数据状态的同步问题，复杂的数据状态维护完全由 MVVM 来统一管理。</p><h2 id="二、-Vue的生命周期"><a href="#二、-Vue的生命周期" class="headerlink" title="二、 Vue的生命周期"></a>二、 Vue的生命周期</h2><p><strong>beforeCreate</strong>（创建前），在数据观测和初始化事件还未开始</p><p><strong>created</strong>（创建后），完成数据观测，属性和方法的运算，初始化事件， $el 属性还没有显示出来</p><p><strong>beforeMount</strong>（载入前），在挂载开始之前被调用，相关的render函数首次被调用。实例已完成以下的配置：编译模板，把data里面的数据和模板生成html。注意此时还没有挂载html到页面上。</p><p><strong>mounted</strong>（载入后），在el 被新创建的 vm.$el 替换，并挂载到实例上去之后调用。实例已完成以下的配置：用上面编译好的html内容替换el属性指向的DOM对象。完成模板中的html渲染到html页面中。此过程中进行ajax交互。</p><p><strong>beforeUpdate</strong>（更新前），在数据更新之前调用，发生在虚拟DOM重新渲染和打补丁之前。可以在该钩子中进一步地更改状态，不会触发附加的重渲染过程。</p><p><strong>updated</strong>（更新后），在由于数据更改导致的虚拟DOM重新渲染和打补丁之后调用。调用时，组件DOM已经更新，所以可以执行依赖于DOM的操作。然而在大多数情况下，应该避免在此期间更改状态，因为这可能会导致更新无限循环。该钩子在服务器端渲染期间不被调用。</p><p><strong>beforeDestroy</strong>（销毁前），在实例销毁之前调用。实例仍然完全可用。</p><p><strong>destroyed</strong>（销毁后），在实例销毁之后调用。调用后，所有的事件监听器会被移除，所有的子实例也会被销毁。该钩子在服务器端渲染期间不被调用。</p><h6 id="1、-什么是vue生命周期？"><a href="#1、-什么是vue生命周期？" class="headerlink" title="1、 什么是vue生命周期？"></a>1、 什么是vue生命周期？</h6><p>答： Vue 实例从创建到销毁的过程，就是生命周期。从开始创建、初始化数据、编译模板、挂载Dom→渲染、更新→渲染、销毁等一系列过程，称之为 Vue 的生命周期。</p><h6 id="2、-vue生命周期的作用是什么？"><a href="#2、-vue生命周期的作用是什么？" class="headerlink" title="2、 vue生命周期的作用是什么？"></a>2、 vue生命周期的作用是什么？</h6><p>答：它的生命周期中有多个事件钩子，让我们在控制整个Vue实例的过程时更容易形成好的逻辑。</p><h6 id="3、-vue生命周期总共有几个阶段？"><a href="#3、-vue生命周期总共有几个阶段？" class="headerlink" title="3、 vue生命周期总共有几个阶段？"></a>3、 vue生命周期总共有几个阶段？</h6><p>答：它可以总共分为8个阶段：创建前/后、载入前/后、更新前/后、销毁前/销毁后。</p><h6 id="4、-第一次页面加载会触发哪几个钩子？"><a href="#4、-第一次页面加载会触发哪几个钩子？" class="headerlink" title="4、 第一次页面加载会触发哪几个钩子？"></a>4、 第一次页面加载会触发哪几个钩子？</h6><p>答：会触发下面这几个beforeCreate、created、beforeMount、mounted 。</p><h6 id="5、-DOM-渲染在哪个周期中就已经完成？"><a href="#5、-DOM-渲染在哪个周期中就已经完成？" class="headerlink" title="5、 DOM 渲染在哪个周期中就已经完成？"></a>5、 DOM 渲染在哪个周期中就已经完成？</h6><p>答：DOM 渲染在 mounted 中就已经完成了。</p><h2 id="三、-Vue实现数据双向绑定的原理：Object-defineProperty"><a href="#三、-Vue实现数据双向绑定的原理：Object-defineProperty" class="headerlink" title="三、 Vue实现数据双向绑定的原理：Object.defineProperty()"></a>三、 Vue实现数据双向绑定的原理：<code>Object.defineProperty()</code></h2><p>vue实现数据双向绑定主要是：采用<strong>数据劫持结合发布者-订阅者模式</strong>的方式，通过 <code>Object.defineProperty()</code> 来劫持各个属性的<code>setter，getter</code>，在数据变动时发布消息给订阅者，触发相应监听回调。当把一个普通 Javascript 对象传给 Vue 实例来作为它的 <code>data</code> 选项时，Vue 将遍历它的属性，用 <code>Object.defineProperty()</code> 将它们转为 <code>getter/setter</code>。用户看不到 <code>getter/setter</code>，但是在内部它们让 Vue 追踪依赖，在属性被访问和修改时通知变化。</p><p>vue的数据双向绑定 将MVVM作为数据绑定的入口，整合Observer，Compile和Watcher三者，通过Observer来监听自己的model的数据变化，通过Compile来解析编译模板指令（vue中是用来解析<code>[[]]</code> ），最终利用watcher搭起observer和Compile之间的通信桥梁，达到数据变化 —&gt;视图更新；视图交互变化（input）—&gt;数据model变更双向绑定效果。</p><p>js实现简单的双向绑定：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;div id=<span class="string">"app"</span>&gt;    </span><br><span class="line">        &lt;input type=<span class="string">"text"</span> id=<span class="string">"txt"</span>&gt;</span><br><span class="line">        &lt;p id=<span class="string">"show"</span>&gt;<span class="xml"><span class="tag">&lt;<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">&lt;<span class="regexp">/body&gt;</span></span><br><span class="line"><span class="regexp">&lt;script type="text/</span>javascript<span class="string">"&gt;    </span></span><br><span class="line"><span class="string">    var obj = &#123;&#125;    </span></span><br><span class="line"><span class="string">    Object.defineProperty(obj, 'txt', &#123;</span></span><br><span class="line"><span class="string">        get: function () &#123;</span></span><br><span class="line"><span class="string">            return obj</span></span><br><span class="line"><span class="string">            &#125;,</span></span><br><span class="line"><span class="string">        set: function (newValue) &#123;</span></span><br><span class="line"><span class="string">            document.getElementById('txt'.value = newValue</span></span><br><span class="line"><span class="string">            document.getElementById('show').innerHTML = newValue        </span></span><br><span class="line"><span class="string">            &#125;</span></span><br><span class="line"><span class="string">    &#125;)</span></span><br><span class="line"><span class="string">    document.addEventListener('keyup', function (e) &#123;</span></span><br><span class="line"><span class="string">        obj.txt = e.target.value    </span></span><br><span class="line"><span class="string">    &#125;)</span></span><br><span class="line"><span class="string">&lt;/script&gt;</span></span><br></pre></td></tr></table></figure><h2 id="四、-Vue组件间的参数传递"><a href="#四、-Vue组件间的参数传递" class="headerlink" title="四、 Vue组件间的参数传递"></a>四、 Vue组件间的参数传递</h2><h6 id="1、-父组件与子组件传值"><a href="#1、-父组件与子组件传值" class="headerlink" title="1、 父组件与子组件传值"></a>1、 父组件与子组件传值</h6><p>父组件传给子组件：子组件通过<code>props</code>方法接受数据；</p><p>子组件传给父组件：<code>$emit</code> 方法传递参数</p><h6 id="2、-非父子组件间的数据传递，兄弟组件传值"><a href="#2、-非父子组件间的数据传递，兄弟组件传值" class="headerlink" title="2、 非父子组件间的数据传递，兄弟组件传值"></a>2、 非父子组件间的数据传递，兄弟组件传值</h6><p>eventBus，就是创建一个事件中心，相当于中转站，可以用它来传递事件和接收事件。项目比较小时，用这个比较合适（虽然也有不少人推荐直接用VUEX，具体来说看需求咯。技术只是手段，目的达到才是王道）。</p><h2 id="五、-Vue的路由实现：hash模式-和-history模式"><a href="#五、-Vue的路由实现：hash模式-和-history模式" class="headerlink" title="五、 Vue的路由实现：hash模式 和 history模式"></a>五、 Vue的路由实现：hash模式 和 history模式</h2><p><strong>hash模式</strong>：在浏览器中符号“#”，#以及#后面的字符称之为hash，用 <code>window.location.hash</code> 读取。特点：hash虽然在URL中，但不被包括在HTTP请求中；用来指导浏览器动作，对服务端安全无用，hash不会重加载页面。</p><p><strong>history模式</strong>：history采用HTML5的新特性；且提供了两个新方法： <code>pushState()</code>， <code>replaceState()</code>可以对浏览器历史记录栈进行修改，以及popState事件的监听到状态变更。</p><h2 id="六、-Vue与Angular以及React的区别？"><a href="#六、-Vue与Angular以及React的区别？" class="headerlink" title="六、 Vue与Angular以及React的区别？"></a>六、 Vue与Angular以及React的区别？</h2><p>版本在不断更新，以下的区别有可能不是很正确。我工作中只用到vue，对angular和react不怎么熟。</p><h6 id="1、-与AngularJS的区别"><a href="#1、-与AngularJS的区别" class="headerlink" title="1、 与AngularJS的区别"></a>1、 与AngularJS的区别</h6><p><strong>相同点</strong>：都支持指令：内置指令和自定义指令；都支持过滤器：内置过滤器和自定义过滤器；都支持双向数据绑定；都不支持低端浏览器。</p><p><strong>不同点</strong>：AngularJS的学习成本高，比如增加了Dependency Injection特性，而Vue.js本身提供的API都比较简单、直观；在性能上，AngularJS依赖对数据做脏检查，所以Watcher越多越慢；Vue.js使用基于依赖追踪的观察并且使用异步队列更新，所有的数据都是独立触发的。</p><h6 id="2、-与React的区别"><a href="#2、-与React的区别" class="headerlink" title="2、 与React的区别"></a>2、 与React的区别</h6><p><strong>相同点</strong>：React采用特殊的JSX语法，Vue.js在组件开发中也推崇编写.vue特殊文件格式，对文件内容都有一些约定，两者都需要编译后使用；中心思想相同：一切都是组件，组件实例之间可以嵌套；都提供合理的钩子函数，可以让开发者定制化地去处理需求；都不内置列数AJAX，Route等功能到核心包，而是以插件的方式加载；在组件开发中都支持mixins的特性。</p><p><strong>不同点</strong>：React采用的Virtual DOM会对渲染出来的结果做脏检查；Vue.js在模板中提供了指令，过滤器等，可以非常方便，快捷地操作Virtual DOM。</p><h2 id="七、-vue路由的钩子函数"><a href="#七、-vue路由的钩子函数" class="headerlink" title="七、 vue路由的钩子函数"></a>七、 vue路由的钩子函数</h2><p>首页可以控制导航跳转，beforeEach，afterEach等，一般用于页面title的修改。一些需要登录才能调整页面的重定向功能。</p><ul><li><strong>beforeEach</strong>主要有3个参数to，from，next。</li><li><strong>to</strong>：route即将进入的目标路由对象。</li><li><strong>from</strong>：route当前导航正要离开的路由。</li><li><strong>next</strong>：function一定要调用该方法resolve这个钩子。执行效果依赖next方法的调用参数。可以控制网页的跳转。</li></ul><h2 id="八、-vuex是什么？怎么使用？哪种功能场景使用它？"><a href="#八、-vuex是什么？怎么使用？哪种功能场景使用它？" class="headerlink" title="八、 vuex是什么？怎么使用？哪种功能场景使用它？"></a>八、 vuex是什么？怎么使用？哪种功能场景使用它？</h2><p>只用来读取的状态集中放在store中； 改变状态的方式是提交mutations，这是个同步的事物； 异步逻辑应该封装在action中。</p><p>在<code>main.js</code>引入<code>store</code>，注入。新建了一个目录store，… export 。</p><p>场景有：单页应用中，组件之间的状态、音乐播放、登录状态、加入购物车</p><p><img src="/2019/02/03/vue面试中常问知识点整理/p1.png" alt="vuex"></p><ul><li><p><strong>state</strong>：Vuex 使用单一状态树,即每个应用将仅仅包含一个store 实例，但单一状态树和模块化并不冲突。存放的数据状态，不可以直接修改里面的数据。</p></li><li><p><strong>mutations</strong>：mutations定义的方法动态修改Vuex 的 store 中的状态或数据。</p></li><li><p><strong>getters</strong>：类似vue的计算属性，主要用来过滤一些数据。</p></li><li><p><strong>action</strong>：actions可以理解为通过将mutations里面处里数据的方法变成可异步的处理数据的方法，简单的说就是异步操作数据。view 层通过 <code>store.dispath</code> 来分发 action。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> store = <span class="keyword">new</span> Vuex.Store(&#123;</span><br><span class="line">    <span class="comment">//store实例</span></span><br><span class="line">    state: &#123;</span><br><span class="line">        count: <span class="number">0</span></span><br><span class="line">    &#125;,</span><br><span class="line">    mutations:&#123;</span><br><span class="line">        increment (state) &#123;</span><br><span class="line">          state.count++</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    actions: &#123;</span><br><span class="line">        increment (context) &#123;</span><br><span class="line">            context.commit(<span class="string">'increment'</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li><li><p><strong>modules</strong>：项目特别复杂的时候，可以让每一个模块拥有自己的state、mutation、action、getters，使得结构非常清晰，方便管理。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> moduleA = &#123;</span><br><span class="line">    state: &#123; ... &#125;,</span><br><span class="line">    mutations: &#123; ... &#125;,</span><br><span class="line">    actions: &#123; ... &#125;,</span><br><span class="line">    getters: &#123; ... &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> moduleB = &#123;</span><br><span class="line">    state: &#123; ... &#125;,</span><br><span class="line">    mutations: &#123; ... &#125;,</span><br><span class="line">    actions: &#123; ... &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> store = <span class="keyword">new</span> Vuex.Store(&#123;</span><br><span class="line">  modules:&#123;</span><br><span class="line">a: moduleA,</span><br><span class="line">b:</span><br><span class="line"> moduleB</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li></ul><h2 id="九、其它小知识点"><a href="#九、其它小知识点" class="headerlink" title="九、其它小知识点"></a>九、其它小知识点</h2><h6 id="1、-css只在当前组件起作用"><a href="#1、-css只在当前组件起作用" class="headerlink" title="1、 css只在当前组件起作用"></a>1、 css只在当前组件起作用</h6><p>答：在<code>style</code>标签中写入<code>scoped</code>即可 例如： <code>&lt;stylescoped&gt;&lt;/style&gt;</code></p><h6 id="2、-v-if-和-v-show-区别"><a href="#2、-v-if-和-v-show-区别" class="headerlink" title="2、 v-if 和 v-show 区别"></a>2、 v-if 和 v-show 区别</h6><p>答：<code>v-if</code>按照条件是否渲染，<code>v-show</code>是<code>display</code>的<code>block</code>或<code>none</code>；</p><h6 id="3、-route和-router的区别"><a href="#3、-route和-router的区别" class="headerlink" title="3、 $route和$router的区别"></a>3、 $route和$router的区别</h6><p>答：<code>$route</code>是“路由信息对象”，包括path，params，hash，query，fullPath，matched，name等路由信息参数。而<code>$router</code>是“路由实例”对象包括了路由的跳转方法，钩子函数等。</p><blockquote><p><em>PS：缺少的案例代码，这几天再补上去。有些地方可能描述的不够清楚，如果有歧义，可能是我理解错了。</em></p></blockquote><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      
      
        &lt;!-- build time:Tue Mar 19 2019 20:23:22 GMT+0800 (GMT+08:00) --&gt;&lt;blockquote&gt;&lt;p&gt;看看面试题，只是为了查漏补缺，看看自己那些方面还不懂。切记不要以为背了面试题，就万事大吉了，最好是理解背后的原理，这样面
      
    
    </summary>
    
      <category term="Vue" scheme="https://chen-95.gitee.io/categories/Vue/"/>
    
      <category term="面试" scheme="https://chen-95.gitee.io/categories/Vue/%E9%9D%A2%E8%AF%95/"/>
    
    
      <category term="Vue" scheme="https://chen-95.gitee.io/tags/Vue/"/>
    
      <category term="面试" scheme="https://chen-95.gitee.io/tags/%E9%9D%A2%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>GET和POST的区别</title>
    <link href="https://chen-95.gitee.io/2019/02/01/GET%E5%92%8CPOST%E7%9A%84%E5%8C%BA%E5%88%AB/"/>
    <id>https://chen-95.gitee.io/2019/02/01/GET和POST的区别/</id>
    <published>2019-01-31T20:09:45.000Z</published>
    <updated>2019-02-01T00:31:57.000Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Tue Mar 19 2019 20:23:22 GMT+0800 (GMT+08:00) --><blockquote><p>都9102年了，还问GET和POST的区别?</p></blockquote><h2 id="1-前言"><a href="#1-前言" class="headerlink" title="1. 前言"></a>1. 前言</h2><p>最近看了一些同学的面经，发现无论什么技术岗位，还是会问到 <code>get</code> 和 <code>post</code> 的区别，而搜索出来的答案并不能让我们装得一手好逼，那就让我们从 HTTP 报文的角度来撸一波，从而搞明白他们的区别。</p><h2 id="2-标准答案"><a href="#2-标准答案" class="headerlink" title="2. 标准答案"></a>2. 标准答案</h2><p>在开撸之前吗，让我们先看一下标准答案长什么样子 w3school: <strong>GET 对比 POST</strong>。标准答案很美好，但是在面试的时候把下面的表格甩面试官一脸，估计会装逼不成反被*。</p><p><img src="/2019/02/01/GET和POST的区别/p1.png" alt="GET 对比 POST"></p><p>注意，并不是说标准答案有误，上述区别在<strong>大部分浏览器</strong>上是存在的，因为这些浏览器实现了 HTTP 标准。但是，前面列举的只是浏览器实现上的区别，而不是 get 和 post 的本质区别。</p><h2 id="3-GET-和-POST-报文上的区别"><a href="#3-GET-和-POST-报文上的区别" class="headerlink" title="3. GET 和 POST 报文上的区别"></a>3. GET 和 POST 报文上的区别</h2><p>先下结论，<strong>GET 和 POST 方法没有实质区别</strong>，只是报文格式不同。</p><p>GET 和 POST 只是 HTTP 协议中两种请求方式，而 HTTP 协议是基于 TCP/IP 的应用层协议，无论 GET 还是 POST，用的都是同一个传输层协议，所以在传输上，没有区别。</p><p>报文格式上，不带参数时，最大区别就是第一行方法名不同</p><p>POST方法请求报文第一行是这样的 <code>POST /uri HTTP/1.1 \r\n</code></p><p>GET方法请求报文第一行是这样的 <code>GET /uri HTTP/1.1 \r\n</code></p><p>是的，不带参数时他们的区别就仅仅是报文的前几个字符不同而已</p><p>带参数时报文的区别呢？ 在约定中，GET 方法的参数应该放在 url 中，POST 方法参数应该放在 body 中</p><p>举个例子，如果参数是 <code>name=chengqm, age=22</code>。</p><p>GET 方法简约版报文是这样的:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">GET /index.php?name=qiming.c&amp;age=<span class="number">22</span> HTTP/<span class="number">1.1</span></span><br><span class="line">Host: localhost</span><br></pre></td></tr></table></figure><p>POST 方法简约版报文是这样的:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">POST /index.php HTTP/<span class="number">1.1</span></span><br><span class="line">Host: localhost</span><br><span class="line">Content-Type: application/x-www-form-urlencoded</span><br><span class="line">name=qiming.c&amp;age=<span class="number">22</span></span><br></pre></td></tr></table></figure><p>现在我们知道了两种方法本质上是 TCP 连接，没有差别，也就是说，如果我不按规范来也是可以的。我们可以在 URL 上写参数，然后方法使用 POST；也可以在 Body 写参数，然后方法使用 GET。当然，这需要服务端支持。</p><h2 id="4-常见问题"><a href="#4-常见问题" class="headerlink" title="4. 常见问题"></a>4. 常见问题</h2><h3 id="GET-方法参数写法是固定的吗？"><a href="#GET-方法参数写法是固定的吗？" class="headerlink" title="GET 方法参数写法是固定的吗？"></a>GET 方法参数写法是固定的吗？</h3><p>在约定中，我们的参数是写在 <code>?</code> 后面，用 <code>&amp;</code> 分割。</p><p>我们知道，解析报文的过程是通过获取 TCP 数据，用正则等工具从数据中获取 Header 和 Body，从而提取参数。</p><p>也就是说，我们可以自己约定参数的写法，只要服务端能够解释出来就行，一种比较流行的写法是 <code>http://www.example.com/user/name/chengqm/age/22</code>。</p><h3 id="POST-方法比-GET-方法安全？"><a href="#POST-方法比-GET-方法安全？" class="headerlink" title="POST 方法比 GET 方法安全？"></a>POST 方法比 GET 方法安全？</h3><p>按照网上大部分文章的解释，POST 比 GET 安全，因为数据在地址栏上不可见。</p><p>然而，从传输的角度来说，他们都是不安全的，因为 HTTP 在网络上是明文传输的，只要在网络节点上捉包，就能完整地获取数据报文。</p><p>要想安全传输，就只有加密，也就是 HTTPS。</p><h3 id="GET-方法的长度限制是怎么回事？"><a href="#GET-方法的长度限制是怎么回事？" class="headerlink" title="GET 方法的长度限制是怎么回事？"></a>GET 方法的长度限制是怎么回事？</h3><p>在网上看到很多关于两者区别的文章都有这一条，提到浏览器地址栏输入的参数是有限的。</p><p>首先说明一点，HTTP 协议没有 Body 和 URL 的长度限制，对 URL 限制的大多是浏览器和服务器的原因。</p><p>浏览器原因就不说了，服务器是因为处理长 URL 要消耗比较多的资源，为了性能和安全（防止恶意构造长 URL 来攻击）考虑，会给 URL 长度加限制。</p><h3 id="POST-方法会产生两个TCP数据包？"><a href="#POST-方法会产生两个TCP数据包？" class="headerlink" title="POST 方法会产生两个TCP数据包？"></a>POST 方法会产生两个TCP数据包？</h3><p>有些文章中提到，post 会将 header 和 body 分开发送，先发送 header，服务端返回 100 状态码再发送 body。</p><p>HTTP 协议中没有明确说明 POST 会产生两个 TCP 数据包，而且实际测试(Chrome)发现，header 和 body 不会分开发送。</p><p>所以，header 和 body 分开发送是部分浏览器或框架的请求方法，不属于 post 必然行为。</p><h2 id="5-talk-is-cheap-show-me-the-code"><a href="#5-talk-is-cheap-show-me-the-code" class="headerlink" title="5. talk is cheap show me the code"></a>5. talk is cheap show me the code</h2><p>如果对 get 和 post 报文区别有疑惑，直接起一个 Socket 服务端，然后封装简单的 HTTP 处理方法，直接观察和处理 HTTP 报文，就能一目了然</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/usr/bin/env python</span></span><br><span class="line"># -*- coding: utf-8 -*-</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> socket</span><br><span class="line"></span><br><span class="line">HOST, PORT = <span class="string">''</span>, <span class="number">23333</span></span><br><span class="line"></span><br><span class="line">def server_run():</span><br><span class="line">listen_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)</span><br><span class="line">listen_socket.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, <span class="number">1</span>)</span><br><span class="line">listen_socket.bind((HOST, PORT))</span><br><span class="line">listen_socket.listen(<span class="number">1</span>)    </span><br><span class="line">print(<span class="string">'Serving HTTP on port %s ...'</span> %PORT)</span><br><span class="line"><span class="keyword">while</span> True:</span><br><span class="line">        # 接受连接</span><br><span class="line">        client_connection, client_address = listen_socket.accept()</span><br><span class="line">        handle_request(client_connection)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def handle_request(client_connection):    </span><br><span class="line">    # 获取请求报文</span><br><span class="line">    request = <span class="string">''</span>    </span><br><span class="line">    <span class="keyword">while</span> True:</span><br><span class="line">        recv_data = client_connection.recv(<span class="number">2400</span>)</span><br><span class="line">        recv_data = recv_data.decode()</span><br><span class="line">        request += recv_data        </span><br><span class="line">        <span class="keyword">if</span> len(recv_data) &lt; <span class="number">2400</span>:            </span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    # 解析首行</span><br><span class="line">    first_line_array = request.split(<span class="string">'\r\n'</span>)[<span class="number">0</span>].split(<span class="string">' '</span>)</span><br><span class="line"></span><br><span class="line">     </span><br><span class="line">    # 分离 header 和 body</span><br><span class="line">    space_line_index = request.index(<span class="string">'\r\n\r\n'</span>)</span><br><span class="line">    header = request[<span class="number">0</span>: space_line_index]</span><br><span class="line">    body = request[space_line_index + <span class="number">4</span>:]</span><br><span class="line"></span><br><span class="line">    </span><br><span class="line">    # 打印请求报文</span><br><span class="line">    print(request)</span><br><span class="line"></span><br><span class="line"># 返回报文</span><br><span class="line">    http_response = b<span class="string">""</span><span class="string">"\</span></span><br><span class="line"><span class="string">HTTP/1.1 200 OK</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="string">&lt;html&gt;</span></span><br><span class="line"><span class="string">&lt;head&gt;</span></span><br><span class="line"><span class="string">    &lt;title&gt;Hello, World!&lt;/title&gt;</span></span><br><span class="line"><span class="string">&lt;/head&gt;</span></span><br><span class="line"><span class="string">&lt;body&gt;</span></span><br><span class="line"><span class="string">    &lt;p style="</span>color: green<span class="string">"&gt;Hello, World!&lt;/p&gt;</span></span><br><span class="line"><span class="string">&lt;/body&gt;</span></span><br><span class="line"><span class="string">&lt;/html&gt;</span></span><br><span class="line"><span class="string">"</span><span class="string">""</span></span><br><span class="line">    client_connection.sendall(http_response)</span><br><span class="line">    client_connection.close()</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    server_run()</span><br></pre></td></tr></table></figure><p>上面代码就是简单的打印请求报文然后返回 HelloWorld 的 html 页面，我们运行起来</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@chengqm shell]# python httpserver.py </span><br><span class="line">Serving HTTP on port 23333 ...</span><br></pre></td></tr></table></figure><p>然后从浏览器中请求看看</p><p><img src="/2019/02/01/GET和POST的区别/p2.jpg" alt="从浏览器中请求"></p><p>打印出来的报文</p><p><img src="/2019/02/01/GET和POST的区别/p3.jpg" alt="打印出来的报文"></p><p>然后就可以手动证明上述说法，比如说要测试 header 和 body 是否分开传输，由于代码没有返回 100 状态码，如果我们 post 请求成功就说明是一起传输的(Chrome/postman)。</p><p><img src="/2019/02/01/GET和POST的区别/p4.jpg" alt="测试"></p><p>又比如 w3school 里面说 URL 的最大长度是 2048 个字符，那我们在代码里面加上一句计算 uri 长度的代码</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line"># 解析首行</span><br><span class="line">first_line_array = request.split(<span class="string">'\r\n'</span>)[<span class="number">0</span>].split(<span class="string">' '</span>)</span><br><span class="line">print(<span class="string">'uri长度: %s'</span> % len(first_line_array[<span class="number">1</span>]))</span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>我们用 postman 直接发送超过 2048 个字符的请求看看</p><p><img src="/2019/02/01/GET和POST的区别/p5.jpg" alt="测试"></p><p>然后我们可以得出结论，url 长度限制是某些浏览器和服务器的限制，和 HTTP 协议没有关系。</p><p>到此，我们可以愉快地装逼了 :)</p><p>END</p><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      
      
        &lt;!-- build time:Tue Mar 19 2019 20:23:22 GMT+0800 (GMT+08:00) --&gt;&lt;blockquote&gt;&lt;p&gt;都9102年了，还问GET和POST的区别?&lt;/p&gt;&lt;/blockquote&gt;&lt;h2 id=&quot;1-前言&quot;&gt;&lt;a href
      
    
    </summary>
    
      <category term="Get" scheme="https://chen-95.gitee.io/categories/Get/"/>
    
      <category term="Post" scheme="https://chen-95.gitee.io/categories/Get/Post/"/>
    
    
      <category term="Get" scheme="https://chen-95.gitee.io/tags/Get/"/>
    
      <category term="Post" scheme="https://chen-95.gitee.io/tags/Post/"/>
    
  </entry>
  
  <entry>
    <title>九种跨域方式实现原理</title>
    <link href="https://chen-95.gitee.io/2019/01/30/%E4%B9%9D%E7%A7%8D%E8%B7%A8%E5%9F%9F%E6%96%B9%E5%BC%8F%E5%AE%9E%E7%8E%B0%E5%8E%9F%E7%90%86/"/>
    <id>https://chen-95.gitee.io/2019/01/30/九种跨域方式实现原理/</id>
    <published>2019-01-30T08:09:45.000Z</published>
    <updated>2019-01-30T10:31:57.000Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Tue Mar 19 2019 20:23:22 GMT+0800 (GMT+08:00) --><iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width="330" height="86" src="//music.163.com/outchain/player?type=2&id=528478901&auto=1&height=66"></iframe><center><font color="#006600"><strong>前 言</strong></font></center><p>前后端数据交互经常会碰到请求跨域，什么是跨域，以及有哪几种跨域方式，这是本文要探讨的内容。</p><p>本文完整的源代码请猛戳github 博客</p><center><font color="#006600"><strong>一、什么是跨域？</strong></font></center><h6 id="1-什么是同源策略及其限制内容？"><a href="#1-什么是同源策略及其限制内容？" class="headerlink" title="1. 什么是同源策略及其限制内容？"></a><font color="#dd0000">1. 什么是同源策略及其限制内容？</font></h6><p>同源策略是一种约定，它是浏览器最核心也最基本的安全功能，如果缺少了同源策略，浏览器很容易受到 XSS、CSFR 等攻击。所谓同源是指”协议+域名+端口”三者相同，即便两个不同的域名指向同一个 ip 地址，也非同源。</p><p><img src="/2019/01/30/九种跨域方式实现原理/p1.jpg" alt="一个域名地址的组成"></p><p><strong>同源策略限制内容有：</strong></p><ul><li>Cookie、LocalStorage、IndexedDB 等存储性内容</li><li>DOM 节点</li><li>AJAX 请求发送后，结果被浏览器拦截了</li></ul><p>但是有三个标签是允许跨域加载资源：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">XXX</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">href</span>=<span class="string">XXX</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">XXX</span>&gt;</span><span class="undefined"></span></span><br></pre></td></tr></table></figure><h6 id="2-常见跨域场景"><a href="#2-常见跨域场景" class="headerlink" title="2.常见跨域场景"></a><font color="#dd0000">2.常见跨域场景</font></h6><p><strong>当协议、子域名、主域名、端口号中任意一个不相同时，都算作不同域。</strong>不同域之间相互请求资源，就算作“跨域”。常见跨域场景如下图所示：</p><p><img src="/2019/01/30/九种跨域方式实现原理/p2.jpg" alt="常见跨域场景"></p><p>特别说明两点：</p><p><strong>第一：如果是协议和端口造成的跨域问题“前台”是无能为力的。</strong></p><p><strong>第二：在跨域问题上，仅仅是通过“URL 的首部”来识别而不会根据域名对应的 IP 地址是否相同来判断。“URL 的首部”可以理解为“协议, 域名和端口必须匹配”。</strong></p><p>这里你或许有个疑问：<strong>请求跨域了，那么请求到底发出去没有？</strong></p><p><strong>跨域并不是请求发不出去，请求能发出去，服务端能收到请求并正常返回结果，只是结果被浏览器拦截了。</strong>你可能会疑问明明通过表单的方式可以发起跨域请求，为什么 Ajax 就不会?因为归根结底，跨域是为了阻止用户读取到另一个域名下的内容，Ajax 可以获取响应，浏览器认为这不安全，所以拦截了响应。但是表单并不会获取新的内容，所以可以发起跨域请求。同时也说明了跨域并不能完全阻止 CSRF，因为请求毕竟是发出去了。</p><center><font color="#006600"><strong>二、跨域解决方案</strong></font><br></center><h6 id="1-jsonp"><a href="#1-jsonp" class="headerlink" title="1.jsonp"></a><font color="#dd0000">1.jsonp</font></h6><ul><li><h6 id="1-JSONP-原理"><a href="#1-JSONP-原理" class="headerlink" title="1) JSONP 原理"></a>1) JSONP 原理</h6><p>利用 <code>script</code> 标签没有跨域限制的漏洞，网页可以得到从其他来源动态产生的 JSON 数据。JSONP 请求一定需要对方的服务器做支持才可以。</p></li><li><h6 id="2-JSONP-和-AJAX-对比"><a href="#2-JSONP-和-AJAX-对比" class="headerlink" title="2) JSONP 和 AJAX 对比"></a>2) JSONP 和 AJAX 对比</h6><p>JSONP 和 AJAX 相同，都是客户端向服务器端发送请求，从服务器端获取数据的方式。但 AJAX 属于同源策略，JSONP 属于非同源策略（跨域请求）</p></li><li><h6 id="3-JSONP-优缺点"><a href="#3-JSONP-优缺点" class="headerlink" title="3) JSONP 优缺点"></a>3) JSONP 优缺点</h6><p>JSONP 优点是简单兼容性好，可用于解决主流浏览器的跨域数据访问的问题。<strong>缺点是仅支持 get 方法具有局限性,不安全可能会遭受 XSS 攻击。</strong></p></li><li><h6 id="4-JSONP-的实现流程"><a href="#4-JSONP-的实现流程" class="headerlink" title="4) JSONP 的实现流程"></a>4) JSONP 的实现流程</h6><ul><li>声明一个回调函数，其函数名(如 show)当做参数值，要传递给跨域请求数据的服务器，函数形参为要获取目标数据(服务器返回的 data)。</li><li>创建一个script标签，把那个跨域的 API 数据接口地址，赋值给 script 的 src,还要在这个地址中向服务器传递该函数名（可以通过问号传参:?callback=show）。</li><li>服务器接收到请求后，需要进行特殊的处理：把传递进来的函数名和它需要给你的数据拼接成一个字符串,例如：传递进去的函数名是 show，它准备好的数据是show(‘我不爱你’)。</li><li>最后服务器把准备的数据通过 HTTP 协议返回给客户端，客户端再调用执行之前声明的回调函数（show），对返回的数据进行操作。</li><li></li></ul><p>在开发中可能会遇到多个 JSONP 请求的回调函数名是相同的，这时候就需要自己封装一个 JSONP 函数。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// index.html</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">jsonp</span>(<span class="params">&#123; url, params, callback &#125;</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>((resolve, reject) =&#123;</span><br><span class="line">    <span class="keyword">let</span> script = <span class="built_in">document</span>.createElement(<span class="string">'script'</span>)</span><br><span class="line">    <span class="built_in">window</span>[callback] = <span class="function"><span class="keyword">function</span>(<span class="params">data</span>) </span>&#123;</span><br><span class="line">      resolve(data)</span><br><span class="line">      <span class="built_in">document</span>.body.removeChild(script)</span><br><span class="line">    &#125;</span><br><span class="line">    params = &#123; ...params, callback &#125; <span class="comment">// wd=b&amp;callback=show</span></span><br><span class="line">    <span class="keyword">let</span> arrs = []</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> key <span class="keyword">in</span> params) &#123;</span><br><span class="line">      arrs.push(<span class="string">`<span class="subst">$&#123;key&#125;</span>=<span class="subst">$&#123;params[key]&#125;</span>`</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    script.src = <span class="string">`<span class="subst">$&#123;url&#125;</span>?<span class="subst">$&#123;arrs.join(<span class="string">'&amp;'</span>)&#125;</span>`</span></span><br><span class="line">    <span class="built_in">document</span>.body.appendChild(script)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line">jsonp(&#123;</span><br><span class="line">  url: <span class="string">'http://localhost:3000/say'</span>,</span><br><span class="line">  params: &#123; <span class="attr">wd</span>: <span class="string">'Iloveyou'</span> &#125;,</span><br><span class="line">  callback: <span class="string">'show'</span></span><br><span class="line">&#125;).then(data =&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(data)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>上面这段代码相当于向<code>http://localhost:3000/say?wd=Iloveyou&amp;callback=show</code>这个地址请求数据，然后后台返回<code>show(&#39;我不爱你&#39;)</code>，最后会运行 <code>show()</code>这个函数，打印出’我不爱你’</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"> <span class="comment">// server.js</span></span><br><span class="line"><span class="keyword">let</span> express = <span class="built_in">require</span>(<span class="string">'express'</span>)</span><br><span class="line"><span class="keyword">let</span> app = express()</span><br><span class="line">app.get(<span class="string">'/say'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">req, res</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> &#123; wd, callback &#125; = req.query</span><br><span class="line">  <span class="built_in">console</span>.log(wd) <span class="comment">// Iloveyou</span></span><br><span class="line">  <span class="built_in">console</span>.log(callback) <span class="comment">// show</span></span><br><span class="line">  res.end(<span class="string">`<span class="subst">$&#123;callback&#125;</span>('我不爱你')`</span>)</span><br><span class="line">&#125;)</span><br><span class="line">app.listen(<span class="number">3000</span>)</span><br></pre></td></tr></table></figure></li><li><h6 id="5-jQuery-的-jsonp-形式"><a href="#5-jQuery-的-jsonp-形式" class="headerlink" title="5) jQuery 的 jsonp 形式"></a>5) jQuery 的 jsonp 形式</h6><p><strong>JSONP 都是 GET 和异步请求的，不存在其他的请求方式和同步请求，且 jQuery 默认就会给 JSONP 的请求清除缓存。</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"> $.ajax(&#123;</span><br><span class="line">    url:<span class="string">"http://crossdomain.com/jsonServerResponse"</span>,</span><br><span class="line">    dataType:<span class="string">"jsonp"</span>,</span><br><span class="line">    type:<span class="string">"get"</span>,<span class="comment">//可以省略</span></span><br><span class="line">    jsonpCallback:<span class="string">"show"</span>,<span class="comment">//-&gt;自定义传递给服务器的函数名，而不是使用jQuery自动生成的，可省略</span></span><br><span class="line">    jsonp:<span class="string">"callback"</span>,<span class="comment">//-&gt;把传递函数名的那个形参callback，可省略</span></span><br><span class="line">    success:<span class="function"><span class="keyword">function</span> (<span class="params">data</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(data);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></li></ul><h6 id="2-cors"><a href="#2-cors" class="headerlink" title="2.cors"></a><font color="#dd0000">2.cors</font></h6><p><strong>CORS 需要浏览器和后端同时支持。IE 8 和 9 需要通过 XDomainRequest 来实现。</strong></p><p>浏览器会自动进行 CORS 通信，实现 CORS 通信的关键是后端。只要后端实现了 CORS，就实现了跨域。</p><p>服务端设置 Access-Control-Allow-Origin 就可以开启 CORS。 该属性表示哪些域名可以访问资源，如果设置通配符则表示所有网站都可以访问资源。</p><p>虽然设置 CORS 和前端没什么关系，但是通过这种方式解决跨域问题的话，会在发送请求时出现两种情况，分别为<strong>简单请求</strong>和<strong>复杂请求。</strong></p><ul><li><h6 id="1-简单请求"><a href="#1-简单请求" class="headerlink" title="1) 简单请求"></a>1) 简单请求</h6><p>只要同时满足以下两大条件，就属于简单请求</p><p>条件 1：使用下列方法之一：</p><ul><li>GET</li><li>HEAD</li><li>POST</li></ul><p>条件 2：Content-Type 的值仅限于下列三者之一：</p><ul><li>text/plain</li><li>multipart/form-data</li><li>application/x-www-form-urlencoded</li></ul><p>请求中的任意 XMLHttpRequestUpload 对象均没有注册任何事件监听器； XMLHttpRequestUpload 对象可以使用 XMLHttpRequest.upload 属性访问。</p></li><li><h6 id="2-复杂请求"><a href="#2-复杂请求" class="headerlink" title="2) 复杂请求"></a>2) 复杂请求</h6><p>不符合以上条件的请求就肯定是复杂请求了。<br>复杂请求的 CORS 请求，会在正式通信之前，增加一次 HTTP 查询请求，称为”预检”请求,该请求是 option 方法的，通过该请求来知道服务端是否允许跨域请求。</p><p>我们用PUT向后台请求时，属于复杂请求，后台需做如下配置：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"> <span class="comment">// 允许哪个方法访问我</span></span><br><span class="line">res.setHeader(<span class="string">'Access-Control-Allow-Methods'</span>, <span class="string">'PUT'</span>)</span><br><span class="line"><span class="comment">// 预检的存活时间</span></span><br><span class="line">res.setHeader(<span class="string">'Access-Control-Max-Age'</span>, <span class="number">6</span>)</span><br><span class="line"><span class="comment">// OPTIONS请求不做任何处理</span></span><br><span class="line"><span class="keyword">if</span> (req.method === <span class="string">'OPTIONS'</span>) &#123;</span><br><span class="line">      res.end()</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 定义后台返回的内容</span></span><br><span class="line">app.put(<span class="string">'/getData'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">req, res</span>) </span>&#123;</span><br><span class="line">      <span class="built_in">console</span>.log(req.headers)</span><br><span class="line">      res.end(<span class="string">'我不爱你'</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>接下来我们看下一个完整复杂请求的例子，并且介绍下 CORS 请求相关的字段</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// index.html</span></span><br><span class="line"><span class="keyword">let</span> xhr = <span class="keyword">new</span> XMLHttpRequest()</span><br><span class="line"><span class="built_in">document</span>.cookie = <span class="string">'name=xiamen'</span> <span class="comment">// cookie不能跨域</span></span><br><span class="line">xhr.withCredentials = <span class="literal">true</span> <span class="comment">// 前端设置是否带cookie</span></span><br><span class="line">xhr.open(<span class="string">'PUT'</span>, <span class="string">'http://localhost:4000/getData'</span>, <span class="literal">true</span>)</span><br><span class="line">xhr.setRequestHeader(<span class="string">'name'</span>, <span class="string">'xiamen'</span>)</span><br><span class="line">xhr.onreadystatechange = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (xhr.readyState === <span class="number">4</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> ((xhr.status &gt;= <span class="number">200</span> &amp;&amp; xhr.status &lt; <span class="number">300</span>) || xhr.status === <span class="number">304</span>) &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(xhr.response)</span><br><span class="line">      <span class="comment">//得到响应头，后台需设置Access-Control-Expose-Headers</span></span><br><span class="line">      <span class="built_in">console</span>.log(xhr.getResponseHeader(<span class="string">'name'</span>))</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">xhr.send()</span><br><span class="line"><span class="comment">//server1.js</span></span><br><span class="line"><span class="keyword">let</span> express = <span class="built_in">require</span>(<span class="string">'express'</span>);</span><br><span class="line"><span class="keyword">let</span> app = express();</span><br><span class="line">app.use(express.static(__dirname));</span><br><span class="line">app.listen(<span class="number">3000</span>);</span><br><span class="line"><span class="comment">//server2.js</span></span><br><span class="line"><span class="keyword">let</span> express = <span class="built_in">require</span>(<span class="string">'express'</span>)</span><br><span class="line"><span class="keyword">let</span> app = express()</span><br><span class="line"><span class="keyword">let</span> whitList = [<span class="string">'http://localhost:3000'</span>] <span class="comment">//设置白名单</span></span><br><span class="line">app.use(<span class="function"><span class="keyword">function</span>(<span class="params">req, res, next</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> origin = req.headers.origin</span><br><span class="line">  <span class="keyword">if</span> (whitList.includes(origin)) &#123;</span><br><span class="line">    <span class="comment">// 设置哪个源可以访问我</span></span><br><span class="line">    res.setHeader(<span class="string">'Access-Control-Allow-Origin'</span>, origin)</span><br><span class="line">    <span class="comment">// 允许携带哪个头访问我</span></span><br><span class="line">    res.setHeader(<span class="string">'Access-Control-Allow-Headers'</span>, <span class="string">'name'</span>)</span><br><span class="line">    <span class="comment">// 允许哪个方法访问我</span></span><br><span class="line">    res.setHeader(<span class="string">'Access-Control-Allow-Methods'</span>, <span class="string">'PUT'</span>)</span><br><span class="line">    <span class="comment">// 允许携带cookie</span></span><br><span class="line">    res.setHeader(<span class="string">'Access-Control-Allow-Credentials'</span>, <span class="literal">true</span>)</span><br><span class="line">    <span class="comment">// 预检的存活时间</span></span><br><span class="line">    res.setHeader(<span class="string">'Access-Control-Max-Age'</span>, <span class="number">6</span>)</span><br><span class="line">    <span class="comment">// 允许返回的头</span></span><br><span class="line">    res.setHeader(<span class="string">'Access-Control-Expose-Headers'</span>, <span class="string">'name'</span>)</span><br><span class="line">    <span class="keyword">if</span> (req.method === <span class="string">'OPTIONS'</span>) &#123;</span><br><span class="line">      res.end() <span class="comment">// OPTIONS请求不做任何处理</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  next()</span><br><span class="line">&#125;)</span><br><span class="line">app.put(<span class="string">'/getData'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">req, res</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(req.headers)</span><br><span class="line">  res.setHeader(<span class="string">'name'</span>, <span class="string">'jw'</span>) <span class="comment">//返回一个响应头，后台需设置</span></span><br><span class="line">  res.end(<span class="string">'我不爱你'</span>)</span><br><span class="line">&#125;)</span><br><span class="line">app.get(<span class="string">'/getData'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">req, res</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(req.headers)</span><br><span class="line">  res.end(<span class="string">'我不爱你'</span>)</span><br><span class="line">&#125;)</span><br><span class="line">app.use(express.static(__dirname))</span><br><span class="line">app.listen(<span class="number">4000</span>)</span><br></pre></td></tr></table></figure><p>上述代码由<code>http://localhost:3000/index.html</code>向<code>http://localhost:4000/</code>跨域请求，正如我们上面所说的，后端是实现 CORS 通信的关键。</p></li></ul><h6 id="3-postMessage"><a href="#3-postMessage" class="headerlink" title="3.postMessage"></a><font color="#dd0000">3.postMessage</font></h6><p>postMessage 是 HTML5 XMLHttpRequest Level 2 中的 API，且是为数不多可以跨域操作的 window 属性之一，它可用于解决以下方面的问题：</p><ul><li>页面和其打开的新窗口的数据传递</li><li>多窗口之间消息传递</li><li>页面与嵌套的 iframe 消息传递</li><li>上面三个场景的跨域数据传递</li></ul><p><strong>postMessage()方法允许来自不同源的脚本采用异步方式进行有限的通信，可以实现跨文本档、多窗口、跨域消息传递。</strong></p><p><code>otherWindow.postMessage(message, targetOrigin, [transfer]);</code></p><ul><li>message: 将要发送到其他 window 的数据。</li><li>targetOrigin:通过窗口的 origin 属性来指定哪些窗口能接收到消息事件，其值可以是字符串”*”（表示无限制）或者一个 URI。在发送消息的时候，如果目标窗口的协议、主机地址或端口这三者的任意一项不匹配 targetOrigin 提供的值，那么消息就不会被发送；只有三者完全匹配，消息才会被发送。</li><li>transfer(可选)：是一串和 message 同时传递的 Transferable 对象. 这些对象的所有权将被转移给消息的接收方，而发送一方将不再保有所有权。</li></ul><p>接下来我们看个例子： <code>http://localhost:3000/a.html</code>页面向<code>http://localhost:4000/b.html</code>传递“我爱你”,然后后者传回”我不爱你”。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// a.html</span></span><br><span class="line">&lt;iframe src=<span class="string">"http://localhost:4000/b.html"</span> frameborder=<span class="string">"0"</span> id=<span class="string">"frame"</span> onload=<span class="string">"load()"</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">iframe</span>//等它加载完触发一个事件</span></span></span><br><span class="line"><span class="xml">//内嵌在http://localhost:3000/a.html</span></span><br><span class="line">&lt;script&gt;</span><br><span class="line">function load() &#123;</span><br><span class="line">let frame = document.getElementById('frame')</span><br><span class="line">        frame.contentWindow.postMessage('我爱你', 'http://localhost:4000') //发送数据</span><br><span class="line">        window.onmessage = function(e) &#123; //接受返回数据</span><br><span class="line">console.log(e.data) //我不爱你</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// b.html</span></span><br><span class="line">  <span class="built_in">window</span>.onmessage = <span class="function"><span class="keyword">function</span>(<span class="params">e</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(e.data) <span class="comment">//我爱你</span></span><br><span class="line">    e.source.postMessage(<span class="string">'我不爱你'</span>, e.origin)</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><h6 id="4-websocket"><a href="#4-websocket" class="headerlink" title="4.websocket"></a><font color="#dd0000">4.websocket</font></h6><p>Websocket 是 HTML5 的一个持久化的协议，它实现了浏览器与服务器的全双工通信，同时也是跨域的一种解决方案。WebSocket 和 HTTP 都是应用层协议，都基于 TCP 协议。但是 <strong>WebSocket 是一种双向通信协议，在建立连接之后，WebSocket 的 server 与 client 都能主动向对方发送或接收数据。</strong>同时，WebSocket 在建立连接时需要借助 HTTP 协议，连接建立好了之后 client 与 server 之间的双向通信就与 HTTP 无关了。</p><p>原生 WebSocket API 使用起来不太方便，我们使用<code>Socket.io</code>，它很好地封装了 webSocket 接口，提供了更简单、灵活的接口，也对不支持 webSocket 的浏览器提供了向下兼容。</p><p>我们先来看个例子：本地文件 <code>socket.html</code> 向<code>localhost:3000</code>发生数据和接受数据</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// socket.html</span></span><br><span class="line">&lt;script&gt;</span><br><span class="line">    <span class="keyword">let</span> socket = <span class="keyword">new</span> WebSocket(<span class="string">'ws://localhost:3000'</span>);</span><br><span class="line">    socket.onopen = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">      socket.send(<span class="string">'我爱你'</span>);<span class="comment">//向服务器发送数据</span></span><br><span class="line">    &#125;</span><br><span class="line">    socket.onmessage = <span class="function"><span class="keyword">function</span> (<span class="params">e</span>) </span>&#123;</span><br><span class="line">      <span class="built_in">console</span>.log(e.data);<span class="comment">//接收服务器返回的数据</span></span><br><span class="line">    &#125;</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br><span class="line"><span class="regexp">/</span><span class="regexp">/ server.js</span></span><br><span class="line"><span class="regexp">let express = require('express');</span></span><br><span class="line"><span class="regexp">let app = express();</span></span><br><span class="line"><span class="regexp">let WebSocket = require('ws');/</span><span class="regexp">/记得安装ws</span></span><br><span class="line"><span class="regexp">let wss = new WebSocket.Server(&#123;port:3000&#125;);</span></span><br><span class="line"><span class="regexp">wss.on('connection',function(ws) &#123;</span></span><br><span class="line"><span class="regexp">  ws.on('message', function (data) &#123;</span></span><br><span class="line"><span class="regexp">    console.log(data);</span></span><br><span class="line"><span class="regexp">    ws.send('我不爱你')</span></span><br><span class="line"><span class="regexp">  &#125;);</span></span><br><span class="line"><span class="regexp">&#125;)</span></span><br></pre></td></tr></table></figure><h6 id="5-Node-中间件代理-两次跨域"><a href="#5-Node-中间件代理-两次跨域" class="headerlink" title="5. Node 中间件代理(两次跨域)"></a><font color="#dd0000">5. Node 中间件代理(两次跨域)</font></h6><p>实现原理：<strong>同源策略是浏览器需要遵循的标准，而如果是服务器向服务器请求就无需遵循同源策略。</strong></p><p>代理服务器，需要做以下几个步骤：</p><ul><li>接受客户端请求 。</li><li>将请求 转发给服务器。</li><li>拿到服务器 响应 数据。</li><li>将 响应 转发给客户端。</li></ul><p><img src="/2019/01/30/九种跨域方式实现原理/p3.jpg" alt></p><p>我们先来看个例子：本地文件 <code>index.html</code> 文件，通过代理服务器<code>http://localhost:3000</code>向目标服务器<code>http://localhost:4000</code>请求数据。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// index.html(http://127.0.0.1:5500)</span></span><br><span class="line"> &lt;script src=<span class="string">"https://cdn.bootcss.com/jquery/3.3.1/jquery.min.js"</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line">    &lt;script&gt;</span><br><span class="line">      $.ajax(&#123;</span><br><span class="line">        url: <span class="string">'http://localhost:3000'</span>,</span><br><span class="line">        type: <span class="string">'post'</span>,</span><br><span class="line">        data: &#123; <span class="attr">name</span>: <span class="string">'xiamen'</span>, <span class="attr">password</span>: <span class="string">'123456'</span> &#125;,</span><br><span class="line">        contentType: <span class="string">'application/json;charset=utf-8'</span>,</span><br><span class="line">        success: <span class="function"><span class="keyword">function</span>(<span class="params">result</span>) </span>&#123;</span><br><span class="line">          <span class="built_in">console</span>.log(result) <span class="comment">// &#123;"title":"fontend","password":"123456"&#125;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        error: <span class="function"><span class="keyword">function</span>(<span class="params">msg</span>) </span>&#123;</span><br><span class="line">          <span class="built_in">console</span>.log(msg)</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;)</span><br><span class="line">     &lt;<span class="regexp">/script&gt;</span></span><br><span class="line"><span class="regexp">/</span><span class="regexp">/ server1.js 代理服务器(http:/</span><span class="regexp">/localhost:3000)</span></span><br><span class="line"><span class="regexp">const http = require('http')</span></span><br><span class="line"><span class="regexp">/</span><span class="regexp">/ 第一步：接受客户端请求</span></span><br><span class="line"><span class="regexp">const server = http.createServer((request, response) =&#123;</span></span><br><span class="line"><span class="regexp">  /</span><span class="regexp">/ 代理服务器，直接和浏览器直接交互，需要设置CORS 的首部字段</span></span><br><span class="line"><span class="regexp">  response.writeHead(200, &#123;</span></span><br><span class="line"><span class="regexp">    'Access-Control-Allow-Origin': '*',</span></span><br><span class="line"><span class="regexp">    'Access-Control-Allow-Methods': '*',</span></span><br><span class="line"><span class="regexp">    'Access-Control-Allow-Headers': 'Content-Type'</span></span><br><span class="line"><span class="regexp">  &#125;)</span></span><br><span class="line"><span class="regexp">  /</span><span class="regexp">/ 第二步：将请求转发给服务器</span></span><br><span class="line"><span class="regexp">  const proxyRequest = http</span></span><br><span class="line"><span class="regexp">    .request(</span></span><br><span class="line"><span class="regexp">      &#123;</span></span><br><span class="line"><span class="regexp">        host: '127.0.0.1',</span></span><br><span class="line"><span class="regexp">        port: 4000,</span></span><br><span class="line"><span class="regexp">        url: '/</span><span class="string">',</span></span><br><span class="line"><span class="string">        method: request.method,</span></span><br><span class="line"><span class="string">        headers: request.headers</span></span><br><span class="line"><span class="string">      &#125;,</span></span><br><span class="line"><span class="string">      serverResponse =&#123;</span></span><br><span class="line"><span class="string">        // 第三步：收到服务器的响应</span></span><br><span class="line"><span class="string">        var body = '</span><span class="string">'</span></span><br><span class="line"><span class="string">        serverResponse.on('</span>data<span class="string">', chunk =&#123;</span></span><br><span class="line"><span class="string">          body += chunk</span></span><br><span class="line"><span class="string">        &#125;)</span></span><br><span class="line"><span class="string">        serverResponse.on('</span>end<span class="string">', () =&#123;</span></span><br><span class="line"><span class="string">          console.log('</span>The data is <span class="string">' + body)</span></span><br><span class="line"><span class="string">          // 第四步：将响应结果转发给浏览器</span></span><br><span class="line"><span class="string">          response.end(body)</span></span><br><span class="line"><span class="string">        &#125;)</span></span><br><span class="line"><span class="string">      &#125;</span></span><br><span class="line"><span class="string">    )</span></span><br><span class="line"><span class="string">    .end()</span></span><br><span class="line"><span class="string">&#125;)</span></span><br><span class="line"><span class="string">server.listen(3000, () =&#123;</span></span><br><span class="line"><span class="string">  console.log('</span>The proxyServer is running at http:<span class="comment">//localhost:3000')</span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">// server2.js(http://localhost:4000)</span></span><br><span class="line"><span class="keyword">const</span> http = <span class="built_in">require</span>(<span class="string">'http'</span>)</span><br><span class="line"><span class="keyword">const</span> data = &#123; <span class="attr">title</span>: <span class="string">'fontend'</span>, <span class="attr">password</span>: <span class="string">'123456'</span> &#125;</span><br><span class="line"><span class="keyword">const</span> server = http.createServer((request, response) =&#123;</span><br><span class="line">  <span class="keyword">if</span> (request.url === <span class="string">'/'</span>) &#123;</span><br><span class="line">    response.end(<span class="built_in">JSON</span>.stringify(data))</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line">server.listen(<span class="number">4000</span>, () =&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'The server is running at http://localhost:4000'</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>上述代码经过两次跨域，值得注意的是浏览器向代理服务器发送请求，也遵循同源策略，最后在 <code>index.html</code> 文件打印出<code>{&quot;title&quot;:&quot;fontend&quot;,&quot;password&quot;:&quot;123456&quot;}</code></p><h6 id="6-nginx-反向代理"><a href="#6-nginx-反向代理" class="headerlink" title="6.nginx 反向代理"></a><font color="#dd0000">6.nginx 反向代理</font></h6><p>实现原理类似于 Node 中间件代理，需要你搭建一个中转 nginx 服务器，用于转发请求。</p><p>使用 nginx 反向代理实现跨域，是最简单的跨域方式。只需要修改 nginx 的配置即可解决跨域问题，支持所有浏览器，支持 session，不需要修改任何代码，并且不会影响服务器性能。</p><p>实现思路：通过 nginx 配置一个代理服务器（域名与 domain1 相同，端口不同）做跳板机，反向代理访问 domain2 接口，并且可以顺便修改 cookie 中 domain 信息，方便当前域 cookie 写入，实现跨域登录。</p><p>先下载nginx，然后将 nginx 目录下的 nginx.conf 修改如下:<br></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// proxy服务器</span></span><br><span class="line">server &#123;</span><br><span class="line">    listen       <span class="number">80</span>;</span><br><span class="line">    server_name  www.domain1.com;</span><br><span class="line">    location / &#123;</span><br><span class="line">        proxy_pass   http:<span class="comment">//www.domain2.com:8080;  #反向代理</span></span><br><span class="line">        proxy_cookie_domain www.domain2.com www.domain1.com; #修改cookie里域名</span><br><span class="line">        index  index.html index.htm;</span><br><span class="line"></span><br><span class="line">        # 当用webpack-dev-server等中间件代理接口访问nignx时，此时无浏览器参与，故没有同源限制，下面的跨域配置可不启用</span><br><span class="line">        add_header Access-Control-Allow-Origin http:<span class="comment">//www.domain1.com;  #当前端只跨域不带cookie时，可为*</span></span><br><span class="line">        add_header Access-Control-Allow-Credentials <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><p>最后通过命令行<code>nginx -s reload</code>启动 nginx</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// index.html</span></span><br><span class="line"><span class="keyword">var</span> xhr = <span class="keyword">new</span> XMLHttpRequest();</span><br><span class="line"><span class="comment">// 前端开关：浏览器是否读写cookie</span></span><br><span class="line">xhr.withCredentials = <span class="literal">true</span>;</span><br><span class="line"><span class="comment">// 访问nginx中的代理服务器</span></span><br><span class="line">xhr.open(<span class="string">'get'</span>, <span class="string">'http://www.domain1.com:81/?user=admin'</span>, <span class="literal">true</span>);</span><br><span class="line">xhr.send();</span><br><span class="line"><span class="comment">// server.js</span></span><br><span class="line"><span class="keyword">var</span> http = <span class="built_in">require</span>(<span class="string">'http'</span>);</span><br><span class="line"><span class="keyword">var</span> server = http.createServer();</span><br><span class="line"><span class="keyword">var</span> qs = <span class="built_in">require</span>(<span class="string">'querystring'</span>);</span><br><span class="line">server.on(<span class="string">'request'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">req, res</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> params = qs.parse(req.url.substring(<span class="number">2</span>));</span><br><span class="line">    <span class="comment">// 向前台写cookie</span></span><br><span class="line">    res.writeHead(<span class="number">200</span>, &#123;</span><br><span class="line">        <span class="string">'Set-Cookie'</span>: <span class="string">'l=a123456;Path=/;Domain=www.domain2.com;HttpOnly'</span>   <span class="comment">// HttpOnly:脚本无法读取</span></span><br><span class="line">    &#125;);</span><br><span class="line">    res.write(<span class="built_in">JSON</span>.stringify(params));</span><br><span class="line">    res.end();</span><br><span class="line">&#125;);</span><br><span class="line">server.listen(<span class="string">'8080'</span>);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'Server is running at port 8080...'</span>);</span><br></pre></td></tr></table></figure><h6 id="7-window-name-iframe"><a href="#7-window-name-iframe" class="headerlink" title="7.window.name + iframe"></a><font color="#dd0000">7.window.name + iframe</font></h6><p>window.name 属性的独特之处：name 值在不同的页面（甚至不同域名）加载后依旧存在，并且可以支持非常长的 name 值（2MB）。</p><p>其中 <code>a.html</code> 和 <code>b.html</code> 是同域的，都是<code>http://localhost:3000</code>;而 <code>c.html</code> 是<code>http://localhost:4000</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// a.html(http://localhost:3000/b.html)</span></span><br><span class="line">&lt;iframe src=<span class="string">"http://localhost:4000/c.html"</span> frameborder=<span class="string">"0"</span> onload=<span class="string">"load()"</span> id=<span class="string">"iframe"</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">iframe</span>&gt;</span></span></span><br><span class="line">&lt;script&gt;</span><br><span class="line">    <span class="keyword">let</span> first = <span class="literal">true</span></span><br><span class="line">    <span class="comment">// onload事件会触发2次，第1次加载跨域页，并留存数据于window.name</span></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">load</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(first)&#123;</span><br><span class="line">            <span class="comment">// 第1次onload(跨域页)成功后，切换到同域代理页面</span></span><br><span class="line">            <span class="keyword">let</span> iframe = <span class="built_in">document</span>.getElementById(<span class="string">'iframe'</span>);</span><br><span class="line">            iframe.src = <span class="string">'http://localhost:3000/b.html'</span>;</span><br><span class="line">            first = <span class="literal">false</span>;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="comment">// 第2次onload(同域b.html页)成功后，读取同域window.name中数据</span></span><br><span class="line">            <span class="built_in">console</span>.log(iframe.contentWindow.name);</span><br><span class="line">&#125;</span><br><span class="line">    &#125;</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure><p>b.html 为中间代理页，与 a.html 同域，内容为空。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// c.html(http://localhost:4000/c.html)</span></span><br><span class="line"> &lt;script&gt;</span><br><span class="line">   <span class="built_in">window</span>.name = <span class="string">'我不爱你'</span></span><br><span class="line"> &lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure><p>总结：通过 iframe 的 src 属性由外域转向本地域，跨域数据即由 iframe 的 window.name 从外域传递到本地域。这个就巧妙地绕过了浏览器的跨域访问限制，但同时它又是安全操作。</p><h6 id="8-location-hash-iframe"><a href="#8-location-hash-iframe" class="headerlink" title="8.location.hash + iframe"></a><font color="#dd0000">8.location.hash + iframe</font></h6><p>实现原理： a.html 欲与 c.html 跨域相互通信，通过中间页 b.html 来实现。 三个页面，不同域之间利用 iframe 的 <code>location.hash</code> 传值，相同域之间直接 js 访问来通信。</p><p>具体实现步骤：一开始 a.html 给 c.html 传一个 hash 值，然后 c.html 收到 hash 值后，再把 hash 值传递给 b.html，最后 b.html 将结果放到 a.html 的 hash 值中。<br>同样的，a.html 和 b.html 是同域的，都是<code>http://localhost:3000</code>;而 c.html 是<code>http://localhost:4000</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// a.html</span></span><br><span class="line"> &lt;iframe src=<span class="string">"http://localhost:4000/c.html#iloveyou"</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">iframe</span>&gt;</span></span></span><br><span class="line"> &lt;script&gt;</span><br><span class="line">   <span class="built_in">window</span>.onhashchange = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123; <span class="comment">//检测hash的变化</span></span><br><span class="line">     <span class="built_in">console</span>.log(location.hash);</span><br><span class="line">   &#125;</span><br><span class="line"> &lt;<span class="regexp">/script&gt;</span></span><br><span class="line"><span class="regexp">/</span><span class="regexp">/ b.html</span></span><br><span class="line"><span class="regexp"> &lt;script&gt;</span></span><br><span class="line"><span class="regexp">   window.parent.parent.location.hash = location.hash</span></span><br><span class="line"><span class="regexp">   /</span><span class="regexp">/b.html将结果放到a.html的hash值中，b.html可通过parent.parent访问a.html页面</span></span><br><span class="line"><span class="regexp"> &lt;/</span>script&gt;</span><br><span class="line"><span class="comment">// c.html</span></span><br><span class="line"><span class="built_in">console</span>.log(location.hash);</span><br><span class="line"> <span class="keyword">let</span> iframe = <span class="built_in">document</span>.createElement(<span class="string">'iframe'</span>);</span><br><span class="line"> iframe.src = <span class="string">'http://localhost:3000/b.html#idontloveyou'</span>;</span><br><span class="line"> <span class="built_in">document</span>.body.appendChild(iframe);</span><br></pre></td></tr></table></figure><h6 id="9-document-domain-iframe"><a href="#9-document-domain-iframe" class="headerlink" title="9.document.domain + iframe"></a><font color="#dd0000">9.document.domain + iframe</font></h6><p><strong>该方式只能用于二级域名相同的情况下，比如 <code>a.test.com</code> 和 <code>b.test.com</code> 适用于该方式。</strong><br>只需要给页面添加 <code>document.domain =&#39;test.com&#39;</code> 表示二级域名都相同就可以实现跨域。</p><p>实现原理：两个页面都通过 js 强制设置 <code>document.domain</code> 为基础主域，就实现了同域。</p><p>我们看个例子：页面<code>a.zf1.cn:3000/a.html</code>获取页面<code>b.zf1.cn:3000/b.html</code>中 a 的值</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// a.html</span></span><br><span class="line">&lt;body&gt;</span><br><span class="line"> helloa</span><br><span class="line">  &lt;iframe src=<span class="string">"http://b.zf1.cn:3000/b.html"</span> frameborder=<span class="string">"0"</span> onload=<span class="string">"load()"</span> id=<span class="string">"frame"</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">iframe</span>&gt;</span></span></span><br><span class="line">  &lt;script&gt;</span><br><span class="line">    <span class="built_in">document</span>.domain = <span class="string">'zf1.cn'</span></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">load</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="built_in">console</span>.log(frame.contentWindow.a);</span><br><span class="line">    &#125;</span><br><span class="line">  &lt;<span class="regexp">/script&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>body&gt;</span><br><span class="line"><span class="comment">// b.html</span></span><br><span class="line">&lt;body&gt;</span><br><span class="line">   hellob</span><br><span class="line">   &lt;script&gt;</span><br><span class="line">     <span class="built_in">document</span>.domain = <span class="string">'zf1.cn'</span></span><br><span class="line">     <span class="keyword">var</span> a = <span class="number">100</span>;</span><br><span class="line">   &lt;<span class="regexp">/script&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>body&gt;</span><br></pre></td></tr></table></figure><center><font color="#006600"><strong>三、总 结</strong></font></center><ul><li>CORS 支持所有类型的 HTTP 请求，是跨域 HTTP 请求的根本解决方案</li><li>JSONP 只支持 GET 请求，JSONP 的优势在于支持老式浏览器，以及可以向不支持 CORS 的网站请求数据。</li><li>不管是 Node 中间件代理还是 nginx 反向代理，主要是通过同源策略对服务器不加限制。</li><li>日常工作中，用得比较多的跨域方案是 cors 和 nginx 反向代理</li></ul><center><font color="#006600"><strong>参考文章</strong></font></center><ul><li>跨域资源共享 CORS 详解</li><li>前端面试之道</li><li>window.postMessage</li><li>前端常见跨域解决方案（全）</li><li>深入跨域问题(4) - 利用代理解决跨域</li></ul><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      
      
        &lt;!-- build time:Tue Mar 19 2019 20:23:22 GMT+0800 (GMT+08:00) --&gt;&lt;iframe frameborder=&quot;no&quot; border=&quot;0&quot; marginwidth=&quot;0&quot; marginheight=&quot;0&quot; width=
      
    
    </summary>
    
      <category term="跨域" scheme="https://chen-95.gitee.io/categories/%E8%B7%A8%E5%9F%9F/"/>
    
      <category term="Javascript" scheme="https://chen-95.gitee.io/categories/%E8%B7%A8%E5%9F%9F/Javascript/"/>
    
    
      <category term="Javascript" scheme="https://chen-95.gitee.io/tags/Javascript/"/>
    
      <category term="跨域" scheme="https://chen-95.gitee.io/tags/%E8%B7%A8%E5%9F%9F/"/>
    
      <category term="jsonp" scheme="https://chen-95.gitee.io/tags/jsonp/"/>
    
      <category term="cors" scheme="https://chen-95.gitee.io/tags/cors/"/>
    
      <category term="postMessage" scheme="https://chen-95.gitee.io/tags/postMessage/"/>
    
      <category term="websocket" scheme="https://chen-95.gitee.io/tags/websocket/"/>
    
      <category term="Node中间件代理" scheme="https://chen-95.gitee.io/tags/Node%E4%B8%AD%E9%97%B4%E4%BB%B6%E4%BB%A3%E7%90%86/"/>
    
      <category term="nginx反向代理" scheme="https://chen-95.gitee.io/tags/nginx%E5%8F%8D%E5%90%91%E4%BB%A3%E7%90%86/"/>
    
      <category term="window.name + iframe" scheme="https://chen-95.gitee.io/tags/window-name-iframe/"/>
    
      <category term="location.hash + iframe" scheme="https://chen-95.gitee.io/tags/location-hash-iframe/"/>
    
      <category term="document.domain + iframe" scheme="https://chen-95.gitee.io/tags/document-domain-iframe/"/>
    
  </entry>
  
  <entry>
    <title>JS数字和字符串之间相互转化的纠纷</title>
    <link href="https://chen-95.gitee.io/2019/01/23/5/"/>
    <id>https://chen-95.gitee.io/2019/01/23/5/</id>
    <published>2019-01-23T08:09:45.000Z</published>
    <updated>2019-01-23T10:31:57.000Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Tue Mar 19 2019 20:23:22 GMT+0800 (GMT+08:00) --><blockquote><p>JS数字和字符串之间相互转化的纠纷</p></blockquote><p><img src="/2019/01/23/5/20190314144932.jpg" alt="Js"></p><h1 id="一、字符串转数字"><a href="#一、字符串转数字" class="headerlink" title="一、字符串转数字"></a>一、字符串转数字</h1><h6 id="1-parseInt-函数"><a href="#1-parseInt-函数" class="headerlink" title="1. parseInt() 函数"></a>1. parseInt() 函数</h6><p>parseInt() 函数从string的开始解析，返回一个整数</p><p>parseInt(‘123’) : 返回 123；</p><p>parseInt(‘1234xxx’) : 返回 1234；</p><p>parseInt(‘123.456’) : 返回 123；</p><p>parseInt(‘1 2 3’) : 返回 1；字符串的情况，自会返回第一个数</p><p>parseInt(‘bb cc 12’) : 返回 NaN；字符串第一个不是数，返回nan</p><p>parseInt(‘123’ 321) : 返回 321；</p><p>parseInt(“AF”, 16); 返回 175；会自动把二进制十六进制八进制的转化成数字</p><p>如果解析不到数字，则将返回一个NaN的值，可以用isNaN()函数来检测；</p><p>parseFloat()只会返回小数</p><h6 id="2-字符前加“-”"><a href="#2-字符前加“-”" class="headerlink" title="2. 字符前加“+”"></a>2. 字符前加“+”</h6><p>var n =+”123”:返回 123</p><h6 id="3-字符加“-”"><a href="#3-字符加“-”" class="headerlink" title="3. 字符加“*”"></a>3. 字符加“*”</h6><p>var n =”123”*1:返回 123</p><h6 id="4-字符串数组分割增加"><a href="#4-字符串数组分割增加" class="headerlink" title="4. 字符串数组分割增加"></a>4. 字符串数组分割增加</h6><p>var arr = str.split(“,”) 一个字符串组，用，都分割成多个</p><p>b = a.join(“-“);-是指定的分割符，可以随意，将数组转化成一个字符串</p><h6 id="5-字符串和数字相加返回字符串"><a href="#5-字符串和数字相加返回字符串" class="headerlink" title="5. 字符串和数字相加返回字符串"></a>5. 字符串和数字相加返回字符串</h6><p>console.log(12+”12”):返回”1212”</p><p>console.log(‘12’ + ‘34’)返回’1234’</p><p>console.log(‘12’ + 34 ) 返回’1234’</p><p>console.log(12 + ‘34’’）返回1234’</p><p>console.log(12 + 34 ) 返回46</p><h6 id="6-当字符串和多个数字相加，用括号扩起来"><a href="#6-当字符串和多个数字相加，用括号扩起来" class="headerlink" title="6. 当字符串和多个数字相加，用括号扩起来"></a>6. 当字符串和多个数字相加，用括号扩起来</h6><p><code>(&quot;&lt;img src=&#39;images/&quot; + 2 + 1 + &quot;.jpg&#39;&gt;&quot;)</code> 返回<code>(&quot;&lt;img src=&#39;images/&quot; + 21 + &quot;.jpg&#39;&gt;&quot;)</code></p><p>如果想转成3</p><p><code>(&quot;&lt;img src=&#39;images/&quot; + （2+1）+ &quot;.jpg&#39;&gt;&quot;)</code> 返回<code>(&quot;&lt;img src=&#39;images/&quot; + 3 + &quot;.jpg&#39;&gt;&quot;)</code></p><p>如果前面是数字相加，则可以先把数字加起来</p><p>var a = 10 + 20 + ‘abc’ + ‘cd’; 返回a的值为:30abccd</p><h6 id="7-eval（）如果想进行字符串的运算"><a href="#7-eval（）如果想进行字符串的运算" class="headerlink" title="7. eval（）如果想进行字符串的运算"></a>7. eval（）如果想进行字符串的运算</h6><p>eval(“x=10;y=20;document.write(x*y)”) 返回200</p><p>document.write(eval(“2+2”))　　　　　　返回4</p><p>var x=10</p><p>document.write(eval(x+17）　　　　　　返回27</p><h1 id="二、数字转字符串"><a href="#二、数字转字符串" class="headerlink" title="二、数字转字符串"></a>二、数字转字符串</h1><h6 id="1-tostring（）"><a href="#1-tostring（）" class="headerlink" title="1. tostring（）"></a>1. tostring（）</h6><p>n = 100</p><p>x = n.toString() =&gt; “100”或是（100）toString() //tostring（2/16/8）还可以实现进制的转化</p><h6 id="2-数字-任意字符串“”"><a href="#2-数字-任意字符串“”" class="headerlink" title="2. 数字+任意字符串“”"></a>2. 数字+任意字符串“”</h6><p>var n = 1234;</p><p>var nn = 1234+””</p><p><strong>关于字符串</strong></p><p>判断字符串是否包含 包含返回下标 不包含返回-1</p><p>var i = str.indexOf(“x”)</p><p>最后一次下标的字符串的字符串</p><p>var i = str .lastIndexOf(“”)</p><p>转化大小写</p><p>str.toUpperCase() 转大写</p><p>str.tolowerCase() 转小写</p><p>截取字符串 字符串.substr（”从哪开始”,”截取几个”）</p><p>str.substr(0,5)</p><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      
      
        &lt;!-- build time:Tue Mar 19 2019 20:23:22 GMT+0800 (GMT+08:00) --&gt;&lt;blockquote&gt;&lt;p&gt;JS数字和字符串之间相互转化的纠纷&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;&lt;img src=&quot;/2019/01/23/5
      
    
    </summary>
    
      <category term="Javascript" scheme="https://chen-95.gitee.io/categories/Javascript/"/>
    
    
      <category term="Javascript" scheme="https://chen-95.gitee.io/tags/Javascript/"/>
    
      <category term="字符串" scheme="https://chen-95.gitee.io/tags/%E5%AD%97%E7%AC%A6%E4%B8%B2/"/>
    
  </entry>
  
  <entry>
    <title>Hexo文章简单加密访问</title>
    <link href="https://chen-95.gitee.io/2019/01/21/0/"/>
    <id>https://chen-95.gitee.io/2019/01/21/0/</id>
    <published>2019-01-21T08:09:45.000Z</published>
    <updated>2019-01-25T10:31:57.000Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Tue Mar 19 2019 20:23:22 GMT+0800 (GMT+08:00) --><blockquote><p>即使是最简单的密码功能也足以阻止90%的访问者.</p></blockquote><h1 id="一、前言"><a href="#一、前言" class="headerlink" title="一、前言"></a>一、前言</h1><p>一开始使用<strong>Hexo</strong>的时候，是喜欢它的简单：因为可以直接编译成纯静态文件，方便部署。可是在使用过程中，又发现诸多不便：也因为它全是纯静态页面。突发奇想，能不能给文章加上一个加密访问的功能……</p><p>在经过实践之后，运用到自己博客中，发现有不少的访客对这个功能甚是感兴趣，所以也就在这里找个时间写写自己加密的小诀窍吧算是。</p><h1 id="二、原理"><a href="#二、原理" class="headerlink" title="二、原理"></a>二、原理</h1><p>由于 Hexo 最终编译出来的文件是纯静态的，也就意味着文章的所有信息其实还是原封不动展示在页面中的，当你输入一篇文章的网址，所有的内容就已经跟随网络传输过来了。那我博客使用的加密是怎么实现的呢？</p><p>这就要讲到 js 的阻塞机制了，在以往的经验中，当页面中有调用<code>alert();</code>函数的时候，整个页面会停止运行，直到你点击确定之后，页面的中的代码才会继续执行下去。我们这里需要的也是这样一个假象，阻止整个页面的渲染，直到你输入了正确的密码才能让页面继续渲染实际的文章。可是<code>alert</code>只有提醒的功能，没有输入的功能，所以这里要用到的是<code>promt</code>函数。例子参见如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> password = promt(<span class="string">'请输入文章密码'</span>);</span><br><span class="line">alert(password);</span><br></pre></td></tr></table></figure><h1 id="三、实现"><a href="#三、实现" class="headerlink" title="三、实现"></a>三、实现</h1><p>究竟要把上述代码加在哪里呢？<br>找到<code>themes-&gt;next-&gt;layout-&gt;_partials-&gt;head.swig</code>文件。<br>按道理是添加在任何地方都行，但是推荐加在所有的<code>&lt;meta&gt;</code>标签之后，个人建议，仅做参考。以下是我加的代码：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="keyword">if</span>(<span class="string">'&#123;&#123; page.password &#125;&#125;'</span>)&#123;</span><br><span class="line"><span class="keyword">if</span> (prompt(<span class="string">'请输入文章密码'</span>,<span class="string">''</span>) !== <span class="string">'&#123;&#123; page.password &#125;&#125;'</span>)&#123;</span><br><span class="line">alert(<span class="string">'密码错误！'</span>);</span><br><span class="line">history.back();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;)();</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure><p>之后，在你想要加密的文章的头文件里添加上<code>password: 123456（ps：123456是你想设置的密码）</code>即可。</p><p>注意，这里仅针对Hexo平台的next主题。但是，它的代码和思想是通用的，你在Hexo的其他主题，甚至是Jekyll的主题里也是可以做到的，只是要摆放的位置会不一样。<br>如果你好奇<code>page.password</code>是什么东西，那么恭喜你，你对 Hexo 的结构还是很熟悉的。<code>page</code>这个变量就是你在<code>hexo new</code>的时候生成文件中最顶部的东西，以下我给出这篇文章的头部参考：<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">title: Hexo文章简单加密访问</span><br><span class="line">date: 2019-01-21 16:09:45</span><br><span class="line">tags:</span><br><span class="line">    - 加密</span><br><span class="line">    - Hexo</span><br><span class="line">categories:</span><br><span class="line">    - Hexo</span><br><span class="line">password: 123456</span><br><span class="line">---</span><br></pre></td></tr></table></figure><p></p><p>这样我们就好像使用静态页面完成了部分只有动态页面能完成的东西。</p><h1 id="四、总结"><a href="#四、总结" class="headerlink" title="四、总结"></a>四、总结</h1><p>本来只是简单的纯静态页面，但是经历不断的更新和改进，便有了静态页面统计访问量的工具；有了静态页面添加评论的工具；甚至有了静态页面进行搜索的功能等等。个人想出来的静态页面加密功能根本算不上技术上的创新，只能说是一点小技巧的应用吧，小技巧也能迷惑住大家的眼睛，也算是喜事一件。</p><h1 id="五、后记"><a href="#五、后记" class="headerlink" title="五、后记"></a>五、后记</h1><ul><li>已将博客加密功能改成使用 <code>hexo-blog-encrypt</code> 插件加密，最新密码功能查看效果，具体请参见我的博客文档<ul><li>附上传送门：<a href="https://chen-95.gitee.io/2019/01/25/4/">https://chen-95.gitee.io/2019/01/25/4/</a></li></ul></li></ul><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      
      
        &lt;!-- build time:Tue Mar 19 2019 20:23:22 GMT+0800 (GMT+08:00) --&gt;&lt;blockquote&gt;&lt;p&gt;即使是最简单的密码功能也足以阻止90%的访问者.&lt;/p&gt;&lt;/blockquote&gt;&lt;h1 id=&quot;一、前言&quot;&gt;&lt;a hr
      
    
    </summary>
    
      <category term="Hexo" scheme="https://chen-95.gitee.io/categories/Hexo/"/>
    
    
      <category term="加密" scheme="https://chen-95.gitee.io/tags/%E5%8A%A0%E5%AF%86/"/>
    
      <category term="Hexo" scheme="https://chen-95.gitee.io/tags/Hexo/"/>
    
  </entry>
  
  <entry>
    <title>野狗云帐号分享</title>
    <link href="https://chen-95.gitee.io/2019/01/21/%E9%87%8E%E7%8B%97%E4%BA%91%E5%B8%90%E5%8F%B7%E5%88%86%E4%BA%AB/"/>
    <id>https://chen-95.gitee.io/2019/01/21/野狗云帐号分享/</id>
    <published>2019-01-21T01:09:45.000Z</published>
    <updated>2019-01-21T01:31:57.000Z</updated>
    
    <content type="html"><![CDATA[<script src="//cdn.bootcss.com/jquery/1.11.3/jquery.min.js"></script><div id="hbe-security">  <div class="hbe-input-container">  <input type="password" class="hbe-form-control" id="pass" placeholder="请输入密码获取野狗云帐号..." />    <label for="pass">请输入密码获取野狗云帐号...</label>    <div class="bottom-line"></div>  </div></div><div id="decryptionError" style="display: none;">Incorrect Password!</div><div id="noContentError" style="display: none;">No content to display!</div><div id="encrypt-blog" style="display:none">U2FsdGVkX1+wj/0gmDBOwrqkORA4BKtw+GnvO7Wn+WAN3Lg8Crzy+z94+ZijDjDB4nh4y5taOk4xSWM807siZd/6s1TAjzFsNVf2yIepMogC2rPbIgyGtzj+9eWtJLzPyKU6G11SOJE0+19D1F+i9Kfnrav563HPxDdFQdN25MxpEmX6R8yMxZ0WaFwF7j5svCi/cayB9oSkzEGPLOs0ItzrMrxYa9PX721tinjaQUqFLW62Pn/NqeZ0YOLOw7/8gTDFhYnWYv/iTP5ZDpk3mOhQI0AL7yD5mPasKgfX/KTAFKZmnLafuLg9kafQKYp9Stjsb0KGu5nZLxH8xAHZgWHZERi36PwR+9hiK/6hDbVtNbFgLFeIbnkJ6uH/oy0I6NCdjm/UlETJyUvjSQk0SA8fxOQq4QW94b93kMtVojYtASPfNpukHpEiDHUi4Xq0ETs9Pif8aOp0PnKQR32zmxPgQwjfiu+mET+UeNOfYnwTc3vFlLR/GhGyt47IhRpWd8WwicFjRAAL6NdoG2S2FEoZvcut6CzOm32NBfnF8HljuTClj5OfD8ot7afAZFHNAKimhaLEFna5L6PqgCT/245QsWDgR/lFRpIeByoPKGCE75W+MrdefjgRMq7LzOBaHmrJ3ZjfHO8FQGIauEp0+IZCxPfXDqpxhQe5IhdGnkUIzFWvpRc6YF54cSeB9ubwhjxuywWBdtqdn6T3x+4rhwR0O91JWyet9++VsmhcBlseSeShF4l1UoiHbfMqofH3UT08ukx/cfucrPiGa14qC/uXpj7z6W3JXhnmLn5zqcfhPAZpr5zPu51aSDb+Ibri2USXf1i/2eMrAcGyGnyiSQc5WxsnwALXrscvmc17VKjl0bDq+b/NABd1mn9awX3uNyts7N5T2zemqhxBRCHbXeBLVAWcSi2Jjor2e+jTjk3d8W63uLhu4/4dojDAWeUV/v1FKoa7mZSa6tEeugN9wukdk2Crthbj8dCXTIOXvmH/6ka56gDw8KrUgrRvzFvVr2gLSEUS7+DgIbK7RIiwzaqj9F0WSvdXbmCYHvJ0l82WbrltvzZnLlhraq4xeyXQm0ntiFoTtrUscD7p/5BatZAT6VZINntzFa/RA0of8OJUNEEOUZ13YnMh4WjHQD7ZCkrEPVEYzCXmDYYbxJJP7aoYkUE/Uv5WIkHnEddXC7g=</div><script src="/lib/crypto-js.js"></script><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
    
    <summary type="html">
    
      这是一篇加密文章，内容是免费野狗云帐号分享！&lt;br/&gt;&lt;br/&gt;此文章密码：123456
    
    </summary>
    
      <category term="野狗云" scheme="https://chen-95.gitee.io/categories/%E9%87%8E%E7%8B%97%E4%BA%91/"/>
    
    
      <category term="野狗云" scheme="https://chen-95.gitee.io/tags/%E9%87%8E%E7%8B%97%E4%BA%91/"/>
    
      <category term="帐号" scheme="https://chen-95.gitee.io/tags/%E5%B8%90%E5%8F%B7/"/>
    
      <category term="分享" scheme="https://chen-95.gitee.io/tags/%E5%88%86%E4%BA%AB/"/>
    
  </entry>
  
  <entry>
    <title>Hexo NexT主题添加点击爱心效果</title>
    <link href="https://chen-95.gitee.io/2019/01/12/3/"/>
    <id>https://chen-95.gitee.io/2019/01/12/3/</id>
    <published>2019-01-12T08:08:13.000Z</published>
    <updated>2019-01-13T04:01:51.000Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Tue Mar 19 2019 20:23:22 GMT+0800 (GMT+08:00) --><h2 id="1-创建js文件"><a href="#1-创建js文件" class="headerlink" title="1.创建js文件"></a>1.创建js文件</h2><p>在<code>/themes/next/source/js/src</code>下新建文件 <strong>clicklove.js</strong> ，接着把该链接下的代码拷贝粘贴到 <strong>clicklove.js</strong> 文件中。<br>代码如下：<br></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">!<span class="function"><span class="keyword">function</span>(<span class="params">e,t,a</span>)</span>&#123;<span class="function"><span class="keyword">function</span> <span class="title">n</span>(<span class="params"></span>)</span>&#123;c(<span class="string">".heart&#123;width: 10px;height: 10px;position: fixed;background: #f00;transform: rotate(45deg);-webkit-transform: rotate(45deg);-moz-transform: rotate(45deg);&#125;.heart:after,.heart:before&#123;content: '';width: inherit;height: inherit;background: inherit;border-radius: 50%;-webkit-border-radius: 50%;-moz-border-radius: 50%;position: fixed;&#125;.heart:after&#123;top: -5px;&#125;.heart:before&#123;left: -5px;&#125;"</span>),o(),r()&#125;<span class="function"><span class="keyword">function</span> <span class="title">r</span>(<span class="params"></span>)</span>&#123;<span class="keyword">for</span>(<span class="keyword">var</span> e=<span class="number">0</span>;e&lt;d.length;e++)d[e].alpha&lt;=<span class="number">0</span>?(t.body.removeChild(d[e].el),d.splice(e,<span class="number">1</span>)):(d[e].y--,d[e].scale+=<span class="number">.004</span>,d[e].alpha-=<span class="number">.013</span>,d[e].el.style.cssText=<span class="string">"left:"</span>+d[e].x+<span class="string">"px;top:"</span>+d[e].y+<span class="string">"px;opacity:"</span>+d[e].alpha+<span class="string">";transform:scale("</span>+d[e].scale+<span class="string">","</span>+d[e].scale+<span class="string">") rotate(45deg);background:"</span>+d[e].color+<span class="string">";z-index:99999"</span>);requestAnimationFrame(r)&#125;<span class="function"><span class="keyword">function</span> <span class="title">o</span>(<span class="params"></span>)</span>&#123;<span class="keyword">var</span> t=<span class="string">"function"</span>==<span class="keyword">typeof</span> e.onclick&amp;&amp;e.onclick;e.onclick=<span class="function"><span class="keyword">function</span>(<span class="params">e</span>)</span>&#123;t&amp;&amp;t(),i(e)&#125;&#125;<span class="function"><span class="keyword">function</span> <span class="title">i</span>(<span class="params">e</span>)</span>&#123;<span class="keyword">var</span> a=t.createElement(<span class="string">"div"</span>);a.className=<span class="string">"heart"</span>,d.push(&#123;<span class="attr">el</span>:a,<span class="attr">x</span>:e.clientX<span class="number">-5</span>,<span class="attr">y</span>:e.clientY<span class="number">-5</span>,<span class="attr">scale</span>:<span class="number">1</span>,<span class="attr">alpha</span>:<span class="number">1</span>,<span class="attr">color</span>:s()&#125;),t.body.appendChild(a)&#125;<span class="function"><span class="keyword">function</span> <span class="title">c</span>(<span class="params">e</span>)</span>&#123;<span class="keyword">var</span> a=t.createElement(<span class="string">"style"</span>);a.type=<span class="string">"text/css"</span>;<span class="keyword">try</span>&#123;a.appendChild(t.createTextNode(e))&#125;<span class="keyword">catch</span>(t)&#123;a.styleSheet.cssText=e&#125;t.getElementsByTagName(<span class="string">"head"</span>)[<span class="number">0</span>].appendChild(a)&#125;<span class="function"><span class="keyword">function</span> <span class="title">s</span>(<span class="params"></span>)</span>&#123;<span class="keyword">return</span><span class="string">"rgb("</span>+~~(<span class="number">255</span>*<span class="built_in">Math</span>.random())+<span class="string">","</span>+~~(<span class="number">255</span>*<span class="built_in">Math</span>.random())+<span class="string">","</span>+~~(<span class="number">255</span>*<span class="built_in">Math</span>.random())+<span class="string">")"</span>&#125;<span class="keyword">var</span> d=[];e.requestAnimationFrame=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;<span class="keyword">return</span> e.requestAnimationFrame||e.webkitRequestAnimationFrame||e.mozRequestAnimationFrame||e.oRequestAnimationFrame||e.msRequestAnimationFrame||<span class="function"><span class="keyword">function</span>(<span class="params">e</span>)</span>&#123;setTimeout(e,<span class="number">1e3</span>/<span class="number">60</span>)&#125;&#125;(),n()&#125;(<span class="built_in">window</span>,<span class="built_in">document</span>);</span><br></pre></td></tr></table></figure><p></p><h2 id="2-修改-layout-swig"><a href="#2-修改-layout-swig" class="headerlink" title="2.修改_layout.swig"></a>2.修改_layout.swig</h2><p>在<code>\themes\next\layout\_layout.swig</code>文件末尾添加：<br></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 页面点击小红心 --&gt;</span><br><span class="line">&lt;script type=<span class="string">"text/javascript"</span> src=<span class="string">"/js/src/clicklove.js"</span>&gt;&lt;/script&gt;</span><br></pre></td></tr></table></figure><p></p><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      
      
        &lt;!-- build time:Tue Mar 19 2019 20:23:22 GMT+0800 (GMT+08:00) --&gt;&lt;h2 id=&quot;1-创建js文件&quot;&gt;&lt;a href=&quot;#1-创建js文件&quot; class=&quot;headerlink&quot; title=&quot;1.创建js文件&quot;&gt;&lt;
      
    
    </summary>
    
      <category term="Javascript" scheme="https://chen-95.gitee.io/categories/Javascript/"/>
    
      <category term="Hexo" scheme="https://chen-95.gitee.io/categories/Javascript/Hexo/"/>
    
    
      <category term="Hexo" scheme="https://chen-95.gitee.io/tags/Hexo/"/>
    
      <category term="Next" scheme="https://chen-95.gitee.io/tags/Next/"/>
    
      <category term="点击效果" scheme="https://chen-95.gitee.io/tags/%E7%82%B9%E5%87%BB%E6%95%88%E6%9E%9C/"/>
    
  </entry>
  
  <entry>
    <title>CSS实现向右导航icon</title>
    <link href="https://chen-95.gitee.io/2019/01/08/CSS%E5%AE%9E%E7%8E%B0%E5%90%91%E5%8F%B3%E5%AF%BC%E8%88%AAicon/"/>
    <id>https://chen-95.gitee.io/2019/01/08/CSS实现向右导航icon/</id>
    <published>2019-01-08T11:09:45.000Z</published>
    <updated>2019-01-08T11:55:24.000Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Tue Mar 19 2019 20:23:22 GMT+0800 (GMT+08:00) --><blockquote><p>对于看过CSS绘制三角形的童鞋来说，实现向右导航 icon 很好理解，可能大家稍加即可知晓实现方式。是的，只需要设置一个元素的相邻 border，之后旋转一下即可。</p></blockquote><h3 id="HTML"><a href="#HTML" class="headerlink" title="HTML"></a>HTML</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">id</span>=<span class="string">"right-arrow"</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="CSS"><a href="#CSS" class="headerlink" title="CSS"></a>CSS</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-id">#right-arrow</span> &#123;</span><br><span class="line">    <span class="attribute">display</span>: inline-block;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">17px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">17px</span>;</span><br><span class="line">    <span class="attribute">border-top</span>: <span class="number">2px</span> solid red;</span><br><span class="line">    <span class="attribute">border-right</span>: <span class="number">2px</span> solid red;</span><br><span class="line">    <span class="attribute">transform</span>: <span class="built_in">rotate</span>(45deg);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="解析"><a href="#解析" class="headerlink" title="解析"></a>解析</h4><ul><li>给 span 元素设置合适的宽高，到达要求的效果大小</li><li>设置元素的两个相邻 border，宽度合适即可</li><li>将元素旋转 45 度即为向右导航 icon 效果</li><li>border 的颜色为 icon 的颜色</li></ul><h4 id="运行效果"><a href="#运行效果" class="headerlink" title="运行效果"></a>运行效果</h4><p><img src="/2019/01/08/CSS实现向右导航icon/icon.png" alt></p><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      
      
        &lt;!-- build time:Tue Mar 19 2019 20:23:22 GMT+0800 (GMT+08:00) --&gt;&lt;blockquote&gt;&lt;p&gt;对于看过CSS绘制三角形的童鞋来说，实现向右导航 icon 很好理解，可能大家稍加即可知晓实现方式。是的，只需要设置一个
      
    
    </summary>
    
      <category term="css" scheme="https://chen-95.gitee.io/categories/css/"/>
    
    
      <category term="css" scheme="https://chen-95.gitee.io/tags/css/"/>
    
      <category term="icon" scheme="https://chen-95.gitee.io/tags/icon/"/>
    
  </entry>
  
  <entry>
    <title>CSS 实现关闭 icon</title>
    <link href="https://chen-95.gitee.io/2019/01/08/CSS%E5%AE%9E%E7%8E%B0%E5%85%B3%E9%97%ADicon/"/>
    <id>https://chen-95.gitee.io/2019/01/08/CSS实现关闭icon/</id>
    <published>2019-01-08T08:09:45.000Z</published>
    <updated>2019-01-09T10:31:57.000Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Tue Mar 19 2019 20:23:22 GMT+0800 (GMT+08:00) --><blockquote><p>本文介绍关闭 icon 的实现。关闭 icon 有两条线组成，所以很简单的设想就是两条横线，分别旋转不同角度即可。</p></blockquote><h3 id="HTML"><a href="#HTML" class="headerlink" title="HTML"></a>HTML</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">id</span>=<span class="string">"close"</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="CSS"><a href="#CSS" class="headerlink" title="CSS"></a>CSS</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-id">#close</span> &#123;</span><br><span class="line">    <span class="attribute">display</span>: inline-block;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">23px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">2px</span>;</span><br><span class="line">    <span class="attribute">background</span>: red;</span><br><span class="line">    <span class="attribute">transform</span>: <span class="built_in">rotate</span>(45deg);</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-id">#close</span><span class="selector-pseudo">::after</span> &#123;</span><br><span class="line">    <span class="attribute">content</span>: <span class="string">''</span>;</span><br><span class="line">    <span class="attribute">display</span>: block;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">23px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">2px</span>;</span><br><span class="line">    <span class="attribute">background</span>: red;</span><br><span class="line">    <span class="attribute">transform</span>: <span class="built_in">rotate</span>(-90deg);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="解析"><a href="#解析" class="headerlink" title="解析"></a>解析</h4><ul><li>给 span 元素设置合适的宽高，到达要求的效果大小</li><li>旋转 span 元素，实现一条线的效果</li><li>添加 ::after 伪元素，设置和 span 相同的宽高（注意此处 display 值应为 block，否则设置宽高无效）</li><li>旋转 ::after 伪元素。由于基准元素 span 已经旋转，伪元素旋转参考点不是水平坐标系，而是旋转后的 span 元素，将伪元素旋转 90 度或 -90 度均可</li><li>其中设置的背景色即为 icon 的颜色</li></ul><h4 id="运行效果"><a href="#运行效果" class="headerlink" title="运行效果"></a>运行效果</h4><p><img src="/2019/01/08/CSS实现关闭icon/icon.png" alt></p><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      
      
        &lt;!-- build time:Tue Mar 19 2019 20:23:22 GMT+0800 (GMT+08:00) --&gt;&lt;blockquote&gt;&lt;p&gt;本文介绍关闭 icon 的实现。关闭 icon 有两条线组成，所以很简单的设想就是两条横线，分别旋转不同角度即可。&lt;/p
      
    
    </summary>
    
      <category term="css" scheme="https://chen-95.gitee.io/categories/css/"/>
    
    
      <category term="css" scheme="https://chen-95.gitee.io/tags/css/"/>
    
      <category term="icon" scheme="https://chen-95.gitee.io/tags/icon/"/>
    
  </entry>
  
  <entry>
    <title>匿名函数、嵌套函数、闭包是怎么回事？</title>
    <link href="https://chen-95.gitee.io/2019/01/08/2/"/>
    <id>https://chen-95.gitee.io/2019/01/08/2/</id>
    <published>2019-01-08T00:58:07.000Z</published>
    <updated>2019-01-08T04:01:51.000Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Tue Mar 19 2019 20:23:22 GMT+0800 (GMT+08:00) --><hr><h6 id="匿名函数：-指的是-没有函数名的函数"><a href="#匿名函数：-指的是-没有函数名的函数" class="headerlink" title="匿名函数： 指的是 没有函数名的函数"></a>匿名函数： 指的是 没有函数名的函数</h6><p><code>function (){ console.log(&#39;匿名函数&#39;) }</code></p><h6 id="嵌套函数呢-？-请看代码："><a href="#嵌套函数呢-？-请看代码：" class="headerlink" title="嵌套函数呢 ？ 请看代码："></a>嵌套函数呢 ？ 请看代码：</h6><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">test</span> (<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> sum = <span class="number">20</span>;</span><br><span class="line">    <span class="comment">//内嵌函数</span></span><br><span class="line">    demo = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        alert(sum);</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'我是嵌套函数'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如代码所示，函数内部嵌入函数，称之为嵌套函数。</p><h6 id="那闭包又是什么呢？"><a href="#那闭包又是什么呢？" class="headerlink" title="那闭包又是什么呢？"></a>那闭包又是什么呢？</h6><p>不多说，看代码<br></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">demo</span>(<span class="params"></span>)</span>&#123; </span><br><span class="line">    <span class="keyword">var</span> num = <span class="number">0</span>; </span><br><span class="line">    <span class="comment">// 返回一个函数 </span></span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123; </span><br><span class="line">        alert( num+<span class="number">1</span> ); </span><br><span class="line">    &#125; </span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//将返回的函数赋值给 add 变量</span></span><br><span class="line"><span class="keyword">var</span> add = demo();</span><br><span class="line"><span class="comment">// add就是一个闭包</span></span><br><span class="line">add();</span><br></pre></td></tr></table></figure><p></p><p>这么看，感觉像是，只要是嵌套函数，且能访问上一层作用域的变量就是闭包。 是这样吗？</p><p>我们知道，js中，分为全局作用域，局部作用域，每个函数也就相等于一个局部作用域。</p><p>同理，变量，也分为全局变量和局部变量。 有什么区别呢？</p><p>在浏览器中，全局作用域对象是 window，也就是说页面一打开，window对象就存在。</p><p>在js中，每个函数是局部作用域，局部变量会随着 函数的执行创建和执行完毕后销毁。</p><p>而全局变量，只要页面不关闭，则会一直存在。并不会随着函数的执行完毕而销毁。</p><p>那么和闭包有什么关系呢？</p><p>在 “javaScript高级程序” 这本书有讲到过“作用域链”的概念, 特殊之处，在于函数内部可以直接读取全局变量。</p><p>而函数外部却不能读取函数内部的变量。</p><p>也就是说，作用域链就像只能往上不能往下的阶梯。我们看段代码理解</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> name = <span class="string">"window"</span>;</span><br><span class="line"><span class="keyword">var</span> age = <span class="number">20</span>;</span><br><span class="line">dmeo();</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">demo</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> age = <span class="number">21</span>;</span><br><span class="line">    <span class="built_in">console</span>.log(name); <span class="comment">// window</span></span><br><span class="line">    <span class="built_in">console</span>.log(age); <span class="comment">//21</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在执行 demo() 函数时，就会创建一个通往全局作用域链，保存着当前作用域的变量，以便查找返回。</p><p>在执行 console.log( name ) 这段代码时，会搜寻当前作用域( demo函数 ) 中是否存在 name 变量，因当前作用域不存在，所以在往上找到全局变量 name ，因此返回 window;</p><p>在执行 console.log( age ) 这段代码时， 也会搜寻 当前作用域(demo函数) 中是否存在 age 变量，因为存在，所以返回 21。</p><p>既然机制是只能往上读， 那么考虑一个问题，怎么在外部读取内部函数的变量呢？</p><p>办法不是没有，稍微变通下即可。这就需要用到闭包的概念，</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">f1</span>(<span class="params"></span>)</span>&#123; </span><br><span class="line">    <span class="keyword">var</span> num = <span class="number">0</span> ; </span><br><span class="line">    <span class="comment">//定义内部函数 </span></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">f2</span>(<span class="params"></span>)</span>&#123; </span><br><span class="line">        <span class="keyword">return</span> num + <span class="number">1</span>; </span><br><span class="line">    &#125; </span><br><span class="line">    <span class="comment">//返回 f2函数引用 </span></span><br><span class="line">    retufn f2; </span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// bar 变量也指向 f2 函数，在此也是一个闭包</span></span><br><span class="line"><span class="keyword">var</span> bar = f1();</span><br><span class="line"><span class="comment">//执行</span></span><br><span class="line">bar(); <span class="comment">// 1;</span></span><br></pre></td></tr></table></figure><p>我们知道，函数中的变量会随着函数的执行完毕后会被销毁。而如上代码，f1()函数执行完毕后，将f2函数赋值给一个全局变量，而f2函数的变量又依赖f1的num变量，因此，f1中的num变量并不会随着f1的函数执行完毕后而销毁。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> name = <span class="string">"the window"</span>; </span><br><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">    name : <span class="string">'the obj'</span>, </span><br><span class="line">    getName : <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123; </span><br><span class="line">        <span class="keyword">return</span> funciton()&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">this</span>.name; </span><br><span class="line">        &#125; </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//执行 getName返回的函数</span></span><br><span class="line">alert(obj.getName()());</span><br></pre></td></tr></table></figure><p>我们看调用函数分析， 分成两部分执行。 先来看 obj.getName(); 此时getName函数由 obj对象调用，因此this的值是 obj。 但此时并不是输出而是返回一个函数。</p><p>再加上一个(); 执行返回的函数，但此时返回的函数并没有任何对象调用，当不是对象本身调用，this的值会被提升到 window对象。因此输出的是 “the window”</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> name = <span class="string">"the Window"</span>;<span class="keyword">var</span> obj = &#123;</span><br><span class="line">    name : <span class="string">"the obj"</span>,</span><br><span class="line">    getName : funciton()&#123;</span><br><span class="line">        <span class="keyword">var</span> that = <span class="keyword">this</span>; </span><br><span class="line">        <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123; </span><br><span class="line">            <span class="keyword">return</span> that.name;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//执行 getName 返回的函数</span></span><br><span class="line">alert(obj.getName()());</span><br></pre></td></tr></table></figure><p>看了上面的题目，这个应该小意思吧，你说呢 ？</p><hr><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      
      
        &lt;!-- build time:Tue Mar 19 2019 20:23:22 GMT+0800 (GMT+08:00) --&gt;&lt;hr&gt;&lt;h6 id=&quot;匿名函数：-指的是-没有函数名的函数&quot;&gt;&lt;a href=&quot;#匿名函数：-指的是-没有函数名的函数&quot; class=&quot;header
      
    
    </summary>
    
      <category term="Javascript" scheme="https://chen-95.gitee.io/categories/Javascript/"/>
    
    
      <category term="Javascript" scheme="https://chen-95.gitee.io/tags/Javascript/"/>
    
      <category term="匿名函数" scheme="https://chen-95.gitee.io/tags/%E5%8C%BF%E5%90%8D%E5%87%BD%E6%95%B0/"/>
    
      <category term="嵌套函数" scheme="https://chen-95.gitee.io/tags/%E5%B5%8C%E5%A5%97%E5%87%BD%E6%95%B0/"/>
    
      <category term="闭包" scheme="https://chen-95.gitee.io/tags/%E9%97%AD%E5%8C%85/"/>
    
  </entry>
  
  <entry>
    <title>Javascript 535种方式！实现页面重载</title>
    <link href="https://chen-95.gitee.io/2019/01/05/1/"/>
    <id>https://chen-95.gitee.io/2019/01/05/1/</id>
    <published>2019-01-05T13:41:12.000Z</published>
    <updated>2019-01-05T15:01:51.000Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Tue Mar 19 2019 20:23:22 GMT+0800 (GMT+08:00) --><h3 id="下文整理了535种方法来实现刷新一下页面，没有验证，权做餐后谈资收藏一下！"><a href="#下文整理了535种方法来实现刷新一下页面，没有验证，权做餐后谈资收藏一下！" class="headerlink" title="下文整理了535种方法来实现刷新一下页面，没有验证，权做餐后谈资收藏一下！"></a>下文整理了535种方法来实现刷新一下页面，没有验证，权做餐后谈资收藏一下！</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br><span class="line">383</span><br><span class="line">384</span><br><span class="line">385</span><br><span class="line">386</span><br><span class="line">387</span><br><span class="line">388</span><br><span class="line">389</span><br><span class="line">390</span><br><span class="line">391</span><br><span class="line">392</span><br><span class="line">393</span><br><span class="line">394</span><br><span class="line">395</span><br><span class="line">396</span><br><span class="line">397</span><br><span class="line">398</span><br><span class="line">399</span><br><span class="line">400</span><br><span class="line">401</span><br><span class="line">402</span><br><span class="line">403</span><br><span class="line">404</span><br><span class="line">405</span><br><span class="line">406</span><br><span class="line">407</span><br><span class="line">408</span><br><span class="line">409</span><br><span class="line">410</span><br><span class="line">411</span><br><span class="line">412</span><br><span class="line">413</span><br><span class="line">414</span><br><span class="line">415</span><br><span class="line">416</span><br><span class="line">417</span><br><span class="line">418</span><br><span class="line">419</span><br><span class="line">420</span><br><span class="line">421</span><br><span class="line">422</span><br><span class="line">423</span><br><span class="line">424</span><br><span class="line">425</span><br><span class="line">426</span><br><span class="line">427</span><br><span class="line">428</span><br><span class="line">429</span><br><span class="line">430</span><br><span class="line">431</span><br><span class="line">432</span><br><span class="line">433</span><br><span class="line">434</span><br><span class="line">435</span><br><span class="line">436</span><br><span class="line">437</span><br><span class="line">438</span><br><span class="line">439</span><br><span class="line">440</span><br><span class="line">441</span><br><span class="line">442</span><br><span class="line">443</span><br><span class="line">444</span><br><span class="line">445</span><br><span class="line">446</span><br><span class="line">447</span><br><span class="line">448</span><br><span class="line">449</span><br><span class="line">450</span><br><span class="line">451</span><br><span class="line">452</span><br><span class="line">453</span><br><span class="line">454</span><br><span class="line">455</span><br><span class="line">456</span><br><span class="line">457</span><br><span class="line">458</span><br><span class="line">459</span><br><span class="line">460</span><br><span class="line">461</span><br><span class="line">462</span><br><span class="line">463</span><br><span class="line">464</span><br><span class="line">465</span><br><span class="line">466</span><br><span class="line">467</span><br><span class="line">468</span><br><span class="line">469</span><br><span class="line">470</span><br><span class="line">471</span><br><span class="line">472</span><br><span class="line">473</span><br><span class="line">474</span><br><span class="line">475</span><br><span class="line">476</span><br><span class="line">477</span><br><span class="line">478</span><br><span class="line">479</span><br><span class="line">480</span><br><span class="line">481</span><br><span class="line">482</span><br><span class="line">483</span><br><span class="line">484</span><br><span class="line">485</span><br><span class="line">486</span><br><span class="line">487</span><br><span class="line">488</span><br><span class="line">489</span><br><span class="line">490</span><br><span class="line">491</span><br><span class="line">492</span><br><span class="line">493</span><br><span class="line">494</span><br><span class="line">495</span><br><span class="line">496</span><br><span class="line">497</span><br><span class="line">498</span><br><span class="line">499</span><br><span class="line">500</span><br><span class="line">501</span><br><span class="line">502</span><br><span class="line">503</span><br><span class="line">504</span><br><span class="line">505</span><br><span class="line">506</span><br><span class="line">507</span><br><span class="line">508</span><br><span class="line">509</span><br><span class="line">510</span><br><span class="line">511</span><br><span class="line">512</span><br><span class="line">513</span><br><span class="line">514</span><br><span class="line">515</span><br><span class="line">516</span><br><span class="line">517</span><br><span class="line">518</span><br><span class="line">519</span><br><span class="line">520</span><br><span class="line">521</span><br><span class="line">522</span><br><span class="line">523</span><br><span class="line">524</span><br><span class="line">525</span><br><span class="line">526</span><br><span class="line">527</span><br><span class="line">528</span><br><span class="line">529</span><br><span class="line">530</span><br><span class="line">531</span><br><span class="line">532</span><br><span class="line">533</span><br><span class="line">534</span><br><span class="line">535</span><br></pre></td><td class="code"><pre><span class="line">location = location</span><br><span class="line">location = location.href</span><br><span class="line">location = <span class="built_in">window</span>.location</span><br><span class="line">location = self.location</span><br><span class="line">location = <span class="built_in">window</span>.location.href</span><br><span class="line">location = self.location.href</span><br><span class="line">location = location[<span class="string">'href'</span>]</span><br><span class="line">location = <span class="built_in">window</span>[<span class="string">'location'</span>]</span><br><span class="line">location = <span class="built_in">window</span>[<span class="string">'location'</span>].href</span><br><span class="line">location = <span class="built_in">window</span>[<span class="string">'location'</span>][<span class="string">'href'</span>]</span><br><span class="line">location = <span class="built_in">window</span>.location[<span class="string">'href'</span>]</span><br><span class="line">location = self[<span class="string">'location'</span>]</span><br><span class="line">location = self[<span class="string">'location'</span>].href</span><br><span class="line">location = self[<span class="string">'location'</span>][<span class="string">'href'</span>]</span><br><span class="line">location = self.location[<span class="string">'href'</span>]</span><br><span class="line">location.assign(location)</span><br><span class="line">location.replace(location)</span><br><span class="line"><span class="built_in">window</span>.location.assign(location)</span><br><span class="line"><span class="built_in">window</span>.location.replace(location)</span><br><span class="line">self.location.assign(location)</span><br><span class="line">self.location.replace(location)</span><br><span class="line">location[<span class="string">'assign'</span>](location)</span><br><span class="line">location[<span class="string">'replace'</span>](location)</span><br><span class="line"><span class="built_in">window</span>.location[<span class="string">'assign'</span>](location)</span><br><span class="line"><span class="built_in">window</span>.location[<span class="string">'replace'</span>](location)</span><br><span class="line"><span class="built_in">window</span>[<span class="string">'location'</span>].assign(location)</span><br><span class="line"><span class="built_in">window</span>[<span class="string">'location'</span>].replace(location)</span><br><span class="line"><span class="built_in">window</span>[<span class="string">'location'</span>][<span class="string">'assign'</span>](location)</span><br><span class="line"><span class="built_in">window</span>[<span class="string">'location'</span>][<span class="string">'replace'</span>](location)</span><br><span class="line">self.location[<span class="string">'assign'</span>](location)</span><br><span class="line">self.location[<span class="string">'replace'</span>](location)</span><br><span class="line">self[<span class="string">'location'</span>].assign(location)</span><br><span class="line">self[<span class="string">'location'</span>].replace(location)</span><br><span class="line">self[<span class="string">'location'</span>][<span class="string">'assign'</span>](location)</span><br><span class="line">self[<span class="string">'location'</span>][<span class="string">'replace'</span>](location)</span><br><span class="line">location.href = location</span><br><span class="line">location.href = location.href</span><br><span class="line">location.href = <span class="built_in">window</span>.location</span><br><span class="line">location.href = self.location</span><br><span class="line">location.href = <span class="built_in">window</span>.location.href</span><br><span class="line">location.href = self.location.href</span><br><span class="line">location.href = location[<span class="string">'href'</span>]</span><br><span class="line">location.href = <span class="built_in">window</span>[<span class="string">'location'</span>]</span><br><span class="line">location.href = <span class="built_in">window</span>[<span class="string">'location'</span>].href</span><br><span class="line">location.href = <span class="built_in">window</span>[<span class="string">'location'</span>][<span class="string">'href'</span>]</span><br><span class="line">location.href = <span class="built_in">window</span>.location[<span class="string">'href'</span>]</span><br><span class="line">location.href = self[<span class="string">'location'</span>]</span><br><span class="line">location.href = self[<span class="string">'location'</span>].href</span><br><span class="line">location.href = self[<span class="string">'location'</span>][<span class="string">'href'</span>]</span><br><span class="line">location.href = self.location[<span class="string">'href'</span>]</span><br><span class="line">location.assign(location.href)</span><br><span class="line">location.replace(location.href)</span><br><span class="line"><span class="built_in">window</span>.location.assign(location.href)</span><br><span class="line"><span class="built_in">window</span>.location.replace(location.href)</span><br><span class="line">self.location.assign(location.href)</span><br><span class="line">self.location.replace(location.href)</span><br><span class="line">location[<span class="string">'assign'</span>](location.href)</span><br><span class="line">location[<span class="string">'replace'</span>](location.href)</span><br><span class="line"><span class="built_in">window</span>.location[<span class="string">'assign'</span>](location.href)</span><br><span class="line"><span class="built_in">window</span>.location[<span class="string">'replace'</span>](location.href)</span><br><span class="line"><span class="built_in">window</span>[<span class="string">'location'</span>].assign(location.href)</span><br><span class="line"><span class="built_in">window</span>[<span class="string">'location'</span>].replace(location.href)</span><br><span class="line"><span class="built_in">window</span>[<span class="string">'location'</span>][<span class="string">'assign'</span>](location.href)</span><br><span class="line"><span class="built_in">window</span>[<span class="string">'location'</span>][<span class="string">'replace'</span>](location.href)</span><br><span class="line">self.location[<span class="string">'assign'</span>](location.href)</span><br><span class="line">self.location[<span class="string">'replace'</span>](location.href)</span><br><span class="line">self[<span class="string">'location'</span>].assign(location.href)</span><br><span class="line">self[<span class="string">'location'</span>].replace(location.href)</span><br><span class="line">self[<span class="string">'location'</span>][<span class="string">'assign'</span>](location.href)</span><br><span class="line">self[<span class="string">'location'</span>][<span class="string">'replace'</span>](location.href)</span><br><span class="line"><span class="built_in">window</span>.location = location</span><br><span class="line"><span class="built_in">window</span>.location = location.href</span><br><span class="line"><span class="built_in">window</span>.location = <span class="built_in">window</span>.location</span><br><span class="line"><span class="built_in">window</span>.location = self.location</span><br><span class="line"><span class="built_in">window</span>.location = <span class="built_in">window</span>.location.href</span><br><span class="line"><span class="built_in">window</span>.location = self.location.href</span><br><span class="line"><span class="built_in">window</span>.location = location[<span class="string">'href'</span>]</span><br><span class="line"><span class="built_in">window</span>.location = <span class="built_in">window</span>[<span class="string">'location'</span>]</span><br><span class="line"><span class="built_in">window</span>.location = <span class="built_in">window</span>[<span class="string">'location'</span>].href</span><br><span class="line"><span class="built_in">window</span>.location = <span class="built_in">window</span>[<span class="string">'location'</span>][<span class="string">'href'</span>]</span><br><span class="line"><span class="built_in">window</span>.location = <span class="built_in">window</span>.location[<span class="string">'href'</span>]</span><br><span class="line"><span class="built_in">window</span>.location = self[<span class="string">'location'</span>]</span><br><span class="line"><span class="built_in">window</span>.location = self[<span class="string">'location'</span>].href</span><br><span class="line"><span class="built_in">window</span>.location = self[<span class="string">'location'</span>][<span class="string">'href'</span>]</span><br><span class="line"><span class="built_in">window</span>.location = self.location[<span class="string">'href'</span>]</span><br><span class="line">location.assign(<span class="built_in">window</span>.location)</span><br><span class="line">location.replace(<span class="built_in">window</span>.location)</span><br><span class="line"><span class="built_in">window</span>.location.assign(<span class="built_in">window</span>.location)</span><br><span class="line"><span class="built_in">window</span>.location.replace(<span class="built_in">window</span>.location)</span><br><span class="line">self.location.assign(<span class="built_in">window</span>.location)</span><br><span class="line">self.location.replace(<span class="built_in">window</span>.location)</span><br><span class="line">location[<span class="string">'assign'</span>](<span class="built_in">window</span>.location)</span><br><span class="line">location[<span class="string">'replace'</span>](<span class="built_in">window</span>.location)</span><br><span class="line"><span class="built_in">window</span>.location[<span class="string">'assign'</span>](<span class="built_in">window</span>.location)</span><br><span class="line"><span class="built_in">window</span>.location[<span class="string">'replace'</span>](<span class="built_in">window</span>.location)</span><br><span class="line"><span class="built_in">window</span>[<span class="string">'location'</span>].assign(<span class="built_in">window</span>.location)</span><br><span class="line"><span class="built_in">window</span>[<span class="string">'location'</span>].replace(<span class="built_in">window</span>.location)</span><br><span class="line"><span class="built_in">window</span>[<span class="string">'location'</span>][<span class="string">'assign'</span>](<span class="built_in">window</span>.location)</span><br><span class="line"><span class="built_in">window</span>[<span class="string">'location'</span>][<span class="string">'replace'</span>](<span class="built_in">window</span>.location)</span><br><span class="line">self.location[<span class="string">'assign'</span>](<span class="built_in">window</span>.location)</span><br><span class="line">self.location[<span class="string">'replace'</span>](<span class="built_in">window</span>.location)</span><br><span class="line">self[<span class="string">'location'</span>].assign(<span class="built_in">window</span>.location)</span><br><span class="line">self[<span class="string">'location'</span>].replace(<span class="built_in">window</span>.location)</span><br><span class="line">self[<span class="string">'location'</span>][<span class="string">'assign'</span>](<span class="built_in">window</span>.location)</span><br><span class="line">self[<span class="string">'location'</span>][<span class="string">'replace'</span>](<span class="built_in">window</span>.location)</span><br><span class="line">self.location = location</span><br><span class="line">self.location = location.href</span><br><span class="line">self.location = <span class="built_in">window</span>.location</span><br><span class="line">self.location = self.location</span><br><span class="line">self.location = <span class="built_in">window</span>.location.href</span><br><span class="line">self.location = self.location.href</span><br><span class="line">self.location = location[<span class="string">'href'</span>]</span><br><span class="line">self.location = <span class="built_in">window</span>[<span class="string">'location'</span>]</span><br><span class="line">self.location = <span class="built_in">window</span>[<span class="string">'location'</span>].href</span><br><span class="line">self.location = <span class="built_in">window</span>[<span class="string">'location'</span>][<span class="string">'href'</span>]</span><br><span class="line">self.location = <span class="built_in">window</span>.location[<span class="string">'href'</span>]</span><br><span class="line">self.location = self[<span class="string">'location'</span>]</span><br><span class="line">self.location = self[<span class="string">'location'</span>].href</span><br><span class="line">self.location = self[<span class="string">'location'</span>][<span class="string">'href'</span>]</span><br><span class="line">self.location = self.location[<span class="string">'href'</span>]</span><br><span class="line">location.assign(self.location)</span><br><span class="line">location.replace(self.location)</span><br><span class="line"><span class="built_in">window</span>.location.assign(self.location)</span><br><span class="line"><span class="built_in">window</span>.location.replace(self.location)</span><br><span class="line">self.location.assign(self.location)</span><br><span class="line">self.location.replace(self.location)</span><br><span class="line">location[<span class="string">'assign'</span>](self.location)</span><br><span class="line">location[<span class="string">'replace'</span>](self.location)</span><br><span class="line"><span class="built_in">window</span>.location[<span class="string">'assign'</span>](self.location)</span><br><span class="line"><span class="built_in">window</span>.location[<span class="string">'replace'</span>](self.location)</span><br><span class="line"><span class="built_in">window</span>[<span class="string">'location'</span>].assign(self.location)</span><br><span class="line"><span class="built_in">window</span>[<span class="string">'location'</span>].replace(self.location)</span><br><span class="line"><span class="built_in">window</span>[<span class="string">'location'</span>][<span class="string">'assign'</span>](self.location)</span><br><span class="line"><span class="built_in">window</span>[<span class="string">'location'</span>][<span class="string">'replace'</span>](self.location)</span><br><span class="line">self.location[<span class="string">'assign'</span>](self.location)</span><br><span class="line">self.location[<span class="string">'replace'</span>](self.location)</span><br><span class="line">self[<span class="string">'location'</span>].assign(self.location)</span><br><span class="line">self[<span class="string">'location'</span>].replace(self.location)</span><br><span class="line">self[<span class="string">'location'</span>][<span class="string">'assign'</span>](self.location)</span><br><span class="line">self[<span class="string">'location'</span>][<span class="string">'replace'</span>](self.location)</span><br><span class="line"><span class="built_in">window</span>.location.href = location</span><br><span class="line"><span class="built_in">window</span>.location.href = location.href</span><br><span class="line"><span class="built_in">window</span>.location.href = <span class="built_in">window</span>.location</span><br><span class="line"><span class="built_in">window</span>.location.href = self.location</span><br><span class="line"><span class="built_in">window</span>.location.href = <span class="built_in">window</span>.location.href</span><br><span class="line"><span class="built_in">window</span>.location.href = self.location.href</span><br><span class="line"><span class="built_in">window</span>.location.href = location[<span class="string">'href'</span>]</span><br><span class="line"><span class="built_in">window</span>.location.href = <span class="built_in">window</span>[<span class="string">'location'</span>]</span><br><span class="line"><span class="built_in">window</span>.location.href = <span class="built_in">window</span>[<span class="string">'location'</span>].href</span><br><span class="line"><span class="built_in">window</span>.location.href = <span class="built_in">window</span>[<span class="string">'location'</span>][<span class="string">'href'</span>]</span><br><span class="line"><span class="built_in">window</span>.location.href = <span class="built_in">window</span>.location[<span class="string">'href'</span>]</span><br><span class="line"><span class="built_in">window</span>.location.href = self[<span class="string">'location'</span>]</span><br><span class="line"><span class="built_in">window</span>.location.href = self[<span class="string">'location'</span>].href</span><br><span class="line"><span class="built_in">window</span>.location.href = self[<span class="string">'location'</span>][<span class="string">'href'</span>]</span><br><span class="line"><span class="built_in">window</span>.location.href = self.location[<span class="string">'href'</span>]</span><br><span class="line">location.assign(<span class="built_in">window</span>.location.href)</span><br><span class="line">location.replace(<span class="built_in">window</span>.location.href)</span><br><span class="line"><span class="built_in">window</span>.location.assign(<span class="built_in">window</span>.location.href)</span><br><span class="line"><span class="built_in">window</span>.location.replace(<span class="built_in">window</span>.location.href)</span><br><span class="line">self.location.assign(<span class="built_in">window</span>.location.href)</span><br><span class="line">self.location.replace(<span class="built_in">window</span>.location.href)</span><br><span class="line">location[<span class="string">'assign'</span>](<span class="built_in">window</span>.location.href)</span><br><span class="line">location[<span class="string">'replace'</span>](<span class="built_in">window</span>.location.href)</span><br><span class="line"><span class="built_in">window</span>.location[<span class="string">'assign'</span>](<span class="built_in">window</span>.location.href)</span><br><span class="line"><span class="built_in">window</span>.location[<span class="string">'replace'</span>](<span class="built_in">window</span>.location.href)</span><br><span class="line"><span class="built_in">window</span>[<span class="string">'location'</span>].assign(<span class="built_in">window</span>.location.href)</span><br><span class="line"><span class="built_in">window</span>[<span class="string">'location'</span>].replace(<span class="built_in">window</span>.location.href)</span><br><span class="line"><span class="built_in">window</span>[<span class="string">'location'</span>][<span class="string">'assign'</span>](<span class="built_in">window</span>.location.href)</span><br><span class="line"><span class="built_in">window</span>[<span class="string">'location'</span>][<span class="string">'replace'</span>](<span class="built_in">window</span>.location.href)</span><br><span class="line">self.location[<span class="string">'assign'</span>](<span class="built_in">window</span>.location.href)</span><br><span class="line">self.location[<span class="string">'replace'</span>](<span class="built_in">window</span>.location.href)</span><br><span class="line">self[<span class="string">'location'</span>].assign(<span class="built_in">window</span>.location.href)</span><br><span class="line">self[<span class="string">'location'</span>].replace(<span class="built_in">window</span>.location.href)</span><br><span class="line">self[<span class="string">'location'</span>][<span class="string">'assign'</span>](<span class="built_in">window</span>.location.href)</span><br><span class="line">self[<span class="string">'location'</span>][<span class="string">'replace'</span>](<span class="built_in">window</span>.location.href)</span><br><span class="line">self.location.href = location</span><br><span class="line">self.location.href = location.href</span><br><span class="line">self.location.href = <span class="built_in">window</span>.location</span><br><span class="line">self.location.href = self.location</span><br><span class="line">self.location.href = <span class="built_in">window</span>.location.href</span><br><span class="line">self.location.href = self.location.href</span><br><span class="line">self.location.href = location[<span class="string">'href'</span>]</span><br><span class="line">self.location.href = <span class="built_in">window</span>[<span class="string">'location'</span>]</span><br><span class="line">self.location.href = <span class="built_in">window</span>[<span class="string">'location'</span>].href</span><br><span class="line">self.location.href = <span class="built_in">window</span>[<span class="string">'location'</span>][<span class="string">'href'</span>]</span><br><span class="line">self.location.href = <span class="built_in">window</span>.location[<span class="string">'href'</span>]</span><br><span class="line">self.location.href = self[<span class="string">'location'</span>]</span><br><span class="line">self.location.href = self[<span class="string">'location'</span>].href</span><br><span class="line">self.location.href = self[<span class="string">'location'</span>][<span class="string">'href'</span>]</span><br><span class="line">self.location.href = self.location[<span class="string">'href'</span>]</span><br><span class="line">location.assign(self.location.href)</span><br><span class="line">location.replace(self.location.href)</span><br><span class="line"><span class="built_in">window</span>.location.assign(self.location.href)</span><br><span class="line"><span class="built_in">window</span>.location.replace(self.location.href)</span><br><span class="line">self.location.assign(self.location.href)</span><br><span class="line">self.location.replace(self.location.href)</span><br><span class="line">location[<span class="string">'assign'</span>](self.location.href)</span><br><span class="line">location[<span class="string">'replace'</span>](self.location.href)</span><br><span class="line"><span class="built_in">window</span>.location[<span class="string">'assign'</span>](self.location.href)</span><br><span class="line"><span class="built_in">window</span>.location[<span class="string">'replace'</span>](self.location.href)</span><br><span class="line"><span class="built_in">window</span>[<span class="string">'location'</span>].assign(self.location.href)</span><br><span class="line"><span class="built_in">window</span>[<span class="string">'location'</span>].replace(self.location.href)</span><br><span class="line"><span class="built_in">window</span>[<span class="string">'location'</span>][<span class="string">'assign'</span>](self.location.href)</span><br><span class="line"><span class="built_in">window</span>[<span class="string">'location'</span>][<span class="string">'replace'</span>](self.location.href)</span><br><span class="line">self.location[<span class="string">'assign'</span>](self.location.href)</span><br><span class="line">self.location[<span class="string">'replace'</span>](self.location.href)</span><br><span class="line">self[<span class="string">'location'</span>].assign(self.location.href)</span><br><span class="line">self[<span class="string">'location'</span>].replace(self.location.href)</span><br><span class="line">self[<span class="string">'location'</span>][<span class="string">'assign'</span>](self.location.href)</span><br><span class="line">self[<span class="string">'location'</span>][<span class="string">'replace'</span>](self.location.href)</span><br><span class="line">location[<span class="string">'href'</span>] = location</span><br><span class="line">location[<span class="string">'href'</span>] = location.href</span><br><span class="line">location[<span class="string">'href'</span>] = <span class="built_in">window</span>.location</span><br><span class="line">location[<span class="string">'href'</span>] = self.location</span><br><span class="line">location[<span class="string">'href'</span>] = <span class="built_in">window</span>.location.href</span><br><span class="line">location[<span class="string">'href'</span>] = self.location.href</span><br><span class="line">location[<span class="string">'href'</span>] = location[<span class="string">'href'</span>]</span><br><span class="line">location[<span class="string">'href'</span>] = <span class="built_in">window</span>[<span class="string">'location'</span>]</span><br><span class="line">location[<span class="string">'href'</span>] = <span class="built_in">window</span>[<span class="string">'location'</span>].href</span><br><span class="line">location[<span class="string">'href'</span>] = <span class="built_in">window</span>[<span class="string">'location'</span>][<span class="string">'href'</span>]</span><br><span class="line">location[<span class="string">'href'</span>] = <span class="built_in">window</span>.location[<span class="string">'href'</span>]</span><br><span class="line">location[<span class="string">'href'</span>] = self[<span class="string">'location'</span>]</span><br><span class="line">location[<span class="string">'href'</span>] = self[<span class="string">'location'</span>].href</span><br><span class="line">location[<span class="string">'href'</span>] = self[<span class="string">'location'</span>][<span class="string">'href'</span>]</span><br><span class="line">location[<span class="string">'href'</span>] = self.location[<span class="string">'href'</span>]</span><br><span class="line">location.assign(location[<span class="string">'href'</span>])</span><br><span class="line">location.replace(location[<span class="string">'href'</span>])</span><br><span class="line"><span class="built_in">window</span>.location.assign(location[<span class="string">'href'</span>])</span><br><span class="line"><span class="built_in">window</span>.location.replace(location[<span class="string">'href'</span>])</span><br><span class="line">self.location.assign(location[<span class="string">'href'</span>])</span><br><span class="line">self.location.replace(location[<span class="string">'href'</span>])</span><br><span class="line">location[<span class="string">'assign'</span>](location[<span class="string">'href'</span>])</span><br><span class="line">location[<span class="string">'replace'</span>](location[<span class="string">'href'</span>])</span><br><span class="line"><span class="built_in">window</span>.location[<span class="string">'assign'</span>](location[<span class="string">'href'</span>])</span><br><span class="line"><span class="built_in">window</span>.location[<span class="string">'replace'</span>](location[<span class="string">'href'</span>])</span><br><span class="line"><span class="built_in">window</span>[<span class="string">'location'</span>].assign(location[<span class="string">'href'</span>])</span><br><span class="line"><span class="built_in">window</span>[<span class="string">'location'</span>].replace(location[<span class="string">'href'</span>])</span><br><span class="line"><span class="built_in">window</span>[<span class="string">'location'</span>][<span class="string">'assign'</span>](location[<span class="string">'href'</span>])</span><br><span class="line"><span class="built_in">window</span>[<span class="string">'location'</span>][<span class="string">'replace'</span>](location[<span class="string">'href'</span>])</span><br><span class="line">self.location[<span class="string">'assign'</span>](location[<span class="string">'href'</span>])</span><br><span class="line">self.location[<span class="string">'replace'</span>](location[<span class="string">'href'</span>])</span><br><span class="line">self[<span class="string">'location'</span>].assign(location[<span class="string">'href'</span>])</span><br><span class="line">self[<span class="string">'location'</span>].replace(location[<span class="string">'href'</span>])</span><br><span class="line">self[<span class="string">'location'</span>][<span class="string">'assign'</span>](location[<span class="string">'href'</span>])</span><br><span class="line">self[<span class="string">'location'</span>][<span class="string">'replace'</span>](location[<span class="string">'href'</span>])</span><br><span class="line"><span class="built_in">window</span>[<span class="string">'location'</span>] = location</span><br><span class="line"><span class="built_in">window</span>[<span class="string">'location'</span>] = location.href</span><br><span class="line"><span class="built_in">window</span>[<span class="string">'location'</span>] = <span class="built_in">window</span>.location</span><br><span class="line"><span class="built_in">window</span>[<span class="string">'location'</span>] = self.location</span><br><span class="line"><span class="built_in">window</span>[<span class="string">'location'</span>] = <span class="built_in">window</span>.location.href</span><br><span class="line"><span class="built_in">window</span>[<span class="string">'location'</span>] = self.location.href</span><br><span class="line"><span class="built_in">window</span>[<span class="string">'location'</span>] = location[<span class="string">'href'</span>]</span><br><span class="line"><span class="built_in">window</span>[<span class="string">'location'</span>] = <span class="built_in">window</span>[<span class="string">'location'</span>]</span><br><span class="line"><span class="built_in">window</span>[<span class="string">'location'</span>] = <span class="built_in">window</span>[<span class="string">'location'</span>].href</span><br><span class="line"><span class="built_in">window</span>[<span class="string">'location'</span>] = <span class="built_in">window</span>[<span class="string">'location'</span>][<span class="string">'href'</span>]</span><br><span class="line"><span class="built_in">window</span>[<span class="string">'location'</span>] = <span class="built_in">window</span>.location[<span class="string">'href'</span>]</span><br><span class="line"><span class="built_in">window</span>[<span class="string">'location'</span>] = self[<span class="string">'location'</span>]</span><br><span class="line"><span class="built_in">window</span>[<span class="string">'location'</span>] = self[<span class="string">'location'</span>].href</span><br><span class="line"><span class="built_in">window</span>[<span class="string">'location'</span>] = self[<span class="string">'location'</span>][<span class="string">'href'</span>]</span><br><span class="line"><span class="built_in">window</span>[<span class="string">'location'</span>] = self.location[<span class="string">'href'</span>]</span><br><span class="line">location.assign(<span class="built_in">window</span>[<span class="string">'location'</span>])</span><br><span class="line">location.replace(<span class="built_in">window</span>[<span class="string">'location'</span>])</span><br><span class="line"><span class="built_in">window</span>.location.assign(<span class="built_in">window</span>[<span class="string">'location'</span>])</span><br><span class="line"><span class="built_in">window</span>.location.replace(<span class="built_in">window</span>[<span class="string">'location'</span>])</span><br><span class="line">self.location.assign(<span class="built_in">window</span>[<span class="string">'location'</span>])</span><br><span class="line">self.location.replace(<span class="built_in">window</span>[<span class="string">'location'</span>])</span><br><span class="line">location[<span class="string">'assign'</span>](<span class="built_in">window</span>[<span class="string">'location'</span>])</span><br><span class="line">location[<span class="string">'replace'</span>](<span class="built_in">window</span>[<span class="string">'location'</span>])</span><br><span class="line"><span class="built_in">window</span>.location[<span class="string">'assign'</span>](<span class="built_in">window</span>[<span class="string">'location'</span>])</span><br><span class="line"><span class="built_in">window</span>.location[<span class="string">'replace'</span>](<span class="built_in">window</span>[<span class="string">'location'</span>])</span><br><span class="line"><span class="built_in">window</span>[<span class="string">'location'</span>].assign(<span class="built_in">window</span>[<span class="string">'location'</span>])</span><br><span class="line"><span class="built_in">window</span>[<span class="string">'location'</span>].replace(<span class="built_in">window</span>[<span class="string">'location'</span>])</span><br><span class="line"><span class="built_in">window</span>[<span class="string">'location'</span>][<span class="string">'assign'</span>](<span class="built_in">window</span>[<span class="string">'location'</span>])</span><br><span class="line"><span class="built_in">window</span>[<span class="string">'location'</span>][<span class="string">'replace'</span>](<span class="built_in">window</span>[<span class="string">'location'</span>])</span><br><span class="line">self.location[<span class="string">'assign'</span>](<span class="built_in">window</span>[<span class="string">'location'</span>])</span><br><span class="line">self.location[<span class="string">'replace'</span>](<span class="built_in">window</span>[<span class="string">'location'</span>])</span><br><span class="line">self[<span class="string">'location'</span>].assign(<span class="built_in">window</span>[<span class="string">'location'</span>])</span><br><span class="line">self[<span class="string">'location'</span>].replace(<span class="built_in">window</span>[<span class="string">'location'</span>])</span><br><span class="line">self[<span class="string">'location'</span>][<span class="string">'assign'</span>](<span class="built_in">window</span>[<span class="string">'location'</span>])</span><br><span class="line">self[<span class="string">'location'</span>][<span class="string">'replace'</span>](<span class="built_in">window</span>[<span class="string">'location'</span>])</span><br><span class="line"><span class="built_in">window</span>[<span class="string">'location'</span>].href = location</span><br><span class="line"><span class="built_in">window</span>[<span class="string">'location'</span>].href = location.href</span><br><span class="line"><span class="built_in">window</span>[<span class="string">'location'</span>].href = <span class="built_in">window</span>.location</span><br><span class="line"><span class="built_in">window</span>[<span class="string">'location'</span>].href = self.location</span><br><span class="line"><span class="built_in">window</span>[<span class="string">'location'</span>].href = <span class="built_in">window</span>.location.href</span><br><span class="line"><span class="built_in">window</span>[<span class="string">'location'</span>].href = self.location.href</span><br><span class="line"><span class="built_in">window</span>[<span class="string">'location'</span>].href = location[<span class="string">'href'</span>]</span><br><span class="line"><span class="built_in">window</span>[<span class="string">'location'</span>].href = <span class="built_in">window</span>[<span class="string">'location'</span>]</span><br><span class="line"><span class="built_in">window</span>[<span class="string">'location'</span>].href = <span class="built_in">window</span>[<span class="string">'location'</span>].href</span><br><span class="line"><span class="built_in">window</span>[<span class="string">'location'</span>].href = <span class="built_in">window</span>[<span class="string">'location'</span>][<span class="string">'href'</span>]</span><br><span class="line"><span class="built_in">window</span>[<span class="string">'location'</span>].href = <span class="built_in">window</span>.location[<span class="string">'href'</span>]</span><br><span class="line"><span class="built_in">window</span>[<span class="string">'location'</span>].href = self[<span class="string">'location'</span>]</span><br><span class="line"><span class="built_in">window</span>[<span class="string">'location'</span>].href = self[<span class="string">'location'</span>].href</span><br><span class="line"><span class="built_in">window</span>[<span class="string">'location'</span>].href = self[<span class="string">'location'</span>][<span class="string">'href'</span>]</span><br><span class="line"><span class="built_in">window</span>[<span class="string">'location'</span>].href = self.location[<span class="string">'href'</span>]</span><br><span class="line">location.assign(<span class="built_in">window</span>[<span class="string">'location'</span>].href)</span><br><span class="line">location.replace(<span class="built_in">window</span>[<span class="string">'location'</span>].href)</span><br><span class="line"><span class="built_in">window</span>.location.assign(<span class="built_in">window</span>[<span class="string">'location'</span>].href)</span><br><span class="line"><span class="built_in">window</span>.location.replace(<span class="built_in">window</span>[<span class="string">'location'</span>].href)</span><br><span class="line">self.location.assign(<span class="built_in">window</span>[<span class="string">'location'</span>].href)</span><br><span class="line">self.location.replace(<span class="built_in">window</span>[<span class="string">'location'</span>].href)</span><br><span class="line">location[<span class="string">'assign'</span>](<span class="built_in">window</span>[<span class="string">'location'</span>].href)</span><br><span class="line">location[<span class="string">'replace'</span>](<span class="built_in">window</span>[<span class="string">'location'</span>].href)</span><br><span class="line"><span class="built_in">window</span>.location[<span class="string">'assign'</span>](<span class="built_in">window</span>[<span class="string">'location'</span>].href)</span><br><span class="line"><span class="built_in">window</span>.location[<span class="string">'replace'</span>](<span class="built_in">window</span>[<span class="string">'location'</span>].href)</span><br><span class="line"><span class="built_in">window</span>[<span class="string">'location'</span>].assign(<span class="built_in">window</span>[<span class="string">'location'</span>].href)</span><br><span class="line"><span class="built_in">window</span>[<span class="string">'location'</span>].replace(<span class="built_in">window</span>[<span class="string">'location'</span>].href)</span><br><span class="line"><span class="built_in">window</span>[<span class="string">'location'</span>][<span class="string">'assign'</span>](<span class="built_in">window</span>[<span class="string">'location'</span>].href)</span><br><span class="line"><span class="built_in">window</span>[<span class="string">'location'</span>][<span class="string">'replace'</span>](<span class="built_in">window</span>[<span class="string">'location'</span>].href)</span><br><span class="line">self.location[<span class="string">'assign'</span>](<span class="built_in">window</span>[<span class="string">'location'</span>].href)</span><br><span class="line">self.location[<span class="string">'replace'</span>](<span class="built_in">window</span>[<span class="string">'location'</span>].href)</span><br><span class="line">self[<span class="string">'location'</span>].assign(<span class="built_in">window</span>[<span class="string">'location'</span>].href)</span><br><span class="line">self[<span class="string">'location'</span>].replace(<span class="built_in">window</span>[<span class="string">'location'</span>].href)</span><br><span class="line">self[<span class="string">'location'</span>][<span class="string">'assign'</span>](<span class="built_in">window</span>[<span class="string">'location'</span>].href)</span><br><span class="line">self[<span class="string">'location'</span>][<span class="string">'replace'</span>](<span class="built_in">window</span>[<span class="string">'location'</span>].href)</span><br><span class="line"><span class="built_in">window</span>[<span class="string">'location'</span>][<span class="string">'href'</span>] = location</span><br><span class="line"><span class="built_in">window</span>[<span class="string">'location'</span>][<span class="string">'href'</span>] = location.href</span><br><span class="line"><span class="built_in">window</span>[<span class="string">'location'</span>][<span class="string">'href'</span>] = <span class="built_in">window</span>.location</span><br><span class="line"><span class="built_in">window</span>[<span class="string">'location'</span>][<span class="string">'href'</span>] = self.location</span><br><span class="line"><span class="built_in">window</span>[<span class="string">'location'</span>][<span class="string">'href'</span>] = <span class="built_in">window</span>.location.href</span><br><span class="line"><span class="built_in">window</span>[<span class="string">'location'</span>][<span class="string">'href'</span>] = self.location.href</span><br><span class="line"><span class="built_in">window</span>[<span class="string">'location'</span>][<span class="string">'href'</span>] = location[<span class="string">'href'</span>]</span><br><span class="line"><span class="built_in">window</span>[<span class="string">'location'</span>][<span class="string">'href'</span>] = <span class="built_in">window</span>[<span class="string">'location'</span>]</span><br><span class="line"><span class="built_in">window</span>[<span class="string">'location'</span>][<span class="string">'href'</span>] = <span class="built_in">window</span>[<span class="string">'location'</span>].href</span><br><span class="line"><span class="built_in">window</span>[<span class="string">'location'</span>][<span class="string">'href'</span>] = <span class="built_in">window</span>[<span class="string">'location'</span>][<span class="string">'href'</span>]</span><br><span class="line"><span class="built_in">window</span>[<span class="string">'location'</span>][<span class="string">'href'</span>] = <span class="built_in">window</span>.location[<span class="string">'href'</span>]</span><br><span class="line"><span class="built_in">window</span>[<span class="string">'location'</span>][<span class="string">'href'</span>] = self[<span class="string">'location'</span>]</span><br><span class="line"><span class="built_in">window</span>[<span class="string">'location'</span>][<span class="string">'href'</span>] = self[<span class="string">'location'</span>].href</span><br><span class="line"><span class="built_in">window</span>[<span class="string">'location'</span>][<span class="string">'href'</span>] = self[<span class="string">'location'</span>][<span class="string">'href'</span>]</span><br><span class="line"><span class="built_in">window</span>[<span class="string">'location'</span>][<span class="string">'href'</span>] = self.location[<span class="string">'href'</span>]</span><br><span class="line">location.assign(<span class="built_in">window</span>[<span class="string">'location'</span>][<span class="string">'href'</span>])</span><br><span class="line">location.replace(<span class="built_in">window</span>[<span class="string">'location'</span>][<span class="string">'href'</span>])</span><br><span class="line"><span class="built_in">window</span>.location.assign(<span class="built_in">window</span>[<span class="string">'location'</span>][<span class="string">'href'</span>])</span><br><span class="line"><span class="built_in">window</span>.location.replace(<span class="built_in">window</span>[<span class="string">'location'</span>][<span class="string">'href'</span>])</span><br><span class="line">self.location.assign(<span class="built_in">window</span>[<span class="string">'location'</span>][<span class="string">'href'</span>])</span><br><span class="line">self.location.replace(<span class="built_in">window</span>[<span class="string">'location'</span>][<span class="string">'href'</span>])</span><br><span class="line">location[<span class="string">'assign'</span>](<span class="built_in">window</span>[<span class="string">'location'</span>][<span class="string">'href'</span>])</span><br><span class="line">location[<span class="string">'replace'</span>](<span class="built_in">window</span>[<span class="string">'location'</span>][<span class="string">'href'</span>])</span><br><span class="line"><span class="built_in">window</span>.location[<span class="string">'assign'</span>](<span class="built_in">window</span>[<span class="string">'location'</span>][<span class="string">'href'</span>])</span><br><span class="line"><span class="built_in">window</span>.location[<span class="string">'replace'</span>](<span class="built_in">window</span>[<span class="string">'location'</span>][<span class="string">'href'</span>])</span><br><span class="line"><span class="built_in">window</span>[<span class="string">'location'</span>].assign(<span class="built_in">window</span>[<span class="string">'location'</span>][<span class="string">'href'</span>])</span><br><span class="line"><span class="built_in">window</span>[<span class="string">'location'</span>].replace(<span class="built_in">window</span>[<span class="string">'location'</span>][<span class="string">'href'</span>])</span><br><span class="line"><span class="built_in">window</span>[<span class="string">'location'</span>][<span class="string">'assign'</span>](<span class="built_in">window</span>[<span class="string">'location'</span>][<span class="string">'href'</span>])</span><br><span class="line"><span class="built_in">window</span>[<span class="string">'location'</span>][<span class="string">'replace'</span>](<span class="built_in">window</span>[<span class="string">'location'</span>][<span class="string">'href'</span>])</span><br><span class="line">self.location[<span class="string">'assign'</span>](<span class="built_in">window</span>[<span class="string">'location'</span>][<span class="string">'href'</span>])</span><br><span class="line">self.location[<span class="string">'replace'</span>](<span class="built_in">window</span>[<span class="string">'location'</span>][<span class="string">'href'</span>])</span><br><span class="line">self[<span class="string">'location'</span>].assign(<span class="built_in">window</span>[<span class="string">'location'</span>][<span class="string">'href'</span>])</span><br><span class="line">self[<span class="string">'location'</span>].replace(<span class="built_in">window</span>[<span class="string">'location'</span>][<span class="string">'href'</span>])</span><br><span class="line">self[<span class="string">'location'</span>][<span class="string">'assign'</span>](<span class="built_in">window</span>[<span class="string">'location'</span>][<span class="string">'href'</span>])</span><br><span class="line">self[<span class="string">'location'</span>][<span class="string">'replace'</span>](<span class="built_in">window</span>[<span class="string">'location'</span>][<span class="string">'href'</span>])</span><br><span class="line"><span class="built_in">window</span>.location[<span class="string">'href'</span>] = location</span><br><span class="line"><span class="built_in">window</span>.location[<span class="string">'href'</span>] = location.href</span><br><span class="line"><span class="built_in">window</span>.location[<span class="string">'href'</span>] = <span class="built_in">window</span>.location</span><br><span class="line"><span class="built_in">window</span>.location[<span class="string">'href'</span>] = self.location</span><br><span class="line"><span class="built_in">window</span>.location[<span class="string">'href'</span>] = <span class="built_in">window</span>.location.href</span><br><span class="line"><span class="built_in">window</span>.location[<span class="string">'href'</span>] = self.location.href</span><br><span class="line"><span class="built_in">window</span>.location[<span class="string">'href'</span>] = location[<span class="string">'href'</span>]</span><br><span class="line"><span class="built_in">window</span>.location[<span class="string">'href'</span>] = <span class="built_in">window</span>[<span class="string">'location'</span>]</span><br><span class="line"><span class="built_in">window</span>.location[<span class="string">'href'</span>] = <span class="built_in">window</span>[<span class="string">'location'</span>].href</span><br><span class="line"><span class="built_in">window</span>.location[<span class="string">'href'</span>] = <span class="built_in">window</span>[<span class="string">'location'</span>][<span class="string">'href'</span>]</span><br><span class="line"><span class="built_in">window</span>.location[<span class="string">'href'</span>] = <span class="built_in">window</span>.location[<span class="string">'href'</span>]</span><br><span class="line"><span class="built_in">window</span>.location[<span class="string">'href'</span>] = self[<span class="string">'location'</span>]</span><br><span class="line"><span class="built_in">window</span>.location[<span class="string">'href'</span>] = self[<span class="string">'location'</span>].href</span><br><span class="line"><span class="built_in">window</span>.location[<span class="string">'href'</span>] = self[<span class="string">'location'</span>][<span class="string">'href'</span>]</span><br><span class="line"><span class="built_in">window</span>.location[<span class="string">'href'</span>] = self.location[<span class="string">'href'</span>]</span><br><span class="line">location.assign(<span class="built_in">window</span>.location[<span class="string">'href'</span>])</span><br><span class="line">location.replace(<span class="built_in">window</span>.location[<span class="string">'href'</span>])</span><br><span class="line"><span class="built_in">window</span>.location.assign(<span class="built_in">window</span>.location[<span class="string">'href'</span>])</span><br><span class="line"><span class="built_in">window</span>.location.replace(<span class="built_in">window</span>.location[<span class="string">'href'</span>])</span><br><span class="line">self.location.assign(<span class="built_in">window</span>.location[<span class="string">'href'</span>])</span><br><span class="line">self.location.replace(<span class="built_in">window</span>.location[<span class="string">'href'</span>])</span><br><span class="line">location[<span class="string">'assign'</span>](<span class="built_in">window</span>.location[<span class="string">'href'</span>])</span><br><span class="line">location[<span class="string">'replace'</span>](<span class="built_in">window</span>.location[<span class="string">'href'</span>])</span><br><span class="line"><span class="built_in">window</span>.location[<span class="string">'assign'</span>](<span class="built_in">window</span>.location[<span class="string">'href'</span>])</span><br><span class="line"><span class="built_in">window</span>.location[<span class="string">'replace'</span>](<span class="built_in">window</span>.location[<span class="string">'href'</span>])</span><br><span class="line"><span class="built_in">window</span>[<span class="string">'location'</span>].assign(<span class="built_in">window</span>.location[<span class="string">'href'</span>])</span><br><span class="line"><span class="built_in">window</span>[<span class="string">'location'</span>].replace(<span class="built_in">window</span>.location[<span class="string">'href'</span>])</span><br><span class="line"><span class="built_in">window</span>[<span class="string">'location'</span>][<span class="string">'assign'</span>](<span class="built_in">window</span>.location[<span class="string">'href'</span>])</span><br><span class="line"><span class="built_in">window</span>[<span class="string">'location'</span>][<span class="string">'replace'</span>](<span class="built_in">window</span>.location[<span class="string">'href'</span>])</span><br><span class="line">self.location[<span class="string">'assign'</span>](<span class="built_in">window</span>.location[<span class="string">'href'</span>])</span><br><span class="line">self.location[<span class="string">'replace'</span>](<span class="built_in">window</span>.location[<span class="string">'href'</span>])</span><br><span class="line">self[<span class="string">'location'</span>].assign(<span class="built_in">window</span>.location[<span class="string">'href'</span>])</span><br><span class="line">self[<span class="string">'location'</span>].replace(<span class="built_in">window</span>.location[<span class="string">'href'</span>])</span><br><span class="line">self[<span class="string">'location'</span>][<span class="string">'assign'</span>](<span class="built_in">window</span>.location[<span class="string">'href'</span>])</span><br><span class="line">self[<span class="string">'location'</span>][<span class="string">'replace'</span>](<span class="built_in">window</span>.location[<span class="string">'href'</span>])</span><br><span class="line">self[<span class="string">'location'</span>] = location</span><br><span class="line">self[<span class="string">'location'</span>] = location.href</span><br><span class="line">self[<span class="string">'location'</span>] = <span class="built_in">window</span>.location</span><br><span class="line">self[<span class="string">'location'</span>] = self.location</span><br><span class="line">self[<span class="string">'location'</span>] = <span class="built_in">window</span>.location.href</span><br><span class="line">self[<span class="string">'location'</span>] = self.location.href</span><br><span class="line">self[<span class="string">'location'</span>] = location[<span class="string">'href'</span>]</span><br><span class="line">self[<span class="string">'location'</span>] = <span class="built_in">window</span>[<span class="string">'location'</span>]</span><br><span class="line">self[<span class="string">'location'</span>] = <span class="built_in">window</span>[<span class="string">'location'</span>].href</span><br><span class="line">self[<span class="string">'location'</span>] = <span class="built_in">window</span>[<span class="string">'location'</span>][<span class="string">'href'</span>]</span><br><span class="line">self[<span class="string">'location'</span>] = <span class="built_in">window</span>.location[<span class="string">'href'</span>]</span><br><span class="line">self[<span class="string">'location'</span>] = self[<span class="string">'location'</span>]</span><br><span class="line">self[<span class="string">'location'</span>] = self[<span class="string">'location'</span>].href</span><br><span class="line">self[<span class="string">'location'</span>] = self[<span class="string">'location'</span>][<span class="string">'href'</span>]</span><br><span class="line">self[<span class="string">'location'</span>] = self.location[<span class="string">'href'</span>]</span><br><span class="line">location.assign(self[<span class="string">'location'</span>])</span><br><span class="line">location.replace(self[<span class="string">'location'</span>])</span><br><span class="line"><span class="built_in">window</span>.location.assign(self[<span class="string">'location'</span>])</span><br><span class="line"><span class="built_in">window</span>.location.replace(self[<span class="string">'location'</span>])</span><br><span class="line">self.location.assign(self[<span class="string">'location'</span>])</span><br><span class="line">self.location.replace(self[<span class="string">'location'</span>])</span><br><span class="line">location[<span class="string">'assign'</span>](self[<span class="string">'location'</span>])</span><br><span class="line">location[<span class="string">'replace'</span>](self[<span class="string">'location'</span>])</span><br><span class="line"><span class="built_in">window</span>.location[<span class="string">'assign'</span>](self[<span class="string">'location'</span>])</span><br><span class="line"><span class="built_in">window</span>.location[<span class="string">'replace'</span>](self[<span class="string">'location'</span>])</span><br><span class="line"><span class="built_in">window</span>[<span class="string">'location'</span>].assign(self[<span class="string">'location'</span>])</span><br><span class="line"><span class="built_in">window</span>[<span class="string">'location'</span>].replace(self[<span class="string">'location'</span>])</span><br><span class="line"><span class="built_in">window</span>[<span class="string">'location'</span>][<span class="string">'assign'</span>](self[<span class="string">'location'</span>])</span><br><span class="line"><span class="built_in">window</span>[<span class="string">'location'</span>][<span class="string">'replace'</span>](self[<span class="string">'location'</span>])</span><br><span class="line">self.location[<span class="string">'assign'</span>](self[<span class="string">'location'</span>])</span><br><span class="line">self.location[<span class="string">'replace'</span>](self[<span class="string">'location'</span>])</span><br><span class="line">self[<span class="string">'location'</span>].assign(self[<span class="string">'location'</span>])</span><br><span class="line">self[<span class="string">'location'</span>].replace(self[<span class="string">'location'</span>])</span><br><span class="line">self[<span class="string">'location'</span>][<span class="string">'assign'</span>](self[<span class="string">'location'</span>])</span><br><span class="line">self[<span class="string">'location'</span>][<span class="string">'replace'</span>](self[<span class="string">'location'</span>])</span><br><span class="line">self[<span class="string">'location'</span>].href = location</span><br><span class="line">self[<span class="string">'location'</span>].href = location.href</span><br><span class="line">self[<span class="string">'location'</span>].href = <span class="built_in">window</span>.location</span><br><span class="line">self[<span class="string">'location'</span>].href = self.location</span><br><span class="line">self[<span class="string">'location'</span>].href = <span class="built_in">window</span>.location.href</span><br><span class="line">self[<span class="string">'location'</span>].href = self.location.href</span><br><span class="line">self[<span class="string">'location'</span>].href = location[<span class="string">'href'</span>]</span><br><span class="line">self[<span class="string">'location'</span>].href = <span class="built_in">window</span>[<span class="string">'location'</span>]</span><br><span class="line">self[<span class="string">'location'</span>].href = <span class="built_in">window</span>[<span class="string">'location'</span>].href</span><br><span class="line">self[<span class="string">'location'</span>].href = <span class="built_in">window</span>[<span class="string">'location'</span>][<span class="string">'href'</span>]</span><br><span class="line">self[<span class="string">'location'</span>].href = <span class="built_in">window</span>.location[<span class="string">'href'</span>]</span><br><span class="line">self[<span class="string">'location'</span>].href = self[<span class="string">'location'</span>]</span><br><span class="line">self[<span class="string">'location'</span>].href = self[<span class="string">'location'</span>].href</span><br><span class="line">self[<span class="string">'location'</span>].href = self[<span class="string">'location'</span>][<span class="string">'href'</span>]</span><br><span class="line">self[<span class="string">'location'</span>].href = self.location[<span class="string">'href'</span>]</span><br><span class="line">location.assign(self[<span class="string">'location'</span>].href)</span><br><span class="line">location.replace(self[<span class="string">'location'</span>].href)</span><br><span class="line"><span class="built_in">window</span>.location.assign(self[<span class="string">'location'</span>].href)</span><br><span class="line"><span class="built_in">window</span>.location.replace(self[<span class="string">'location'</span>].href)</span><br><span class="line">self.location.assign(self[<span class="string">'location'</span>].href)</span><br><span class="line">self.location.replace(self[<span class="string">'location'</span>].href)</span><br><span class="line">location[<span class="string">'assign'</span>](self[<span class="string">'location'</span>].href)</span><br><span class="line">location[<span class="string">'replace'</span>](self[<span class="string">'location'</span>].href)</span><br><span class="line"><span class="built_in">window</span>.location[<span class="string">'assign'</span>](self[<span class="string">'location'</span>].href)</span><br><span class="line"><span class="built_in">window</span>.location[<span class="string">'replace'</span>](self[<span class="string">'location'</span>].href)</span><br><span class="line"><span class="built_in">window</span>[<span class="string">'location'</span>].assign(self[<span class="string">'location'</span>].href)</span><br><span class="line"><span class="built_in">window</span>[<span class="string">'location'</span>].replace(self[<span class="string">'location'</span>].href)</span><br><span class="line"><span class="built_in">window</span>[<span class="string">'location'</span>][<span class="string">'assign'</span>](self[<span class="string">'location'</span>].href)</span><br><span class="line"><span class="built_in">window</span>[<span class="string">'location'</span>][<span class="string">'replace'</span>](self[<span class="string">'location'</span>].href)</span><br><span class="line">self.location[<span class="string">'assign'</span>](self[<span class="string">'location'</span>].href)</span><br><span class="line">self.location[<span class="string">'replace'</span>](self[<span class="string">'location'</span>].href)</span><br><span class="line">self[<span class="string">'location'</span>].assign(self[<span class="string">'location'</span>].href)</span><br><span class="line">self[<span class="string">'location'</span>].replace(self[<span class="string">'location'</span>].href)</span><br><span class="line">self[<span class="string">'location'</span>][<span class="string">'assign'</span>](self[<span class="string">'location'</span>].href)</span><br><span class="line">self[<span class="string">'location'</span>][<span class="string">'replace'</span>](self[<span class="string">'location'</span>].href)</span><br><span class="line">self[<span class="string">'location'</span>][<span class="string">'href'</span>] = location</span><br><span class="line">self[<span class="string">'location'</span>][<span class="string">'href'</span>] = location.href</span><br><span class="line">self[<span class="string">'location'</span>][<span class="string">'href'</span>] = <span class="built_in">window</span>.location</span><br><span class="line">self[<span class="string">'location'</span>][<span class="string">'href'</span>] = self.location</span><br><span class="line">self[<span class="string">'location'</span>][<span class="string">'href'</span>] = <span class="built_in">window</span>.location.href</span><br><span class="line">self[<span class="string">'location'</span>][<span class="string">'href'</span>] = self.location.href</span><br><span class="line">self[<span class="string">'location'</span>][<span class="string">'href'</span>] = location[<span class="string">'href'</span>]</span><br><span class="line">self[<span class="string">'location'</span>][<span class="string">'href'</span>] = <span class="built_in">window</span>[<span class="string">'location'</span>]</span><br><span class="line">self[<span class="string">'location'</span>][<span class="string">'href'</span>] = <span class="built_in">window</span>[<span class="string">'location'</span>].href</span><br><span class="line">self[<span class="string">'location'</span>][<span class="string">'href'</span>] = <span class="built_in">window</span>[<span class="string">'location'</span>][<span class="string">'href'</span>]</span><br><span class="line">self[<span class="string">'location'</span>][<span class="string">'href'</span>] = <span class="built_in">window</span>.location[<span class="string">'href'</span>]</span><br><span class="line">self[<span class="string">'location'</span>][<span class="string">'href'</span>] = self[<span class="string">'location'</span>]</span><br><span class="line">self[<span class="string">'location'</span>][<span class="string">'href'</span>] = self[<span class="string">'location'</span>].href</span><br><span class="line">self[<span class="string">'location'</span>][<span class="string">'href'</span>] = self[<span class="string">'location'</span>][<span class="string">'href'</span>]</span><br><span class="line">self[<span class="string">'location'</span>][<span class="string">'href'</span>] = self.location[<span class="string">'href'</span>]</span><br><span class="line">location.assign(self[<span class="string">'location'</span>][<span class="string">'href'</span>])</span><br><span class="line">location.replace(self[<span class="string">'location'</span>][<span class="string">'href'</span>])</span><br><span class="line"><span class="built_in">window</span>.location.assign(self[<span class="string">'location'</span>][<span class="string">'href'</span>])</span><br><span class="line"><span class="built_in">window</span>.location.replace(self[<span class="string">'location'</span>][<span class="string">'href'</span>])</span><br><span class="line">self.location.assign(self[<span class="string">'location'</span>][<span class="string">'href'</span>])</span><br><span class="line">self.location.replace(self[<span class="string">'location'</span>][<span class="string">'href'</span>])</span><br><span class="line">location[<span class="string">'assign'</span>](self[<span class="string">'location'</span>][<span class="string">'href'</span>])</span><br><span class="line">location[<span class="string">'replace'</span>](self[<span class="string">'location'</span>][<span class="string">'href'</span>])</span><br><span class="line"><span class="built_in">window</span>.location[<span class="string">'assign'</span>](self[<span class="string">'location'</span>][<span class="string">'href'</span>])</span><br><span class="line"><span class="built_in">window</span>.location[<span class="string">'replace'</span>](self[<span class="string">'location'</span>][<span class="string">'href'</span>])</span><br><span class="line"><span class="built_in">window</span>[<span class="string">'location'</span>].assign(self[<span class="string">'location'</span>][<span class="string">'href'</span>])</span><br><span class="line"><span class="built_in">window</span>[<span class="string">'location'</span>].replace(self[<span class="string">'location'</span>][<span class="string">'href'</span>])</span><br><span class="line"><span class="built_in">window</span>[<span class="string">'location'</span>][<span class="string">'assign'</span>](self[<span class="string">'location'</span>][<span class="string">'href'</span>])</span><br><span class="line"><span class="built_in">window</span>[<span class="string">'location'</span>][<span class="string">'replace'</span>](self[<span class="string">'location'</span>][<span class="string">'href'</span>])</span><br><span class="line">self.location[<span class="string">'assign'</span>](self[<span class="string">'location'</span>][<span class="string">'href'</span>])</span><br><span class="line">self.location[<span class="string">'replace'</span>](self[<span class="string">'location'</span>][<span class="string">'href'</span>])</span><br><span class="line">self[<span class="string">'location'</span>].assign(self[<span class="string">'location'</span>][<span class="string">'href'</span>])</span><br><span class="line">self[<span class="string">'location'</span>].replace(self[<span class="string">'location'</span>][<span class="string">'href'</span>])</span><br><span class="line">self[<span class="string">'location'</span>][<span class="string">'assign'</span>](self[<span class="string">'location'</span>][<span class="string">'href'</span>])</span><br><span class="line">self[<span class="string">'location'</span>][<span class="string">'replace'</span>](self[<span class="string">'location'</span>][<span class="string">'href'</span>])</span><br><span class="line">self.location[<span class="string">'href'</span>] = location</span><br><span class="line">self.location[<span class="string">'href'</span>] = location.href</span><br><span class="line">self.location[<span class="string">'href'</span>] = <span class="built_in">window</span>.location</span><br><span class="line">self.location[<span class="string">'href'</span>] = self.location</span><br><span class="line">self.location[<span class="string">'href'</span>] = <span class="built_in">window</span>.location.href</span><br><span class="line">self.location[<span class="string">'href'</span>] = self.location.href</span><br><span class="line">self.location[<span class="string">'href'</span>] = location[<span class="string">'href'</span>]</span><br><span class="line">self.location[<span class="string">'href'</span>] = <span class="built_in">window</span>[<span class="string">'location'</span>]</span><br><span class="line">self.location[<span class="string">'href'</span>] = <span class="built_in">window</span>[<span class="string">'location'</span>].href</span><br><span class="line">self.location[<span class="string">'href'</span>] = <span class="built_in">window</span>[<span class="string">'location'</span>][<span class="string">'href'</span>]</span><br><span class="line">self.location[<span class="string">'href'</span>] = <span class="built_in">window</span>.location[<span class="string">'href'</span>]</span><br><span class="line">self.location[<span class="string">'href'</span>] = self[<span class="string">'location'</span>]</span><br><span class="line">self.location[<span class="string">'href'</span>] = self[<span class="string">'location'</span>].href</span><br><span class="line">self.location[<span class="string">'href'</span>] = self[<span class="string">'location'</span>][<span class="string">'href'</span>]</span><br><span class="line">self.location[<span class="string">'href'</span>] = self.location[<span class="string">'href'</span>]</span><br><span class="line">location.assign(self.location[<span class="string">'href'</span>])</span><br><span class="line">location.replace(self.location[<span class="string">'href'</span>])</span><br><span class="line"><span class="built_in">window</span>.location.assign(self.location[<span class="string">'href'</span>])</span><br><span class="line"><span class="built_in">window</span>.location.replace(self.location[<span class="string">'href'</span>])</span><br><span class="line">self.location.assign(self.location[<span class="string">'href'</span>])</span><br><span class="line">self.location.replace(self.location[<span class="string">'href'</span>])</span><br><span class="line">location[<span class="string">'assign'</span>](self.location[<span class="string">'href'</span>])</span><br><span class="line">location[<span class="string">'replace'</span>](self.location[<span class="string">'href'</span>])</span><br><span class="line"><span class="built_in">window</span>.location[<span class="string">'assign'</span>](self.location[<span class="string">'href'</span>])</span><br><span class="line"><span class="built_in">window</span>.location[<span class="string">'replace'</span>](self.location[<span class="string">'href'</span>])</span><br><span class="line"><span class="built_in">window</span>[<span class="string">'location'</span>].assign(self.location[<span class="string">'href'</span>])</span><br><span class="line"><span class="built_in">window</span>[<span class="string">'location'</span>].replace(self.location[<span class="string">'href'</span>])</span><br><span class="line"><span class="built_in">window</span>[<span class="string">'location'</span>][<span class="string">'assign'</span>](self.location[<span class="string">'href'</span>])</span><br><span class="line"><span class="built_in">window</span>[<span class="string">'location'</span>][<span class="string">'replace'</span>](self.location[<span class="string">'href'</span>])</span><br><span class="line">self.location[<span class="string">'assign'</span>](self.location[<span class="string">'href'</span>])</span><br><span class="line">self.location[<span class="string">'replace'</span>](self.location[<span class="string">'href'</span>])</span><br><span class="line">self[<span class="string">'location'</span>].assign(self.location[<span class="string">'href'</span>])</span><br><span class="line">self[<span class="string">'location'</span>].replace(self.location[<span class="string">'href'</span>])</span><br><span class="line">self[<span class="string">'location'</span>][<span class="string">'assign'</span>](self.location[<span class="string">'href'</span>])</span><br><span class="line">self[<span class="string">'location'</span>][<span class="string">'replace'</span>](self.location[<span class="string">'href'</span>])</span><br><span class="line">location.reload()</span><br><span class="line">location[<span class="string">'reload'</span>]()</span><br><span class="line"><span class="built_in">window</span>.location.reload()</span><br><span class="line"><span class="built_in">window</span>[<span class="string">'location'</span>].reload()</span><br><span class="line"><span class="built_in">window</span>.location[<span class="string">'reload'</span>]()</span><br><span class="line"><span class="built_in">window</span>[<span class="string">'location'</span>][<span class="string">'reload'</span>]()</span><br><span class="line">self.location.reload()</span><br><span class="line">self[<span class="string">'location'</span>].reload()</span><br><span class="line">self.location[<span class="string">'reload'</span>]()</span><br><span class="line">self[<span class="string">'location'</span>][<span class="string">'reload'</span>]()</span><br></pre></td></tr></table></figure><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      
      
        &lt;!-- build time:Tue Mar 19 2019 20:23:22 GMT+0800 (GMT+08:00) --&gt;&lt;h3 id=&quot;下文整理了535种方法来实现刷新一下页面，没有验证，权做餐后谈资收藏一下！&quot;&gt;&lt;a href=&quot;#下文整理了535种方法来实现刷新一下
      
    
    </summary>
    
      <category term="Javascript" scheme="https://chen-95.gitee.io/categories/Javascript/"/>
    
    
      <category term="Javascript" scheme="https://chen-95.gitee.io/tags/Javascript/"/>
    
      <category term="页面重载" scheme="https://chen-95.gitee.io/tags/%E9%A1%B5%E9%9D%A2%E9%87%8D%E8%BD%BD/"/>
    
  </entry>
  
</feed>
